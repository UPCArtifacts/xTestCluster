import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        java.lang.Class<?> wildcardClass1 = mean0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray15 = new double[] { (byte) 10, 10, 0.25d, 100 };
        // The following exception was thrown during execution in test generation
        try {
            double double18 = mean0.evaluate(doubleArray15, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 10.0, 0.25, 100.0]");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        java.lang.Class<?> wildcardClass23 = doubleArray17.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        double[] doubleArray26 = new double[] { 100.0d, (byte) 10, (short) -1 };
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = mean0.evaluate(doubleArray26, doubleArray44, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = mean0.evaluate(doubleArray11, doubleArray29, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        double double17 = mean7.evaluate(doubleArray13, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double double28 = mean18.evaluate(doubleArray24, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean0.evaluate(doubleArray13, doubleArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = mean0.evaluate(doubleArray19, doubleArray41, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        java.lang.Class<?> wildcardClass12 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        mean13.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray41, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray18, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean20.setData(doubleArray37);
        mean9.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        double[] doubleArray75 = null;
        mean66.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        mean66.setData(doubleArray83);
        mean55.incrementAll(doubleArray83);
        double double90 = mean44.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = mean0.evaluate(doubleArray37, doubleArray83, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        long long22 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double30 = mean10.evaluate(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray28, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        double[] doubleArray38 = new double[] { (-1.0d), (byte) 10, (byte) 1, 1 };
        // The following exception was thrown during execution in test generation
        try {
            double double41 = mean0.evaluate(doubleArray28, doubleArray38, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: weigth array must contain at least one non-zero value");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 10.0, 1.0, 1.0]");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = mean0.evaluate(doubleArray64, (-1), 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        mean20.increment((double) (byte) 1);
        double[] doubleArray31 = mean20.getData();
        long long32 = mean20.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double40 = mean20.evaluate(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = mean0.evaluate(doubleArray18, doubleArray38, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        java.lang.Class<?> wildcardClass24 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = mean0.evaluate(doubleArray49, doubleArray62, 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: weigth array must contain at least one non-zero value");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean17.incrementAll(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = mean9.evaluate(doubleArray15, doubleArray45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean19.setData(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = mean0.evaluate(doubleArray17, doubleArray36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray11, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = mean0.evaluate(doubleArray16, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double65 = mean55.evaluate(doubleArray61, (int) (short) 0, (int) (short) 1);
        mean44.setData(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = mean0.evaluate(doubleArray38, doubleArray61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray18, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        double double59 = mean13.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray52, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        double[] doubleArray82 = null;
        mean73.setData(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double94 = mean84.evaluate(doubleArray90, (int) (short) 0, (int) (short) 1);
        mean73.setData(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = mean0.evaluate(doubleArray65, doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray52, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        mean12.incrementAll(doubleArray40);
        double double47 = mean1.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = mean0.evaluate(doubleArray40, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray41, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean0.evaluate(doubleArray29, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        double[] doubleArray56 = mean37.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray56, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        double[] doubleArray48 = new double[] { 0L, (-1), (short) 1 };
        mean32.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean32);
        double[] doubleArray51 = mean32.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray51, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        double[] doubleArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean0.evaluate(doubleArray27, doubleArray33, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        long long36 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double44 = mean24.evaluate(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean0.evaluate(doubleArray42, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean28.incrementAll(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = mean0.evaluate(doubleArray26, doubleArray44, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        double[] doubleArray63 = new double[] { 0L, (-1), (short) 1 };
        mean47.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean47);
        double[] doubleArray66 = mean47.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray66, (-1), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean43.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean66.increment(100.0d);
        double[] doubleArray82 = new double[] { 0L, (-1), (short) 1 };
        mean66.setData(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean66);
        double[] doubleArray85 = mean66.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean23.setData(doubleArray85, (int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = mean0.evaluate(doubleArray18, 10, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        mean2.increment((double) (byte) 1);
        double[] doubleArray13 = mean2.getData();
        long long14 = mean2.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double22 = mean2.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean0.evaluate(doubleArray20, doubleArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        mean23.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        mean42.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double[] doubleArray84 = new double[] {};
        mean77.incrementAll(doubleArray84);
        mean42.setData(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = mean0.evaluate(doubleArray39, doubleArray84, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        double double59 = mean13.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            mean10.incrementAll(doubleArray52, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean49.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double[] doubleArray91 = new double[] {};
        mean84.incrementAll(doubleArray91);
        mean49.setData(doubleArray91);
        double double96 = mean42.evaluate(doubleArray91, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            mean23.setData(doubleArray91, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray29, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean0.evaluate(doubleArray49, doubleArray51, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        mean56.incrementAll(doubleArray75);
        mean35.setData(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray75, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double[] doubleArray8 = new double[] {};
        mean1.incrementAll(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        mean1.incrementAll(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray17, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        double double33 = mean11.evaluate(doubleArray30);
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean11.evaluate(doubleArray34, doubleArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        java.lang.Class<?> wildcardClass35 = mean34.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        java.lang.Class<?> wildcardClass37 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray28, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        double[] doubleArray24 = new double[] {};
        mean17.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        mean17.incrementAll(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            mean3.setData(doubleArray33, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        long long29 = mean20.getN();
        double[] doubleArray30 = mean20.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean31);
        double double55 = mean20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        mean66.incrementAll(doubleArray85);
        mean20.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = mean0.evaluate(doubleArray18, doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean0.evaluate(doubleArray26, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        mean37.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean60.increment(100.0d);
        double[] doubleArray76 = new double[] { 0L, (-1), (short) 1 };
        mean60.setData(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean26.evaluate(doubleArray56, doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean11.clear();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean11.incrementAll(doubleArray13, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass27 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray40, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        long long55 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        mean66.incrementAll(doubleArray85);
        double double89 = mean32.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean0.evaluate(doubleArray26, doubleArray85, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray80, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray30, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean60.increment(100.0d);
        double[] doubleArray76 = new double[] { 0L, (-1), (short) 1 };
        mean60.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean60);
        double[] doubleArray79 = mean60.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean0.evaluate(doubleArray79, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        double[] doubleArray10 = new double[] {};
        mean3.incrementAll(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean3.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        mean3.incrementAll(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = mean0.evaluate(doubleArray19, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        long long36 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double44 = mean24.evaluate(doubleArray42);
        mean23.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        double[] doubleArray77 = null;
        mean68.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double89 = mean79.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        mean68.setData(doubleArray85);
        mean57.incrementAll(doubleArray85);
        double double92 = mean46.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean1.evaluate(doubleArray42, doubleArray85, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        java.lang.Class<?> wildcardClass22 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass13 = mean12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray18);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        long long36 = mean27.getN();
        double[] doubleArray37 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean38);
        double double62 = mean27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean74.increment((double) (byte) 1);
        double[] doubleArray85 = mean74.getData();
        long long86 = mean74.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double94 = mean74.evaluate(doubleArray92);
        mean73.incrementAll(doubleArray92);
        mean27.incrementAll(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray92, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray41, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean23.evaluate(doubleArray44, doubleArray50, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray38, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            mean25.setData(doubleArray56, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            mean26.setData(doubleArray32, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        double[] doubleArray30 = new double[] { 0L, (-1), (short) 1 };
        mean14.setData(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean0.evaluate(doubleArray30, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        long long19 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4L + "'", long19 == 4L);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        mean18.setData(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = mean0.evaluate(doubleArray25, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        mean37.setData(doubleArray79);
        mean12.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray79, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean12.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean12.setData(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray67, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        mean21.incrementAll(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = mean0.evaluate(doubleArray19, doubleArray37, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        double double11 = mean1.evaluate(doubleArray7, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = mean0.evaluate(doubleArray7, doubleArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray27, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        double double60 = mean14.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray53, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        mean23.increment((double) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        mean35.incrementAll(doubleArray54);
        mean14.incrementAll(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean1.evaluate(doubleArray54, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        mean31.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        mean50.incrementAll(doubleArray66);
        double double71 = mean12.evaluate(doubleArray47, doubleArray66, (int) (byte) 0, (int) (byte) 1);
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean11.evaluate(doubleArray66, doubleArray72, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        mean23.incrementAll(doubleArray51);
        double double58 = mean12.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean11.evaluate(doubleArray51, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        java.lang.Class<?> wildcardClass37 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        java.lang.Class<?> wildcardClass62 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        java.lang.Class<?> wildcardClass38 = mean36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        mean31.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        mean50.incrementAll(doubleArray66);
        double double71 = mean12.evaluate(doubleArray47, doubleArray66, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray66, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (short) 100);
        double[] doubleArray41 = new double[] { 100.0d, 'a' };
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean42.copy();
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        mean51.setData(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = mean0.evaluate(doubleArray41, doubleArray58, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean13.incrementAll(doubleArray15, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        double[] doubleArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray24, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        mean35.incrementAll(doubleArray54);
        mean14.setData(doubleArray54);
        boolean boolean59 = mean3.equals((java.lang.Object) doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray54, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        java.lang.Class<?> wildcardClass71 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray18, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean11.evaluate(doubleArray78, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        long long10 = mean1.getN();
        double[] doubleArray11 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean12);
        mean12.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        long long31 = mean22.getN();
        double[] doubleArray32 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean33);
        double double57 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double[] doubleArray65 = new double[] {};
        mean58.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        mean68.incrementAll(doubleArray87);
        mean22.incrementAll(doubleArray87);
        mean21.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray87, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        double[] doubleArray8 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        mean9.incrementAll(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = mean0.evaluate(doubleArray8, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        java.lang.Class<?> wildcardClass81 = mean53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean53.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double[] doubleArray21 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean0.evaluate(doubleArray21, doubleArray28, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        mean26.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean0.evaluate(doubleArray66, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        double double33 = mean11.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        double double36 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        mean81.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean81.setData(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = mean0.evaluate(doubleArray65, doubleArray88, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: weigth array must contain at least one non-zero value");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray12 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double13 = mean7.evaluate(doubleArray12);
        double[] doubleArray14 = new double[] {};
        mean7.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = mean7.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean7.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        mean7.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        mean26.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double[] doubleArray52 = new double[] {};
        mean45.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        mean45.incrementAll(doubleArray61);
        double double66 = mean7.evaluate(doubleArray42, doubleArray61, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = mean0.evaluate(doubleArray42, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.25d + "'", double13 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(mean16);
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean25.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean50.setData(doubleArray90);
        boolean boolean95 = mean39.equals((java.lang.Object) doubleArray90);
        double double98 = mean25.evaluate(doubleArray90, 0, (int) (byte) 0);
        boolean boolean99 = mean12.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        double[] doubleArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean34.setData(doubleArray35, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean13.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        boolean boolean37 = mean28.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        mean39.increment((double) (byte) 1);
        double[] doubleArray50 = mean39.getData();
        long long51 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double59 = mean39.evaluate(doubleArray57);
        double double60 = mean38.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray57, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        mean56.incrementAll(doubleArray75);
        mean35.setData(doubleArray75);
        boolean boolean80 = mean24.equals((java.lang.Object) doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray75, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        java.lang.Class<?> wildcardClass35 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        mean13.increment(100.0d);
        double[] doubleArray29 = new double[] { 0L, (-1), (short) 1 };
        mean13.setData(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray29, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean49.setData(doubleArray66);
        mean38.incrementAll(doubleArray66);
        mean13.setData(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray66, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double52 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        mean46.incrementAll(doubleArray74);
        double double81 = mean35.evaluate(doubleArray74);
        mean11.setData(doubleArray74);
        java.lang.Class<?> wildcardClass83 = doubleArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        long long57 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double[] doubleArray65 = new double[] {};
        mean58.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        mean68.incrementAll(doubleArray87);
        double double91 = mean34.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean10.setData(doubleArray87, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        java.lang.Class<?> wildcardClass14 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean84, mean85);
        double[] doubleArray93 = null;
        mean84.setData(doubleArray93);
        double[] doubleArray95 = null;
        mean84.setData(doubleArray95);
        boolean boolean97 = mean1.equals((java.lang.Object) doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean14.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean21.incrementAll(doubleArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean12.setData(doubleArray75, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        mean21.clear();
        mean21.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        mean21.incrementAll(doubleArray42);
        mean0.incrementAll(doubleArray42, 1, 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        double double35 = mean21.evaluate(doubleArray28, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray28, (int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        java.lang.Class<?> wildcardClass9 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        java.lang.Class<?> wildcardClass23 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        mean0.setData(doubleArray49);
        mean0.increment(Double.NaN);
        long long60 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray66, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        boolean boolean27 = mean0.equals((java.lang.Object) (byte) 0);
        double[] doubleArray28 = mean0.getData();
        double double29 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        boolean boolean82 = mean53.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        double[] doubleArray25 = mean10.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNull(doubleArray25);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        double[] doubleArray30 = new double[] { 0L, (-1), (short) 1 };
        mean14.setData(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray30, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        double[] doubleArray51 = new double[] { 0L, (-1), (short) 1 };
        mean35.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean35);
        long long54 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean35);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = mean35.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        mean27.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        boolean boolean50 = mean41.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        mean52.increment((double) (byte) 1);
        double[] doubleArray63 = mean52.getData();
        long long64 = mean52.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double72 = mean52.evaluate(doubleArray70);
        double double73 = mean51.evaluate(doubleArray70);
        mean27.incrementAll(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray70, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        double[] doubleArray12 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        mean35.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean35);
        double[] doubleArray42 = new double[] { 100, 1, (byte) 100 };
        mean35.setData(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = mean0.evaluate(doubleArray12, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        mean35.incrementAll(doubleArray54);
        mean14.incrementAll(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            mean12.setData(doubleArray54, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        mean24.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        double double70 = mean48.evaluate(doubleArray67);
        mean24.incrementAll(doubleArray67);
        mean12.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean0.evaluate(doubleArray67, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            mean36.incrementAll(doubleArray80, 100, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        mean18.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        mean37.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        mean56.incrementAll(doubleArray72);
        double double77 = mean18.evaluate(doubleArray53, doubleArray72, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = mean0.evaluate(doubleArray53, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        java.lang.Class<?> wildcardClass58 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        mean0.increment((double) 1.0f);
        java.lang.Class<?> wildcardClass39 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        mean11.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        boolean boolean34 = mean25.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        double double57 = mean35.evaluate(doubleArray54);
        mean11.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        long long68 = mean59.getN();
        mean59.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double[] doubleArray78 = new double[] {};
        mean71.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        mean71.incrementAll(doubleArray87);
        double double90 = mean59.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean0.evaluate(doubleArray54, doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean0.setData(doubleArray77);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        mean26.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        mean26.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        double double92 = mean26.evaluate(doubleArray89);
        double double93 = mean0.evaluate(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        mean26.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        mean26.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        double double92 = mean26.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean24.evaluate(doubleArray89, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        mean11.setData(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray53, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean19.setData(doubleArray36);
        mean8.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double[] doubleArray50 = new double[] {};
        mean43.incrementAll(doubleArray50);
        mean8.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        java.lang.Class<?> wildcardClass23 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        mean36.increment(52.0d);
        mean36.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        java.lang.Class<?> wildcardClass12 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        mean40.incrementAll(doubleArray68);
        mean15.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean13.evaluate(doubleArray68, doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        double double37 = mean0.getResult();
        java.lang.Class<?> wildcardClass38 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        double double68 = mean10.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double69 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        java.lang.Class<?> wildcardClass85 = mean16.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        mean0.increment(1.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        mean60.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean60);
        double[] doubleArray67 = new double[] { 100, 1, (byte) 100 };
        mean60.setData(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            mean37.incrementAll(doubleArray67, (int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        boolean boolean21 = mean12.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = mean10.evaluate(doubleArray52, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean63.incrementAll(doubleArray70);
        boolean boolean76 = mean41.equals((java.lang.Object) mean63);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean63.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        java.lang.Class<?> wildcardClass21 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        long long81 = mean36.getN();
        double double82 = mean36.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 2L + "'", long81 == 2L);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        double[] doubleArray76 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean0.evaluate(doubleArray14, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        boolean boolean25 = mean1.equals((java.lang.Object) mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(mean37);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        double double67 = mean58.getResult();
        java.lang.Class<?> wildcardClass68 = mean58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        java.lang.Class<?> wildcardClass27 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        mean0.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        java.lang.Class<?> wildcardClass42 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            mean21.setData(doubleArray39, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        mean0.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean61);
        boolean boolean76 = mean61.equals((java.lang.Object) 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        java.lang.Class<?> wildcardClass76 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        java.lang.Class<?> wildcardClass37 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        mean0.incrementAll(doubleArray60);
        double double63 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        mean14.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double[] doubleArray40 = new double[] {};
        mean33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        mean33.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean52.incrementAll(doubleArray68);
        double double73 = mean14.evaluate(doubleArray49, doubleArray68, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean14.setData(doubleArray91);
        mean13.setData(doubleArray91);
        mean13.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean13.evaluate(doubleArray75, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double14 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        boolean boolean25 = mean16.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        mean16.clear();
        boolean boolean28 = mean13.equals((java.lang.Object) mean16);
        long long29 = mean13.getN();
        double double30 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        boolean boolean41 = mean32.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        mean32.clear();
        mean32.clear();
        boolean boolean45 = mean13.equals((java.lang.Object) mean32);
        long long46 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = null;
        mean58.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean58.setData(doubleArray75);
        mean47.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double[] doubleArray89 = new double[] {};
        mean82.incrementAll(doubleArray89);
        mean47.setData(doubleArray89);
        double double92 = mean32.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray89, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double double38 = mean11.getResult();
        java.lang.Class<?> wildcardClass39 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        long long35 = mean26.getN();
        double[] doubleArray36 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean37);
        double double61 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        mean72.incrementAll(doubleArray91);
        mean26.incrementAll(doubleArray91);
        mean25.incrementAll(doubleArray91);
        mean0.incrementAll(doubleArray91);
        double[] doubleArray98 = mean0.getData();
        double double99 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertNull(doubleArray98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 20.199999999999996d + "'", double99 == 20.199999999999996d);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass39 = mean38.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        java.lang.Class<?> wildcardClass13 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        double double94 = mean0.evaluate(doubleArray84);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean26.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double double26 = mean0.getResult();
        mean0.increment(20.199999999999996d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean76.clear();
        double[] doubleArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean76.evaluate(doubleArray78, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double46 = mean45.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        boolean boolean27 = mean0.equals((java.lang.Object) (byte) 0);
        double[] doubleArray28 = mean0.getData();
        mean0.increment((double) (-1.0f));
        double[] doubleArray31 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double[] doubleArray51 = new double[] {};
        mean44.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean44.copy();
        mean54.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean54);
        double[] doubleArray58 = mean54.getData();
        double double59 = mean54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        double double81 = mean54.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = mean0.evaluate(doubleArray31, doubleArray78, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        double[] doubleArray64 = new double[] { 0L, (-1), (short) 1 };
        mean48.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean48);
        long long67 = mean48.getN();
        double[] doubleArray68 = mean48.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double71 = mean0.evaluate(doubleArray68, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean72.copy();
        mean82.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean82);
        double[] doubleArray89 = new double[] { 100, 1, (byte) 100 };
        mean82.setData(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray89, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        java.lang.Class<?> wildcardClass32 = mean22.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        mean13.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        boolean boolean36 = mean27.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        boolean boolean83 = mean27.equals((java.lang.Object) doubleArray78);
        double double86 = mean13.evaluate(doubleArray78, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray78, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        long long32 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        mean26.setData(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean25.setData(doubleArray79, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        java.lang.Class<?> wildcardClass86 = mean85.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        mean0.increment((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean45.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean23.copy();
        boolean boolean50 = mean21.equals((java.lang.Object) mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        long long84 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean61);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 4L + "'", long84 == 4L);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        mean31.incrementAll(doubleArray59);
        double double66 = mean20.evaluate(doubleArray59);
        mean10.setData(doubleArray59);
        mean0.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass13 = mean12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray34, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        mean55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        double double78 = mean64.evaluate(doubleArray71, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean53.evaluate(doubleArray71, 100, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        mean36.incrementAll(doubleArray55);
        mean15.incrementAll(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = mean0.evaluate(doubleArray55, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long77 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double80 = mean78.evaluate(doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        java.lang.Class<?> wildcardClass38 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        boolean boolean42 = mean33.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        mean44.increment((double) (byte) 1);
        double[] doubleArray55 = mean44.getData();
        long long56 = mean44.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double64 = mean44.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean44.evaluate(doubleArray83);
        mean43.incrementAll(doubleArray83, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean22.evaluate(doubleArray83, 10, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        double[] doubleArray51 = mean36.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(doubleArray51);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double[] doubleArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean44.evaluate(doubleArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        long long36 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double44 = mean24.evaluate(doubleArray42);
        double double45 = mean23.evaluate(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray42, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray10 = mean9.getData();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray11, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray10);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        double[] doubleArray26 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        mean39.setData(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = mean1.evaluate(doubleArray71, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        long long49 = mean26.getN();
        double double50 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        mean72.incrementAll(doubleArray91);
        mean51.setData(doubleArray91);
        mean26.setData(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = mean0.evaluate(doubleArray91, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        mean46.incrementAll(doubleArray74);
        double double81 = mean35.evaluate(doubleArray74);
        mean11.setData(doubleArray74);
        double[] doubleArray83 = null;
        mean11.setData(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        boolean boolean25 = mean16.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        double[] doubleArray38 = mean27.getData();
        long long39 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double47 = mean27.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean27.evaluate(doubleArray66);
        mean26.incrementAll(doubleArray66, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean73.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double93 = mean83.evaluate(doubleArray89, (int) (short) 0, (int) (short) 1);
        double double96 = mean82.evaluate(doubleArray89, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = mean14.evaluate(doubleArray66, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean11.evaluate(doubleArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        java.lang.Class<?> wildcardClass52 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean0.evaluate(doubleArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean46.increment((double) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        java.lang.Class<?> wildcardClass59 = mean58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        long long22 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        mean36.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        boolean boolean59 = mean50.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean60.evaluate(doubleArray79);
        mean36.incrementAll(doubleArray79);
        mean24.incrementAll(doubleArray79);
        double double85 = mean23.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray79, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        boolean boolean15 = mean13.equals((java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass16 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        java.lang.Class<?> wildcardClass18 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean46.incrementAll(doubleArray53, 1, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        java.lang.Class<?> wildcardClass54 = mean53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        long long33 = mean10.getN();
        double double34 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        mean56.incrementAll(doubleArray75);
        mean35.setData(doubleArray75);
        mean10.setData(doubleArray75);
        long long81 = mean10.getN();
        double[] doubleArray82 = mean10.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean9.incrementAll(doubleArray82, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        double[] doubleArray52 = mean41.getData();
        long long53 = mean41.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double61 = mean41.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            mean15.incrementAll(doubleArray59, 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean60.increment((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean29.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        double double83 = mean29.evaluate(doubleArray78);
        double double84 = mean13.evaluate(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double[] doubleArray78 = new double[] {};
        mean71.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        mean71.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean0.evaluate(doubleArray87, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        java.lang.Class<?> wildcardClass46 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        java.lang.Class<?> wildcardClass28 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass61 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        double[] doubleArray81 = mean53.getData();
        java.lang.Class<?> wildcardClass82 = mean53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        mean70.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean49.setData(doubleArray66);
        mean38.incrementAll(doubleArray66);
        double double73 = mean27.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = mean22.evaluate(doubleArray66, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        java.lang.Class<?> wildcardClass58 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean63.incrementAll(doubleArray70);
        boolean boolean76 = mean41.equals((java.lang.Object) mean63);
        long long77 = mean63.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 4L + "'", long77 == 4L);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        long long44 = mean43.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        boolean boolean55 = mean46.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        double double78 = mean56.evaluate(doubleArray75);
        mean43.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = mean19.evaluate(doubleArray75, doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double double66 = mean56.getResult();
        boolean boolean67 = mean0.equals((java.lang.Object) mean56);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        mean0.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double[] doubleArray82 = new double[] {};
        mean75.incrementAll(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean75.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean75.copy();
        mean85.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean63.copy();
        boolean boolean90 = mean0.equals((java.lang.Object) mean63);
        java.lang.Class<?> wildcardClass91 = mean63.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        double double37 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        mean70.clear();
        mean70.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean70.incrementAll(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean0.evaluate(doubleArray55, doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double88 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        boolean boolean70 = mean14.equals((java.lang.Object) doubleArray65);
        double double73 = mean0.evaluate(doubleArray65, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        mean0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double double26 = mean0.getResult();
        double double27 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        double[] doubleArray39 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        mean50.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean50);
        double[] doubleArray54 = mean50.getData();
        double double55 = mean50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        long long68 = mean56.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double76 = mean56.evaluate(doubleArray74);
        double double77 = mean50.evaluate(doubleArray74);
        mean0.setData(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double double37 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray78, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        java.lang.Class<?> wildcardClass59 = mean58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean26.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = mean0.evaluate(doubleArray16, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray15, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean12.clear();
        double[] doubleArray14 = mean12.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double double26 = mean0.getResult();
        java.lang.Class<?> wildcardClass27 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        java.lang.Class<?> wildcardClass68 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        double[] doubleArray84 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean76.clear();
        mean76.clear();
        java.lang.Class<?> wildcardClass79 = mean76.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        java.lang.Class<?> wildcardClass20 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        double[] doubleArray39 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        mean50.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean50);
        double[] doubleArray54 = mean50.getData();
        double double55 = mean50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        long long68 = mean56.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double76 = mean56.evaluate(doubleArray74);
        double double77 = mean50.evaluate(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray74, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        double double48 = mean34.evaluate(doubleArray41, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean22.setData(doubleArray41, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        java.lang.Class<?> wildcardClass20 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long77 = mean0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        double[] doubleArray38 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        java.lang.Object obj49 = null;
        boolean boolean50 = mean48.equals(obj49);
        double double51 = mean48.getResult();
        mean48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        double double77 = mean63.evaluate(doubleArray70, 1, (int) (byte) 1);
        mean48.incrementAll(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean37.evaluate(doubleArray70, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        long long26 = mean0.getN();
        double double27 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        mean35.setData(doubleArray77);
        double double82 = mean28.evaluate(doubleArray77, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean28.incrementAll(doubleArray88);
        double double91 = mean0.evaluate(doubleArray88);
        mean0.increment(10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4.0d + "'", double27 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray17, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        double[] doubleArray34 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNull(doubleArray34);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double10 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        mean21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean21.setData(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = mean1.evaluate(doubleArray28, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        mean57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean57);
        double[] doubleArray82 = mean57.getData();
        mean0.incrementAll(doubleArray82, 1, (int) (short) 1);
        java.lang.Class<?> wildcardClass86 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        mean36.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean36);
        double[] doubleArray43 = new double[] { 100, 1, (byte) 100 };
        mean36.setData(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean13.evaluate(doubleArray43, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        java.lang.Class<?> wildcardClass52 = mean36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        mean58.increment(20.199999999999996d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        mean19.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        mean19.setData(doubleArray61);
        double double66 = mean12.evaluate(doubleArray61, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        mean12.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            mean10.setData(doubleArray72, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        java.lang.Class<?> wildcardClass38 = mean37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        mean22.setData(doubleArray71);
        mean13.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray71, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean0.evaluate(doubleArray31, 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass34 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        mean59.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean59);
        double[] doubleArray66 = new double[] { 100, 1, (byte) 100 };
        mean59.setData(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean0.evaluate(doubleArray66, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        double[] doubleArray54 = mean15.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNull(doubleArray54);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        double double26 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        mean36.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        mean56.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean56);
        double[] doubleArray60 = mean56.getData();
        double double61 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        double double83 = mean56.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = mean10.evaluate(doubleArray80, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double[] doubleArray80 = new double[] {};
        mean73.incrementAll(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean73.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean73.copy();
        mean83.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean83);
        double[] doubleArray90 = new double[] { 100, 1, (byte) 100 };
        mean83.setData(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = mean0.evaluate(doubleArray90, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean45.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean23.copy();
        boolean boolean50 = mean21.equals((java.lang.Object) mean49);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean49.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean15.incrementAll(doubleArray68, (int) (byte) 0, 0);
        mean14.setData(doubleArray68);
        java.lang.Class<?> wildcardClass76 = mean14.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        double double42 = mean1.getResult();
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        boolean boolean70 = mean61.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        double double93 = mean71.evaluate(doubleArray90);
        mean0.incrementAll(doubleArray90);
        double double95 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass97 = mean96.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25000000000000006d + "'", double95 == 0.25000000000000006d);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        mean23.increment(20.199999999999996d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        mean39.setData(doubleArray81);
        mean14.incrementAll(doubleArray81);
        mean1.incrementAll(doubleArray81);
        java.lang.Class<?> wildcardClass86 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        double double72 = mean71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean44.evaluate(doubleArray79, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double double51 = mean24.getResult();
        double[] doubleArray52 = mean24.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNull(doubleArray52);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        double[] doubleArray32 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray32);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        long long14 = mean13.getN();
        java.lang.Class<?> wildcardClass15 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean36.copy();
        double double82 = mean36.getResult();
        mean36.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        double double71 = mean0.getResult();
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double73 = mean0.evaluate(doubleArray72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean55.clear();
        mean55.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean26.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        java.lang.Class<?> wildcardClass47 = mean44.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        double double79 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(mean80);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        double[] doubleArray14 = mean13.getData();
        long long15 = mean13.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        boolean boolean82 = mean26.equals((java.lang.Object) doubleArray77);
        boolean boolean83 = mean22.equals((java.lang.Object) mean26);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        boolean boolean59 = mean9.equals((java.lang.Object) mean38);
        double[] doubleArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean9.evaluate(doubleArray60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean0.copy();
        double[] doubleArray36 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray36);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        double[] doubleArray69 = mean68.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        double[] doubleArray84 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        mean0.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        mean70.setData(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean0.evaluate(doubleArray77, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        double[] doubleArray27 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        double double86 = mean40.evaluate(doubleArray79);
        mean30.setData(doubleArray79);
        double double88 = mean16.evaluate(doubleArray79);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        mean25.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray84, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        double double37 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        mean13.setData(doubleArray78);
        double double84 = mean1.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double86 = mean85.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        mean23.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean0.evaluate(doubleArray14, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        double[] doubleArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean10.incrementAll(doubleArray35, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean11.clear();
        mean11.clear();
        mean11.increment((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        double[] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray53, (int) (byte) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean15.incrementAll(doubleArray68, (int) (byte) 0, 0);
        mean14.setData(doubleArray68);
        double double76 = mean14.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        java.lang.Class<?> wildcardClass28 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        java.lang.Class<?> wildcardClass46 = mean45.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean72.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray79, (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean56.copy();
        double double85 = mean56.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        java.lang.Class<?> wildcardClass38 = mean37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean27.clear();
        long long29 = mean27.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean0.copy();
        mean68.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        java.lang.Class<?> wildcardClass48 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double double37 = mean11.getResult();
        mean11.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean34.incrementAll(doubleArray41);
        mean10.setData(doubleArray41);
        mean10.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean19.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        boolean boolean42 = mean33.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        mean66.increment((double) (byte) 1);
        double[] doubleArray77 = mean66.getData();
        long long78 = mean66.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double86 = mean66.evaluate(doubleArray84);
        mean65.incrementAll(doubleArray84);
        mean44.setData(doubleArray84);
        boolean boolean89 = mean33.equals((java.lang.Object) doubleArray84);
        double double92 = mean19.evaluate(doubleArray84, 0, (int) (byte) 0);
        mean0.setData(doubleArray84);
        java.lang.Class<?> wildcardClass94 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = mean46.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double[] doubleArray68 = mean0.getData();
        double double69 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean9.copy();
        double double21 = mean20.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        java.lang.Class<?> wildcardClass51 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean33.copy();
        java.lang.Class<?> wildcardClass35 = mean34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double[] doubleArray40 = new double[] {};
        mean33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        mean33.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean52.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double[] doubleArray78 = new double[] {};
        mean71.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        mean71.incrementAll(doubleArray87);
        double double92 = mean33.evaluate(doubleArray68, doubleArray87, (int) (byte) 0, (int) (byte) 1);
        mean0.setData(doubleArray68);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        long long13 = mean1.getN();
        double[] doubleArray14 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        mean13.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double[] doubleArray65 = new double[] {};
        mean58.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = mean12.evaluate(doubleArray53, doubleArray65, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean71.incrementAll(doubleArray78);
        mean0.setData(doubleArray78, (int) (byte) 0, 0);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        mean17.clear();
        mean17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean30.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double[] doubleArray85 = new double[] {};
        mean78.incrementAll(doubleArray85);
        mean43.setData(doubleArray85);
        mean30.setData(doubleArray85);
        mean17.setData(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            mean3.incrementAll(doubleArray85, (int) (short) 1, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray65, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        java.lang.Class<?> wildcardClass29 = mean26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long77 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean78.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertNotNull(mean79);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        mean18.setData(doubleArray25);
        double double28 = mean18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        mean31.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        double double54 = mean40.evaluate(doubleArray47, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean64.incrementAll(doubleArray71);
        mean40.setData(doubleArray71);
        double double78 = mean29.evaluate(doubleArray71);
        double[] doubleArray80 = new double[] { (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean1.evaluate(doubleArray71, doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        double double13 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean67.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        mean57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean57);
        double[] doubleArray82 = mean57.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray82, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        double double80 = mean36.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass60 = mean59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        mean57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean57.setData(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray64, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        double double29 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double33 = mean32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean19);
        double double36 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean22.copy();
        double double24 = mean23.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double21 = mean20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        boolean boolean32 = mean23.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        mean23.clear();
        boolean boolean35 = mean20.equals((java.lang.Object) mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        mean36.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        mean55.incrementAll(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        mean74.incrementAll(doubleArray90);
        double double95 = mean36.evaluate(doubleArray71, doubleArray90, (int) (byte) 0, (int) (byte) 1);
        mean23.setData(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            mean9.incrementAll(doubleArray90, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean52.copy();
        mean52.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mean53);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray9);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        mean70.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean70);
        double[] doubleArray77 = new double[] { 100, 1, (byte) 100 };
        mean70.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        double[] doubleArray82 = new double[] { 52.0d, 4.0d };
        double double83 = mean79.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            mean46.setData(doubleArray82, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.0d + "'", double83 == 28.0d);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        double[] doubleArray23 = mean0.getData();
        java.lang.Class<?> wildcardClass24 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        long long40 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        boolean boolean42 = mean12.equals((java.lang.Object) mean15);
        mean15.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        mean70.increment((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        long long84 = mean61.getN();
        mean61.increment((double) 4L);
        boolean boolean88 = mean61.equals((java.lang.Object) (byte) 0);
        double[] doubleArray89 = mean61.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean24.evaluate(doubleArray89, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray68, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 1.0f);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        double[] doubleArray12 = mean1.getData();
        double[] doubleArray13 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        double double60 = mean0.evaluate();
        mean0.increment((double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double double42 = mean23.getResult();
        mean23.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean0.setData(doubleArray77);
        mean0.increment((double) '#');
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        mean31.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean31.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        double double86 = mean64.evaluate(doubleArray83);
        mean0.incrementAll(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        double double27 = mean26.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        mean56.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean56);
        double[] doubleArray63 = new double[] { 100, 1, (byte) 100 };
        mean56.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        double[] doubleArray68 = new double[] { 52.0d, 4.0d };
        double double69 = mean65.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            mean33.setData(doubleArray68, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 28.0d + "'", double69 == 28.0d);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        mean22.clear();
        mean22.increment((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        java.lang.Class<?> wildcardClass20 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        mean0.increment((double) 10.0f);
        double double11 = mean0.getResult();
        double[] doubleArray12 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        double double81 = mean36.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        double double81 = mean31.evaluate(doubleArray71, 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean31.copy();
        java.lang.Class<?> wildcardClass83 = mean31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        double[] doubleArray70 = mean58.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        long long36 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double44 = mean24.evaluate(doubleArray42);
        double double45 = mean23.evaluate(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = mean1.evaluate(doubleArray42, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean50.setData(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            mean47.setData(doubleArray90, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        mean9.increment((double) 1L);
        long long27 = mean9.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5L + "'", long27 == 5L);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        long long40 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean64.increment(100.0d);
        double[] doubleArray80 = new double[] { 0L, (-1), (short) 1 };
        mean64.setData(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean64);
        long long83 = mean64.getN();
        double[] doubleArray84 = mean64.getData();
        mean33.setData(doubleArray84);
        mean31.incrementAll(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        long long51 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        long long75 = mean63.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double83 = mean63.evaluate(doubleArray81);
        mean62.incrementAll(doubleArray81);
        double double85 = mean28.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean86);
        long long88 = mean13.getN();
        mean13.increment(1.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        mean3.clear();
        long long18 = mean3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = mean23.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        mean46.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean46);
        double[] doubleArray53 = new double[] { 100, 1, (byte) 100 };
        mean46.setData(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = mean12.evaluate(doubleArray19, doubleArray53, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        mean26.increment((double) (byte) 1);
        double[] doubleArray37 = mean26.getData();
        mean26.increment((double) (byte) 10);
        long long40 = mean26.getN();
        mean26.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = mean25.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        double[] doubleArray56 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double[] doubleArray64 = new double[] {};
        mean57.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        mean57.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean22.evaluate(doubleArray56, doubleArray73, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean36.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double[] doubleArray78 = new double[] {};
        mean71.incrementAll(doubleArray78);
        mean36.setData(doubleArray78);
        double double83 = mean29.evaluate(doubleArray78, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        mean29.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean26.setData(doubleArray89, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        mean0.increment((double) 10.0f);
        double double11 = mean0.getResult();
        mean0.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        java.lang.Class<?> wildcardClass50 = mean47.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        mean9.increment(0.25d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        mean0.increment(100.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        double double71 = mean0.getResult();
        double[] doubleArray72 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        double double37 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        mean13.setData(doubleArray78);
        double double84 = mean1.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double86 = mean85.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean85);
        double[] doubleArray88 = mean85.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNull(doubleArray88);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean0.evaluate(doubleArray14, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean21.incrementAll(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean0.evaluate(doubleArray28, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        double double36 = mean0.getResult();
        double[] doubleArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray37, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean0.getResult();
        double[] doubleArray57 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double58 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(doubleArray57);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        long long26 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        mean39.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        boolean boolean62 = mean53.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean64.increment((double) (byte) 1);
        double[] doubleArray75 = mean64.getData();
        long long76 = mean64.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double84 = mean64.evaluate(doubleArray82);
        double double85 = mean63.evaluate(doubleArray82);
        mean39.incrementAll(doubleArray82);
        mean27.incrementAll(doubleArray82);
        mean15.incrementAll(doubleArray82, (int) (byte) 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean13.setData(doubleArray82, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        long long21 = mean12.getN();
        double[] doubleArray22 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean23);
        double double47 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        boolean boolean62 = mean12.equals((java.lang.Object) mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean74.increment((double) (byte) 1);
        double[] doubleArray85 = mean74.getData();
        long long86 = mean74.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double94 = mean74.evaluate(doubleArray92);
        mean73.incrementAll(doubleArray92);
        double double96 = mean48.evaluate(doubleArray92);
        double double97 = mean0.evaluate(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        java.lang.Object obj37 = null;
        boolean boolean38 = mean36.equals(obj37);
        double double39 = mean36.getResult();
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean42.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        double double65 = mean51.evaluate(doubleArray58, 1, (int) (byte) 1);
        mean36.incrementAll(doubleArray58);
        double double67 = mean0.evaluate(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        double[] doubleArray51 = new double[] { 0L, (-1), (short) 1 };
        mean35.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean35);
        long long54 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean35);
        java.lang.Class<?> wildcardClass56 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        double[] doubleArray81 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean53.copy();
        double double83 = mean53.getResult();
        double double84 = mean53.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        mean22.clear();
        long long52 = mean22.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double18 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        boolean boolean29 = mean20.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean20.copy();
        mean20.clear();
        boolean boolean32 = mean17.equals((java.lang.Object) mean20);
        long long33 = mean17.getN();
        double double34 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        boolean boolean45 = mean36.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        mean36.clear();
        mean36.clear();
        boolean boolean49 = mean17.equals((java.lang.Object) mean36);
        long long50 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double[] doubleArray93 = new double[] {};
        mean86.incrementAll(doubleArray93);
        mean51.setData(doubleArray93);
        double double96 = mean36.evaluate(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray93, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double33 = mean32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean36);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        long long51 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        long long75 = mean63.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double83 = mean63.evaluate(doubleArray81);
        mean62.incrementAll(doubleArray81);
        double double85 = mean28.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean86);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean86);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.increment((double) 4L);
        boolean boolean38 = mean11.equals((java.lang.Object) (byte) 0);
        double[] doubleArray39 = mean11.getData();
        mean11.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        mean43.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        double double66 = mean52.evaluate(doubleArray59, 1, (int) (byte) 1);
        double double67 = mean11.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            mean10.setData(doubleArray59, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean1.setData(doubleArray91);
        double[] doubleArray98 = mean1.getData();
        double double99 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray10 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        mean22.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        mean60.clear();
        mean60.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        double double87 = mean73.evaluate(doubleArray80, 1, (int) (byte) 1);
        mean60.setData(doubleArray80);
        mean48.setData(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean9.evaluate(doubleArray10, doubleArray80, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        mean0.increment(50.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        double double76 = mean13.getResult();
        long long77 = mean13.getN();
        double[] doubleArray78 = mean13.getData();
        mean13.increment((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNull(doubleArray78);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        java.lang.Class<?> wildcardClass26 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        java.lang.Class<?> wildcardClass27 = mean26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        mean13.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        mean27.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        long long61 = mean38.getN();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean38);
        mean27.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean68.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        double double91 = mean77.evaluate(doubleArray84, 1, (int) (byte) 1);
        mean27.setData(doubleArray84);
        mean11.incrementAll(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray23, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        long long65 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean54);
        long long68 = mean54.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        mean69.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        long long11 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        mean22.setData(doubleArray71);
        mean12.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray71, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        mean74.incrementAll(doubleArray90);
        mean26.setData(doubleArray90);
        mean26.increment((double) 5L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        mean56.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = mean12.evaluate(doubleArray18, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean0.copy();
        long long30 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        long long65 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean54);
        double[] doubleArray70 = new double[] { (-1.0d), 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double double73 = mean0.evaluate(doubleArray70, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0]");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        mean3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        mean18.increment((double) (byte) 1);
        double[] doubleArray29 = mean18.getData();
        mean18.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        boolean boolean66 = mean57.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        mean68.increment((double) (byte) 1);
        double[] doubleArray79 = mean68.getData();
        long long80 = mean68.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double88 = mean68.evaluate(doubleArray86);
        double double89 = mean67.evaluate(doubleArray86);
        mean33.incrementAll(doubleArray86, (int) (byte) 0, 0);
        mean32.setData(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = mean3.evaluate(doubleArray86, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        boolean boolean71 = mean62.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        long long73 = mean62.getN();
        double double74 = mean62.getResult();
        mean62.increment((double) 10);
        long long77 = mean62.getN();
        mean62.increment(50.0d);
        boolean boolean80 = mean60.equals((java.lang.Object) 50.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass28 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        mean61.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        long long21 = mean12.getN();
        double[] doubleArray22 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double50 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        java.lang.Object obj61 = null;
        boolean boolean62 = mean60.equals(obj61);
        double double63 = mean60.getResult();
        mean60.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double[] doubleArray84 = new double[] {};
        mean77.incrementAll(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean77.copy();
        mean87.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean87);
        double[] doubleArray94 = new double[] { 100, 1, (byte) 100 };
        mean87.setData(doubleArray94);
        mean60.incrementAll(doubleArray94);
        mean23.setData(doubleArray94);
        mean11.incrementAll(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean36.copy();
        double double82 = mean36.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean36.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        double double25 = mean13.getResult();
        mean13.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        mean28.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        mean28.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        double double94 = mean28.evaluate(doubleArray91);
        double double95 = mean13.evaluate(doubleArray91);
        double double98 = mean11.evaluate(doubleArray91, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean99 = mean11.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertNotNull(mean99);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        long long13 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (short) 100);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = mean41.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        double double73 = mean41.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = mean0.evaluate(doubleArray67, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        java.lang.Class<?> wildcardClass25 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        mean21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean21.setData(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray28, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        double[] doubleArray30 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean43.setData(doubleArray60);
        mean32.incrementAll(doubleArray60);
        double double67 = mean21.evaluate(doubleArray60);
        mean11.setData(doubleArray60);
        mean11.increment(Double.NaN);
        long long71 = mean11.getN();
        double[] doubleArray72 = mean11.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray72, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        long long55 = mean46.getN();
        double[] doubleArray56 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        long long35 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean57);
        mean36.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean36);
        mean36.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        long long46 = mean37.getN();
        double[] doubleArray47 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        mean48.increment((-1.0d));
        double[] doubleArray74 = mean48.getData();
        double double75 = mean48.getResult();
        boolean boolean76 = mean9.equals((java.lang.Object) double75);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1.0d) + "'", double75 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        mean1.increment((double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray34, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        mean0.increment(20.199999999999996d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean1.setData(doubleArray91);
        java.lang.Class<?> wildcardClass98 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        double double28 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long23 = mean22.getN();
        double double24 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        java.lang.Class<?> wildcardClass28 = mean26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        long long51 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean0.copy();
        java.lang.Class<?> wildcardClass53 = mean52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        mean0.setData(doubleArray49);
        mean0.increment(Double.NaN);
        long long60 = mean0.getN();
        java.lang.Class<?> wildcardClass61 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        boolean boolean52 = mean43.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        mean64.incrementAll(doubleArray83);
        mean43.incrementAll(doubleArray83);
        double double90 = mean1.evaluate(doubleArray83, 0, 1);
        java.lang.Class<?> wildcardClass91 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        mean1.clear();
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
    }
}


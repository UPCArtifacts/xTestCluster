import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        mean26.increment((double) (byte) 1);
        double[] doubleArray37 = mean26.getData();
        long long38 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double46 = mean26.evaluate(doubleArray44);
        mean25.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        double double69 = mean48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean25.copy();
        long long83 = mean82.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean85);
        double[] doubleArray87 = mean14.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 4L + "'", long83 == 4L);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNull(doubleArray87);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        double double84 = mean0.getResult();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        double[] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean45.incrementAll(doubleArray47, 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        double double72 = mean58.evaluate(doubleArray65, 1, (int) (byte) 1);
        double double73 = mean0.evaluate(doubleArray65);
        double[] doubleArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean0.evaluate(doubleArray74, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        mean47.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        long long51 = mean22.getN();
        double double52 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean80.copy();
        mean80.increment((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        double[] doubleArray24 = new double[] {};
        mean17.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = mean16.evaluate(doubleArray24, doubleArray32, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        double[] doubleArray13 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean45.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean23.copy();
        boolean boolean50 = mean21.equals((java.lang.Object) mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        boolean boolean84 = mean21.equals((java.lang.Object) mean61);
        long long85 = mean21.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        mean11.increment((double) 1.0f);
        double double95 = mean11.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        mean12.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        mean12.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        double double78 = mean12.evaluate(doubleArray75);
        double double79 = mean12.getResult();
        double[] doubleArray80 = mean12.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean0.evaluate(doubleArray80, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean49.setData(doubleArray51, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean1.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean46.evaluate(doubleArray53);
        java.lang.Class<?> wildcardClass56 = mean46.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        mean1.increment((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        mean49.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean23.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray66, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        mean35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean35.incrementAll(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        double double81 = mean31.evaluate(doubleArray71, 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean31.copy();
        double double83 = mean31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        mean58.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(mean58);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        long long29 = mean20.getN();
        mean20.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double[] doubleArray39 = new double[] {};
        mean32.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        mean32.incrementAll(doubleArray48);
        double double51 = mean20.evaluate(doubleArray48);
        mean9.setData(doubleArray48, 0, (int) (byte) 0);
        double double55 = mean9.evaluate();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        boolean boolean64 = mean55.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        long long66 = mean55.getN();
        double double67 = mean55.getResult();
        mean55.increment((double) 10);
        boolean boolean70 = mean53.equals((java.lang.Object) 10);
        mean53.increment((double) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        mean22.increment((double) (byte) 1);
        double[] doubleArray33 = mean22.getData();
        long long34 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double42 = mean22.evaluate(doubleArray40);
        mean21.incrementAll(doubleArray40);
        mean0.incrementAll(doubleArray40);
        double[] doubleArray45 = mean0.getData();
        double double46 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray97 = mean70.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean70.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean98);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        mean35.clear();
        double double76 = mean35.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        mean31.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean31.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean36);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass60 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        mean59.incrementAll(doubleArray87);
        double double94 = mean48.evaluate(doubleArray87);
        mean24.setData(doubleArray87);
        mean0.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        java.lang.Object obj23 = null;
        boolean boolean24 = mean22.equals(obj23);
        double double25 = mean22.getResult();
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        double[] doubleArray38 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        mean49.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean49);
        double[] doubleArray56 = new double[] { 100, 1, (byte) 100 };
        mean49.setData(doubleArray56);
        mean22.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            mean12.incrementAll(doubleArray56, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        double[] doubleArray33 = mean0.getData();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(doubleArray33);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        long long10 = mean1.getN();
        double[] doubleArray11 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean12);
        double double36 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        boolean boolean51 = mean1.equals((java.lang.Object) mean37);
        mean37.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        long long77 = mean54.getN();
        double double78 = mean54.getResult();
        long long79 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean54);
        double[] doubleArray82 = mean54.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean54.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean22.copy();
        long long28 = mean27.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        double[] doubleArray19 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNull(doubleArray19);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double19 = mean18.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        double double72 = mean18.evaluate(doubleArray67, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        mean18.incrementAll(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean17.evaluate(doubleArray78, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean41.increment(100.0d);
        double[] doubleArray57 = new double[] { 0L, (-1), (short) 1 };
        mean41.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean41);
        long long60 = mean41.getN();
        double[] doubleArray61 = mean41.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        mean41.increment((double) 10L);
        double[] doubleArray65 = mean41.getData();
        double[] doubleArray66 = mean41.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray66, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        double[] doubleArray37 = mean10.getData();
        mean10.increment((double) (-1L));
        double[] doubleArray40 = mean10.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNull(doubleArray40);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean55.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = mean56.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(mean56);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        mean1.increment((double) 0.0f);
        java.lang.Class<?> wildcardClass21 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        double double60 = mean0.evaluate();
        double double61 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        mean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(mean86);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean33.copy();
        mean33.increment((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double[] doubleArray37 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNull(doubleArray37);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = mean22.evaluate(doubleArray37, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = mean23.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        java.lang.Class<?> wildcardClass47 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        boolean boolean25 = mean0.equals((java.lang.Object) mean24);
        java.lang.Class<?> wildcardClass26 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        double double26 = mean16.evaluate(doubleArray22, (int) (short) 0, (int) (short) 1);
        mean16.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        boolean boolean30 = mean1.equals((java.lang.Object) mean16);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        mean25.increment(0.25d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean33.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean33.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        double double94 = mean0.evaluate(doubleArray84);
        double double95 = mean0.getResult();
        java.lang.Class<?> wildcardClass96 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        java.lang.Class<?> wildcardClass14 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        mean36.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        mean1.increment((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray97 = mean69.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        mean14.increment((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean14.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double double38 = mean11.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double39 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        long long51 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean53.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(mean53);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        long long24 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        double[] doubleArray64 = new double[] { 0L, (-1), (short) 1 };
        mean48.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean48);
        long long67 = mean48.getN();
        double[] doubleArray68 = mean48.getData();
        mean23.setData(doubleArray68, (int) (short) 1, (int) (short) 1);
        double double74 = mean0.evaluate(doubleArray68, (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass75 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        mean22.clear();
        mean22.increment(0.25000000000000006d);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        long long36 = mean24.getN();
        double[] doubleArray37 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean49.incrementAll(doubleArray77);
        double double84 = mean38.evaluate(doubleArray77);
        mean24.setData(doubleArray77);
        mean0.incrementAll(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double double39 = mean11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        mean58.increment((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        long long48 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment((double) ' ');
        java.lang.Class<?> wildcardClass16 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        long long17 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean18.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(mean19);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        java.lang.Class<?> wildcardClass10 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        mean0.increment((double) (short) -1);
        double double54 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        boolean boolean17 = mean8.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean8.copy();
        long long19 = mean8.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean20.setData(doubleArray37);
        long long43 = mean20.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double[] doubleArray51 = new double[] {};
        mean44.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        mean55.increment((double) (byte) 1);
        double[] doubleArray66 = mean55.getData();
        long long67 = mean55.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double75 = mean55.evaluate(doubleArray73);
        mean54.incrementAll(doubleArray73);
        double double77 = mean20.evaluate(doubleArray73);
        mean8.setData(doubleArray73);
        double[] doubleArray79 = mean8.getData();
        double[] doubleArray80 = mean8.getData();
        mean0.incrementAll(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        mean46.increment(0.25d);
        mean46.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double43 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        boolean boolean57 = mean42.equals((java.lang.Object) mean45);
        long long58 = mean42.getN();
        double double59 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        boolean boolean70 = mean61.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        mean61.clear();
        mean61.clear();
        boolean boolean74 = mean42.equals((java.lang.Object) mean61);
        boolean boolean75 = mean15.equals((java.lang.Object) mean42);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = mean42.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        mean61.clear();
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        double double88 = mean74.evaluate(doubleArray81, 1, (int) (byte) 1);
        mean61.setData(doubleArray81);
        double double90 = mean24.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = mean23.evaluate(doubleArray81, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-1.0d) + "'", double88 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        double double86 = mean16.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        mean0.increment(0.0d);
        mean0.increment((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        // The following exception was thrown during execution in test generation
        try {
            double double1 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean22.clear();
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        double double49 = mean35.evaluate(doubleArray42, 1, (int) (byte) 1);
        mean22.setData(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = mean0.evaluate(doubleArray42, 1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        double double55 = mean0.getResult();
        mean0.increment((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        mean49.increment((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        long long14 = mean0.getN();
        mean0.increment((double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        boolean boolean82 = mean73.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean73.copy();
        long long84 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean73.copy();
        mean73.increment(1.0d);
        boolean boolean88 = mean0.equals((java.lang.Object) mean73);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = mean73.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        mean23.clear();
        boolean boolean47 = mean13.equals((java.lang.Object) mean23);
        long long48 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean70);
        mean49.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean49);
        boolean boolean85 = mean11.equals((java.lang.Object) mean23);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        double[] doubleArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double43 = mean27.evaluate(doubleArray40, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = mean37.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        mean46.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        boolean boolean69 = mean60.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        double double92 = mean70.evaluate(doubleArray89);
        mean46.incrementAll(doubleArray89);
        mean34.incrementAll(doubleArray89);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        mean95.clear();
        mean95.increment((double) 0.0f);
        boolean boolean99 = mean33.equals((java.lang.Object) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean1.setData(doubleArray91);
        double double98 = mean1.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.25d + "'", double98 == 0.25d);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean0.copy();
        double[] doubleArray99 = mean98.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mean98);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        double[] doubleArray79 = new double[] { 0.0d, 50.0d };
        mean3.setData(doubleArray79);
        double double81 = mean3.evaluate();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 25.0d + "'", double81 == 25.0d);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        double double60 = mean14.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        boolean boolean75 = mean14.equals((java.lang.Object) mean74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        mean0.increment((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        mean12.clear();
        mean12.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        mean0.clear();
        double double26 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        boolean boolean11 = mean2.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean2.copy();
        long long13 = mean2.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean2.copy();
        boolean boolean16 = mean14.equals((java.lang.Object) (-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        mean17.increment((double) (byte) 1);
        double[] doubleArray28 = mean17.getData();
        long long29 = mean17.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double37 = mean17.evaluate(doubleArray35);
        double double38 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean48);
        boolean boolean50 = mean14.equals((java.lang.Object) mean48);
        mean48.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        mean62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean62.setData(doubleArray69);
        mean62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(mean73);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        mean11.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        long long71 = mean0.getN();
        long long72 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        boolean boolean68 = mean10.equals((java.lang.Object) 0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean59.setData(doubleArray76);
        mean48.incrementAll(doubleArray76);
        double double83 = mean37.evaluate(doubleArray76);
        mean27.setData(doubleArray76);
        mean18.incrementAll(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray76, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        mean0.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        double[] doubleArray35 = mean10.getData();
        double[] doubleArray36 = mean10.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertNull(doubleArray36);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean56.copy();
        double[] doubleArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean56.incrementAll(doubleArray85, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(mean84);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean11.clear();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        long long26 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        mean40.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        double double86 = mean64.evaluate(doubleArray83);
        mean40.incrementAll(doubleArray83);
        mean28.incrementAll(doubleArray83);
        double double89 = mean27.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            mean11.incrementAll(doubleArray83, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        java.lang.Class<?> wildcardClass28 = mean26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean10.copy();
        double[] doubleArray83 = mean10.getData();
        long long84 = mean10.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 4L + "'", long84 == 4L);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        java.lang.Class<?> wildcardClass22 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        long long67 = mean58.getN();
        mean58.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        mean70.incrementAll(doubleArray86);
        double double89 = mean58.evaluate(doubleArray86);
        double double90 = mean0.evaluate(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double11 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        mean0.clear();
        java.lang.Class<?> wildcardClass69 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        long long53 = mean44.getN();
        mean44.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double[] doubleArray58 = mean57.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = mean60.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray78 = null;
        mean69.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double90 = mean80.evaluate(doubleArray86, (int) (short) 0, (int) (short) 1);
        mean69.setData(doubleArray86);
        double double92 = mean60.evaluate(doubleArray86);
        mean57.setData(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean0.getResult();
        double[] doubleArray17 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNull(doubleArray17);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = mean1.evaluate(doubleArray59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        mean36.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        double double80 = mean59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double[] doubleArray88 = new double[] {};
        mean81.incrementAll(doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean81.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean36.copy();
        long long94 = mean93.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = mean93.copy();
        long long96 = mean95.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean95);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean97);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNotNull(mean90);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 4L + "'", long94 == 4L);
        org.junit.Assert.assertNotNull(mean95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 4L + "'", long96 == 4L);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        double double60 = mean14.evaluate(doubleArray53);
        mean0.setData(doubleArray53);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        mean33.clear();
        java.lang.Class<?> wildcardClass35 = mean33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double double26 = mean0.getResult();
        double double27 = mean0.getResult();
        double[] doubleArray28 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        mean17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        mean42.incrementAll(doubleArray70);
        mean17.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean78.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double94 = mean0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        long long56 = mean55.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        boolean boolean67 = mean58.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        double double90 = mean68.evaluate(doubleArray87);
        mean55.setData(doubleArray87);
        double[] doubleArray92 = mean55.getData();
        mean45.incrementAll(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        java.lang.Class<?> wildcardClass39 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        mean19.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        mean19.setData(doubleArray61);
        double double66 = mean12.evaluate(doubleArray61, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double double68 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        mean12.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray87, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean35.incrementAll(doubleArray42);
        mean25.setData(doubleArray42, 0, 0);
        double double51 = mean0.evaluate(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean80);
        mean81.increment((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(mean80);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        double double79 = mean33.evaluate(doubleArray72);
        mean23.setData(doubleArray72);
        mean14.incrementAll(doubleArray72);
        double[] doubleArray82 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        double double84 = mean83.getResult();
        boolean boolean85 = mean0.equals((java.lang.Object) mean83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray9);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        mean33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        mean33.setData(doubleArray40);
        double double43 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean46.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        double double69 = mean55.evaluate(doubleArray62, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double90 = mean80.evaluate(doubleArray86, (int) (short) 0, (int) (short) 1);
        mean79.incrementAll(doubleArray86);
        mean55.setData(doubleArray86);
        double double93 = mean44.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray86, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean12.evaluate(doubleArray43, doubleArray65, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = mean3.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        mean22.setData(doubleArray29);
        double double32 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        double double58 = mean44.evaluate(doubleArray51, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean68.incrementAll(doubleArray75);
        mean44.setData(doubleArray75);
        double double82 = mean33.evaluate(doubleArray75);
        mean11.setData(doubleArray75);
        double[] doubleArray84 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        mean36.increment((double) (short) 10);
        double double54 = mean36.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean25.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        double[] doubleArray78 = mean77.getData();
        double double79 = mean25.evaluate(doubleArray78);
        double double80 = mean13.evaluate(doubleArray78);
        mean13.increment((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        long long15 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        double[] doubleArray24 = new double[] {};
        mean17.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean17.copy();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        mean26.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        mean46.clear();
        mean46.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean46.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean77, mean78);
        mean77.increment((double) (byte) 1);
        double[] doubleArray88 = mean77.getData();
        long long89 = mean77.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray95 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double96 = mean90.evaluate(doubleArray95);
        double double97 = mean77.evaluate(doubleArray95);
        boolean boolean98 = mean74.equals((java.lang.Object) doubleArray95);
        mean14.incrementAll(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(mean16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean50.increment(100.0d);
        double[] doubleArray66 = new double[] { 0L, (-1), (short) 1 };
        mean50.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean50);
        long long69 = mean50.getN();
        double[] doubleArray70 = mean50.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        mean50.increment((double) 10L);
        double[] doubleArray74 = mean50.getData();
        mean0.setData(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        double[] doubleArray9 = mean8.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertNull(doubleArray9);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean34.incrementAll(doubleArray41);
        mean10.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        double[] doubleArray59 = null;
        mean48.setData(doubleArray59);
        boolean boolean61 = mean10.equals((java.lang.Object) mean48);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean12.evaluate(doubleArray51);
        mean11.incrementAll(doubleArray51, (int) (byte) 1, 0);
        double[] doubleArray57 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNull(doubleArray57);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        mean0.incrementAll(doubleArray60);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        mean35.increment((double) (short) -1);
        double[] doubleArray63 = mean35.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        double[] doubleArray39 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        long long75 = mean52.getN();
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        mean52.setData(doubleArray84);
        mean27.setData(doubleArray84, 0, (int) (short) 0);
        long long90 = mean27.getN();
        double double91 = mean27.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        double double62 = mean48.evaluate(doubleArray55, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        mean64.increment((double) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long35 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        mean36.incrementAll(doubleArray52);
        double double55 = mean0.evaluate(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        long long35 = mean10.getN();
        mean10.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        double[] doubleArray32 = mean0.getData();
        long long33 = mean0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        java.lang.Class<?> wildcardClass48 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        double double42 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long77 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass79 = mean78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean13.evaluate(doubleArray69, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        mean11.increment((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        double[] doubleArray12 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        java.lang.Class<?> wildcardClass86 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        double double11 = mean1.evaluate(doubleArray7, (int) (short) 0, (int) (short) 1);
        mean1.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean29.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        boolean boolean62 = mean53.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean64.increment((double) (byte) 1);
        double[] doubleArray75 = mean64.getData();
        long long76 = mean64.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double84 = mean64.evaluate(doubleArray82);
        double double85 = mean63.evaluate(doubleArray82);
        mean29.incrementAll(doubleArray82, (int) (byte) 0, 0);
        double double89 = mean27.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        mean19.increment((double) (short) 0);
        java.lang.Class<?> wildcardClass37 = mean19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        double double22 = mean9.getResult();
        double double23 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        double double59 = mean38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean69);
        mean69.increment((double) 1L);
        boolean boolean73 = mean36.equals((java.lang.Object) mean69);
        double[] doubleArray76 = new double[] { (byte) 10, 1L };
        // The following exception was thrown during execution in test generation
        try {
            mean69.incrementAll(doubleArray76, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 1.0]");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        double double32 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean33.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double[] doubleArray65 = new double[] {};
        mean58.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean58.copy();
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        mean67.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        double[] doubleArray78 = mean67.getData();
        mean33.setData(doubleArray78, 0, 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        double double62 = mean48.evaluate(doubleArray55, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        mean64.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        long long51 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean52.copy();
        double[] doubleArray64 = mean63.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean63.copy();
        boolean boolean66 = mean22.equals((java.lang.Object) mean63);
        double double67 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNull(doubleArray64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        mean30.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double[] doubleArray50 = new double[] {};
        mean43.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        mean43.incrementAll(doubleArray59);
        double double62 = mean42.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean72.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean22.evaluate(doubleArray59, doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        boolean boolean82 = mean73.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean73.copy();
        long long84 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean73.copy();
        mean73.increment(1.0d);
        boolean boolean88 = mean0.equals((java.lang.Object) mean73);
        java.lang.Class<?> wildcardClass89 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        mean13.clear();
        double double16 = mean13.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray97 = mean70.getData();
        java.lang.Class<?> wildcardClass98 = mean70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass28 = mean27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        java.lang.Class<?> wildcardClass81 = mean36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        double double33 = mean0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        double[] doubleArray30 = mean0.getData();
        mean0.increment(0.25d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean67.copy();
        double double69 = mean67.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray45, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        double[] doubleArray12 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double[] doubleArray51 = new double[] {};
        mean44.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean44.copy();
        mean54.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean54);
        double[] doubleArray58 = mean54.getData();
        double double59 = mean54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        double double81 = mean54.evaluate(doubleArray78);
        double double84 = mean14.evaluate(doubleArray30, doubleArray78, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = mean10.evaluate(doubleArray12, doubleArray30, (int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        mean0.increment(0.0d);
        double[] doubleArray62 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNull(doubleArray62);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean55.copy();
        double double57 = mean55.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        long long31 = mean22.getN();
        double[] doubleArray32 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean33);
        mean33.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean33);
        mean33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        double[] doubleArray77 = new double[] { 0L, (-1), (short) 1 };
        mean61.setData(doubleArray77);
        mean33.setData(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean0.evaluate(doubleArray77, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean15.incrementAll(doubleArray68, (int) (byte) 0, 0);
        mean14.setData(doubleArray68);
        java.lang.Class<?> wildcardClass76 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        double[] doubleArray32 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean34.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        mean43.increment((double) (byte) 1);
        double[] doubleArray54 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double65 = mean55.evaluate(doubleArray61, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean55.copy();
        boolean boolean67 = mean43.equals((java.lang.Object) mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean43);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mean68);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        long long18 = mean1.getN();
        java.lang.Class<?> wildcardClass19 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean34.incrementAll(doubleArray41);
        mean10.setData(doubleArray41);
        java.lang.Class<?> wildcardClass48 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        mean11.clear();
        double[] doubleArray29 = mean11.getData();
        java.lang.Class<?> wildcardClass30 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean31.copy();
        double[] doubleArray36 = mean35.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray36);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        double[] doubleArray53 = mean36.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(doubleArray53);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        long long17 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.increment((double) 1L);
        mean1.increment((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        mean0.setData(doubleArray49);
        double double58 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass60 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        mean19.increment((double) (byte) 1);
        double[] doubleArray30 = mean19.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        mean41.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean19.copy();
        long long46 = mean45.getN();
        double[] doubleArray47 = mean45.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean45);
        boolean boolean49 = mean18.equals((java.lang.Object) mean48);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        long long51 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        long long75 = mean63.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double83 = mean63.evaluate(doubleArray81);
        mean62.incrementAll(doubleArray81);
        double double85 = mean28.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean86);
        double[] doubleArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean86.incrementAll(doubleArray88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean86);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        long long26 = mean0.getN();
        long long27 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        double[] doubleArray14 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        mean17.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        mean42.increment((double) (byte) 1);
        double[] doubleArray53 = mean42.getData();
        long long54 = mean42.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double62 = mean42.evaluate(doubleArray60);
        double double63 = mean41.evaluate(doubleArray60);
        mean17.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = mean3.evaluate(doubleArray60, (-1), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        long long17 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        double double86 = mean40.evaluate(doubleArray79);
        mean30.setData(doubleArray79);
        mean21.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean1.evaluate(doubleArray79, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        long long35 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean37.setData(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = mean1.evaluate(doubleArray44, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        mean13.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        mean13.setData(doubleArray55);
        mean0.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean68);
        boolean boolean82 = mean0.equals((java.lang.Object) mean68);
        double[] doubleArray85 = new double[] { 0.25000000000000006d, 0.25000000000000006d };
        mean0.incrementAll(doubleArray85, 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.25000000000000006, 0.25000000000000006]");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean61.copy();
        double[] doubleArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean61.incrementAll(doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        long long17 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        mean18.increment((double) (byte) 1);
        double[] doubleArray29 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        mean40.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean40);
        double[] doubleArray47 = new double[] { 100, 1, (byte) 100 };
        mean40.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        double[] doubleArray52 = new double[] { 52.0d, 4.0d };
        double double53 = mean49.evaluate(doubleArray52);
        double[] doubleArray54 = mean49.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = mean1.evaluate(doubleArray54, 100, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 28.0d + "'", double53 == 28.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        double[] doubleArray47 = mean23.getData();
        double[] doubleArray48 = mean23.getData();
        double double49 = mean23.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        mean60.clear();
        mean60.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        double[] doubleArray73 = null;
        mean64.setData(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        mean64.setData(doubleArray81);
        mean60.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            mean49.setData(doubleArray81, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean21.setData(doubleArray84);
        double double96 = mean11.evaluate(doubleArray84, (int) (short) 1, (int) (short) 1);
        double double97 = mean11.getResult();
        java.lang.Class<?> wildcardClass98 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray11 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double12 = mean6.evaluate(doubleArray11);
        double[] doubleArray13 = new double[] {};
        mean6.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean36.incrementAll(doubleArray64);
        double double71 = mean25.evaluate(doubleArray64);
        mean15.setData(doubleArray64);
        mean6.incrementAll(doubleArray64);
        mean0.incrementAll(doubleArray64, (int) (byte) 0, 1);
        mean0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.25d + "'", double12 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray15 = new double[] { '#', (short) 1 };
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        long long25 = mean16.getN();
        double[] doubleArray26 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        double double62 = mean16.evaluate(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = mean0.evaluate(doubleArray15, doubleArray55, (int) (byte) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 4 != 2");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        double[] doubleArray48 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean72.incrementAll(doubleArray79);
        mean62.setData(doubleArray79, 0, 0);
        mean0.incrementAll(doubleArray79);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        long long24 = mean15.getN();
        double[] doubleArray25 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean26);
        double double50 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean51.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        boolean boolean65 = mean15.equals((java.lang.Object) mean51);
        mean51.increment((double) 0);
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean69.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean69.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        mean69.incrementAll(doubleArray85);
        double double88 = mean51.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean0.evaluate(doubleArray85, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        double double24 = mean0.getResult();
        java.lang.Class<?> wildcardClass25 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) 100L);
        double double76 = mean0.getResult();
        java.lang.Class<?> wildcardClass77 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.5d + "'", double76 == 50.5d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean68.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean81.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean81);
        boolean boolean84 = mean67.equals((java.lang.Object) mean81);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        long long21 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean45.increment(100.0d);
        double[] doubleArray61 = new double[] { 0L, (-1), (short) 1 };
        mean45.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean45);
        long long64 = mean45.getN();
        double[] doubleArray65 = mean45.getData();
        mean14.setData(doubleArray65);
        mean10.incrementAll(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        mean36.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        double double86 = mean40.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean40);
        mean14.increment((double) 100L);
        double double90 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean14);
        mean14.increment((double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.5d + "'", double90 == 50.5d);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        mean69.increment((double) 2L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        mean24.increment((double) (byte) 1);
        double[] doubleArray35 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        mean46.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean46);
        mean46.clear();
        boolean boolean51 = mean0.equals((java.lang.Object) mean46);
        double double52 = mean0.evaluate();
        double double53 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean56.setData(doubleArray73);
        mean45.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double[] doubleArray87 = new double[] {};
        mean80.incrementAll(doubleArray87);
        mean45.setData(doubleArray87);
        mean32.setData(doubleArray87);
        mean0.setData(doubleArray87);
        mean0.clear();
        long long93 = mean0.getN();
        double[] doubleArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean0.evaluate(doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        long long32 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean56.increment(100.0d);
        double[] doubleArray72 = new double[] { 0L, (-1), (short) 1 };
        mean56.setData(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean56);
        long long75 = mean56.getN();
        double[] doubleArray76 = mean56.getData();
        mean25.setData(doubleArray76);
        mean22.incrementAll(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            mean11.incrementAll(doubleArray76, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        double double25 = mean0.evaluate();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        mean17.increment((double) (byte) 1);
        double[] doubleArray28 = mean17.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        mean39.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean39);
        double[] doubleArray43 = mean39.getData();
        double double44 = mean39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean39.evaluate(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray63, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        double double48 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean49.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        boolean boolean63 = mean13.equals((java.lang.Object) mean49);
        mean49.increment((double) 0);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        mean91.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean91);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean49.copy();
        mean49.increment((double) (byte) 1);
        long long97 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(mean94);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean55.clear();
        mean55.increment(1.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        double double22 = mean9.getResult();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        boolean boolean34 = mean25.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean36.evaluate(doubleArray75);
        mean35.incrementAll(doubleArray75, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray75, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean1.evaluate(doubleArray75, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        double double70 = mean69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double29 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        mean31.clear();
        boolean boolean43 = mean28.equals((java.lang.Object) mean31);
        double[] doubleArray44 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        mean46.increment((double) (byte) 1);
        double[] doubleArray57 = mean46.getData();
        long long58 = mean46.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double66 = mean46.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean46.evaluate(doubleArray85);
        mean45.setData(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            mean26.setData(doubleArray85, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long12 = mean11.getN();
        mean11.clear();
        double double14 = mean11.getResult();
        mean11.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        mean14.incrementAll(doubleArray30);
        double double33 = mean14.getResult();
        mean14.increment(0.0d);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        mean70.incrementAll(doubleArray89);
        mean49.setData(doubleArray89);
        boolean boolean94 = mean38.equals((java.lang.Object) doubleArray89);
        mean38.clear();
        double double96 = mean38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean38);
        double[] doubleArray98 = mean14.getData();
        boolean boolean99 = mean0.equals((java.lang.Object) mean14);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertNull(doubleArray98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        mean52.clear();
        java.lang.Class<?> wildcardClass57 = mean52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        double[] doubleArray81 = mean78.getData();
        double[] doubleArray82 = mean78.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNull(doubleArray82);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean40.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        boolean boolean67 = mean39.equals((java.lang.Object) mean64);
        mean39.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        double double24 = mean11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double98 = mean97.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean99 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        mean36.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean36);
        double[] doubleArray43 = new double[] { 100, 1, (byte) 100 };
        mean36.setData(doubleArray43);
        mean9.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean69.increment(100.0d);
        double[] doubleArray85 = new double[] { 0L, (-1), (short) 1 };
        mean69.setData(doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean69);
        long long88 = mean69.getN();
        double[] doubleArray89 = mean69.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean9.incrementAll(doubleArray89, 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        long long19 = mean0.getN();
        mean0.increment((double) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long12 = mean11.getN();
        mean11.clear();
        double[] doubleArray14 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        boolean boolean25 = mean16.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        mean37.incrementAll(doubleArray56);
        mean16.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = mean11.evaluate(doubleArray14, doubleArray56, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        double double62 = mean48.evaluate(doubleArray55, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        long long64 = mean37.getN();
        java.lang.Object obj65 = null;
        boolean boolean66 = mean37.equals(obj65);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = mean25.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double double27 = mean17.evaluate(doubleArray23, (int) (short) 0, (int) (short) 1);
        mean17.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double[] doubleArray72 = new double[] {};
        mean65.incrementAll(doubleArray72);
        mean30.setData(doubleArray72);
        mean17.setData(doubleArray72);
        mean0.setData(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        mean19.increment((double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = mean19.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        double double68 = mean14.evaluate(doubleArray63, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        mean14.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            mean13.setData(doubleArray74, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean57.incrementAll(doubleArray64);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = mean23.evaluate(doubleArray64, doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        double[] doubleArray50 = mean49.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        double double62 = mean61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean61);
        boolean boolean65 = mean11.equals((java.lang.Object) mean61);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        mean0.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double[] doubleArray82 = new double[] {};
        mean75.incrementAll(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean75.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean75.copy();
        mean85.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean63.copy();
        boolean boolean90 = mean0.equals((java.lang.Object) mean63);
        double double91 = mean63.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        mean70.incrementAll(doubleArray89);
        mean49.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = mean23.evaluate(doubleArray89, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        double double48 = mean46.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        mean12.increment((double) (byte) 10);
        mean12.increment((double) (byte) 0);
        double[] doubleArray28 = mean12.getData();
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        mean30.incrementAll(doubleArray46);
        double double49 = mean12.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        java.lang.Object obj60 = null;
        boolean boolean61 = mean59.equals(obj60);
        double double62 = mean59.getResult();
        mean59.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        double double88 = mean74.evaluate(doubleArray81, 1, (int) (byte) 1);
        mean59.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = mean1.evaluate(doubleArray46, doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-1.0d) + "'", double88 == (-1.0d));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        double[] doubleArray52 = mean36.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(doubleArray52);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        mean37.clear();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        double double64 = mean50.evaluate(doubleArray57, 1, (int) (byte) 1);
        mean37.setData(doubleArray57);
        double double66 = mean0.evaluate(doubleArray57);
        mean0.increment((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean0.copy();
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean72.setData(doubleArray73, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
        org.junit.Assert.assertNotNull(mean72);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        double double55 = mean0.getResult();
        double double56 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean0.getResult();
        mean0.increment(0.25000000000000006d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean22);
        mean10.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double28 = mean27.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        double[] doubleArray38 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        mean49.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean49);
        double[] doubleArray56 = new double[] { 100, 1, (byte) 100 };
        mean49.setData(doubleArray56);
        double[] doubleArray58 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double double59 = mean26.evaluate(doubleArray56, doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        double double63 = mean9.evaluate(doubleArray58, (int) (short) 0, 0);
        double double64 = mean8.evaluate(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        long long37 = mean14.getN();
        double double38 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        mean60.incrementAll(doubleArray79);
        mean39.setData(doubleArray79);
        mean14.setData(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = mean0.evaluate(doubleArray13, doubleArray79, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        double[] doubleArray13 = mean1.getData();
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        mean0.setData(doubleArray49);
        double double58 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray60 = mean59.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        double double68 = mean10.getResult();
        java.lang.Class<?> wildcardClass69 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        double[] doubleArray81 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean82.copy();
        double[] doubleArray84 = mean83.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean25.increment((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        java.lang.Class<?> wildcardClass4 = mean0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        mean15.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        mean40.increment((double) (byte) 1);
        double[] doubleArray51 = mean40.getData();
        long long52 = mean40.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double60 = mean40.evaluate(doubleArray58);
        double double61 = mean39.evaluate(doubleArray58);
        mean15.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        double double87 = mean73.evaluate(doubleArray80, 1, (int) (byte) 1);
        double double88 = mean15.evaluate(doubleArray80);
        mean14.setData(doubleArray80);
        double double90 = mean14.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        double double92 = mean91.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 5.5d + "'", double92 == 5.5d);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        boolean boolean70 = mean14.equals((java.lang.Object) doubleArray65);
        double double73 = mean0.evaluate(doubleArray65, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass74 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double double37 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        long long61 = mean38.getN();
        mean38.increment((double) 4L);
        boolean boolean65 = mean38.equals((java.lang.Object) (byte) 0);
        double[] doubleArray66 = mean38.getData();
        mean11.incrementAll(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean61.copy();
        java.lang.Class<?> wildcardClass64 = mean63.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        mean0.clear();
        mean0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        double[] doubleArray75 = null;
        mean66.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        mean66.setData(doubleArray83);
        mean55.incrementAll(doubleArray83);
        double double90 = mean44.evaluate(doubleArray83);
        mean34.setData(doubleArray83);
        mean25.incrementAll(doubleArray83);
        mean16.setData(doubleArray83);
        double double94 = mean0.evaluate(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.clear();
        double[] doubleArray39 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(doubleArray39);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = mean33.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        double double65 = mean33.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            mean31.incrementAll(doubleArray59, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        double[] doubleArray15 = mean14.getData();
        double[] doubleArray16 = mean14.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNull(doubleArray16);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        double double33 = mean1.evaluate(doubleArray27);
        java.lang.Class<?> wildcardClass34 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean10.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean52.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean52.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mean53);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        mean31.increment(0.0d);
        double double37 = mean31.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.666666666666667d + "'", double37 == 3.666666666666667d);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        double double29 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        long long31 = mean28.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        double[] doubleArray15 = mean12.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        mean69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        double double80 = mean79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean79);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean67.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        mean52.increment((double) (byte) 1);
        double[] doubleArray63 = mean52.getData();
        long long64 = mean52.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double72 = mean52.evaluate(doubleArray70);
        double double73 = mean52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(mean85);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        mean0.increment(28.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean14.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        long long40 = mean37.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double98 = mean0.getResult();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray77 = mean0.getData();
        mean0.increment((double) '#');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        double[] doubleArray77 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean3, mean78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        long long29 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        mean42.increment((double) (byte) 1);
        double[] doubleArray53 = mean42.getData();
        long long54 = mean42.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double62 = mean42.evaluate(doubleArray60);
        double double63 = mean41.evaluate(doubleArray60);
        mean28.setData(doubleArray60);
        double[] doubleArray65 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        mean28.setData(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            mean9.incrementAll(doubleArray71, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        mean0.clear();
        long long18 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean29.copy();
        boolean boolean31 = mean0.equals((java.lang.Object) mean29);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        long long35 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean36.clear();
        boolean boolean60 = mean26.equals((java.lang.Object) mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double62 = mean61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        boolean boolean73 = mean64.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean64.copy();
        mean64.clear();
        boolean boolean76 = mean61.equals((java.lang.Object) mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean77, mean78);
        double[] doubleArray86 = null;
        mean77.setData(doubleArray86);
        double[] doubleArray88 = mean77.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean77);
        boolean boolean91 = mean26.equals((java.lang.Object) mean61);
        long long92 = mean61.getN();
        boolean boolean93 = mean22.equals((java.lang.Object) long92);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        double double33 = mean11.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        boolean boolean44 = mean35.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        long long46 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean35.copy();
        mean35.increment(1.0d);
        mean35.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        long long53 = mean52.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean52.copy();
        boolean boolean55 = mean11.equals((java.lang.Object) mean52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean23.incrementAll(doubleArray88);
        mean22.incrementAll(doubleArray88);
        boolean boolean94 = mean10.equals((java.lang.Object) doubleArray88);
        double[] doubleArray95 = mean10.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(doubleArray95);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        double[] doubleArray48 = new double[] { 0L, (-1), (short) 1 };
        mean32.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean32);
        long long51 = mean32.getN();
        double[] doubleArray52 = mean32.getData();
        mean1.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        mean64.incrementAll(doubleArray83);
        double double89 = mean1.evaluate(doubleArray83, 1, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        double[] doubleArray85 = null;
        mean74.setData(doubleArray85);
        boolean boolean87 = mean51.equals((java.lang.Object) doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean51);
        java.lang.Class<?> wildcardClass89 = mean51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        mean23.clear();
        double[] doubleArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = mean23.evaluate(doubleArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double double25 = mean15.evaluate(doubleArray21, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray21, (int) (short) 0, (int) (short) 0);
        long long29 = mean1.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        mean12.clear();
        long long15 = mean12.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        long long26 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        long long50 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        double double84 = mean27.evaluate(doubleArray80);
        mean15.setData(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray80, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double51 = mean50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean27);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        mean36.increment((double) (short) 10);
        double[] doubleArray54 = mean36.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(doubleArray54);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        double double79 = mean69.evaluate(doubleArray77);
        java.lang.Class<?> wildcardClass80 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        long long36 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        double double70 = mean48.evaluate(doubleArray67);
        mean35.setData(doubleArray67);
        double[] doubleArray72 = mean35.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        mean35.setData(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean24.evaluate(doubleArray78, 0, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        java.lang.Object obj29 = null;
        boolean boolean30 = mean28.equals(obj29);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        long long52 = mean43.getN();
        double[] doubleArray53 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        mean54.incrementAll(doubleArray82);
        double double89 = mean43.evaluate(doubleArray82);
        mean42.setData(doubleArray82);
        mean42.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double33 = mean32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean19);
        mean19.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        double[] doubleArray77 = new double[] { 0L, (-1), (short) 1 };
        mean61.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean61);
        long long80 = mean61.getN();
        double[] doubleArray81 = mean61.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        mean61.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean61.copy();
        double[] doubleArray86 = mean61.getData();
        double[] doubleArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = mean19.evaluate(doubleArray86, doubleArray87, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        long long47 = mean46.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        boolean boolean58 = mean49.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        double double81 = mean59.evaluate(doubleArray78);
        mean46.setData(doubleArray78);
        double[] doubleArray83 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        mean46.setData(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray89, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        mean65.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean87.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean88.copy();
        boolean boolean90 = mean23.equals((java.lang.Object) mean88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean88);
        long long92 = mean91.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        mean57.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean57);
        double[] doubleArray64 = new double[] { 100, 1, (byte) 100 };
        mean57.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean57);
        double[] doubleArray69 = new double[] { 52.0d, 4.0d };
        double double70 = mean66.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            mean34.incrementAll(doubleArray69, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 28.0d + "'", double70 == 28.0d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        double double25 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        double[] doubleArray73 = null;
        mean64.setData(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        mean64.setData(doubleArray81);
        mean53.incrementAll(doubleArray81);
        mean28.setData(doubleArray81);
        mean13.incrementAll(doubleArray81);
        java.lang.Class<?> wildcardClass90 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        double double11 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean56.setData(doubleArray73);
        mean45.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double[] doubleArray87 = new double[] {};
        mean80.incrementAll(doubleArray87);
        mean45.setData(doubleArray87);
        mean32.setData(doubleArray87);
        double double91 = mean12.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray87, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        long long27 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        long long35 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean59);
        long long78 = mean59.getN();
        double[] doubleArray79 = mean59.getData();
        mean28.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean81, mean82);
        boolean boolean91 = mean82.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean82.copy();
        long long93 = mean82.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean82);
        double[] doubleArray96 = mean28.getData();
        double double97 = mean22.evaluate(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(mean94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        double double49 = mean25.getResult();
        double[] doubleArray50 = mean25.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean10.incrementAll(doubleArray50, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean18.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        double double59 = mean13.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            mean10.setData(doubleArray52, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        mean22.increment((double) (byte) 1);
        double[] doubleArray33 = mean22.getData();
        long long34 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double42 = mean22.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double63 = mean22.evaluate(doubleArray61);
        mean21.incrementAll(doubleArray61, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray61, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        long long37 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean36.setData(doubleArray68);
        double[] doubleArray73 = mean36.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        mean36.setData(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = mean0.evaluate(doubleArray79, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        double[] doubleArray30 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        mean31.increment((double) (byte) 1);
        double[] doubleArray42 = mean31.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double[] doubleArray50 = new double[] {};
        mean43.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean43.copy();
        mean53.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean53);
        double[] doubleArray60 = new double[] { 100, 1, (byte) 100 };
        mean53.setData(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = mean0.evaluate(doubleArray60, 100, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        double[] doubleArray37 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean38.copy();
        mean65.clear();
        boolean boolean67 = mean10.equals((java.lang.Object) mean65);
        java.lang.Class<?> wildcardClass68 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        double[] doubleArray84 = mean1.getData();
        double double85 = mean1.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean44.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        double[] doubleArray25 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        mean26.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        mean26.setData(doubleArray68);
        mean0.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment(50.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean10.copy();
        double double83 = mean82.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        boolean boolean82 = mean0.equals((java.lang.Object) mean81);
        mean0.increment((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.increment((double) '#');
        mean11.clear();
        long long16 = mean11.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        double double76 = mean13.getResult();
        long long77 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean78);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long77 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double[] doubleArray86 = new double[] {};
        mean79.incrementAll(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray86, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        long long15 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        boolean boolean40 = mean28.equals((java.lang.Object) mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        long long50 = mean41.getN();
        double[] doubleArray51 = mean41.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean52);
        boolean boolean76 = mean28.equals((java.lang.Object) mean41);
        boolean boolean77 = mean14.equals((java.lang.Object) mean28);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(mean16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean22.copy();
        mean32.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean10.copy();
        long long38 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        long long48 = mean39.getN();
        double[] doubleArray49 = mean39.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean50);
        mean50.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean78.increment(100.0d);
        double[] doubleArray94 = new double[] { 0L, (-1), (short) 1 };
        mean78.setData(doubleArray94);
        mean50.setData(doubleArray94);
        mean37.incrementAll(doubleArray94);
        double double98 = mean9.evaluate(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        long long10 = mean1.getN();
        double[] doubleArray11 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean12);
        double double36 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        boolean boolean51 = mean1.equals((java.lang.Object) mean37);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean77.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean77);
        double double81 = mean37.getResult();
        long long82 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean37.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean19.setData(doubleArray36);
        long long42 = mean19.getN();
        mean19.increment((double) 4L);
        boolean boolean46 = mean19.equals((java.lang.Object) (byte) 0);
        double[] doubleArray47 = mean19.getData();
        mean19.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        double double74 = mean60.evaluate(doubleArray67, 1, (int) (byte) 1);
        double double75 = mean19.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray67, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1.0d) + "'", double74 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        double[] doubleArray25 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        long long49 = mean26.getN();
        mean26.increment((double) 4L);
        boolean boolean53 = mean26.equals((java.lang.Object) (byte) 0);
        double[] doubleArray54 = mean26.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray54, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        double double93 = mean11.evaluate();
        java.lang.Class<?> wildcardClass94 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        mean46.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        boolean boolean69 = mean60.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        double double92 = mean70.evaluate(doubleArray89);
        mean46.incrementAll(doubleArray89);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        long long95 = mean46.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long97 = mean23.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 5L + "'", long95 == 5L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean69.increment(100.0d);
        double[] doubleArray85 = new double[] { 0L, (-1), (short) 1 };
        mean69.setData(doubleArray85);
        mean0.setData(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray26, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        mean69.increment(0.5d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        mean59.incrementAll(doubleArray87);
        double double94 = mean48.evaluate(doubleArray87);
        mean38.setData(doubleArray87);
        mean29.incrementAll(doubleArray87);
        double[] doubleArray97 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        boolean boolean99 = mean11.equals((java.lang.Object) mean29);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertNull(doubleArray97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double74 = mean33.evaluate(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray72, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        boolean boolean25 = mean0.equals((java.lang.Object) mean24);
        mean0.increment(Double.NaN);
        java.lang.Class<?> wildcardClass28 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean28.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(mean68);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        double[] doubleArray39 = mean28.getData();
        long long40 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double48 = mean28.evaluate(doubleArray46);
        double double49 = mean22.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        mean22.increment((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        double[] doubleArray85 = null;
        mean74.setData(doubleArray85);
        boolean boolean87 = mean51.equals((java.lang.Object) doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean51);
        long long89 = mean51.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            mean22.incrementAll(doubleArray53, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray11 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double12 = mean6.evaluate(doubleArray11);
        double[] doubleArray13 = new double[] {};
        mean6.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean36.incrementAll(doubleArray64);
        double double71 = mean25.evaluate(doubleArray64);
        mean15.setData(doubleArray64);
        mean6.incrementAll(doubleArray64);
        mean0.incrementAll(doubleArray64, (int) (byte) 0, 1);
        java.lang.Class<?> wildcardClass77 = mean0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.25d + "'", double12 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        boolean boolean37 = mean28.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.increment((double) '#');
        mean38.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        mean45.clear();
        long long69 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean45);
        boolean boolean71 = mean0.equals((java.lang.Object) mean45);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        double double49 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean50.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        boolean boolean64 = mean14.equals((java.lang.Object) mean50);
        long long65 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean66);
        mean12.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean28);
        double double68 = mean14.getResult();
        boolean boolean69 = mean0.equals((java.lang.Object) double68);
        mean0.increment((double) 4L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        mean18.clear();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double[] doubleArray86 = new double[] {};
        mean79.incrementAll(doubleArray86);
        mean44.setData(doubleArray86);
        mean31.setData(doubleArray86);
        mean18.setData(doubleArray86);
        double[] doubleArray91 = mean18.getData();
        double double92 = mean1.evaluate(doubleArray91);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double97 = mean93.evaluate(doubleArray94, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean0.getResult();
        double[] doubleArray57 = mean0.getData();
        long long58 = mean0.getN();
        java.lang.Class<?> wildcardClass59 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        double double81 = mean31.evaluate(doubleArray71, 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean31.copy();
        double double83 = mean31.getResult();
        java.lang.Class<?> wildcardClass84 = mean31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean12.increment((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        double[] doubleArray70 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        boolean boolean37 = mean28.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        mean39.increment((double) (byte) 1);
        double[] doubleArray50 = mean39.getData();
        long long51 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double59 = mean39.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean39.evaluate(doubleArray78);
        mean38.incrementAll(doubleArray78, (int) (byte) 1, 0);
        mean22.setData(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        double[] doubleArray75 = mean72.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        mean0.clear();
        double[] doubleArray46 = mean0.getData();
        java.lang.Class<?> wildcardClass47 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        java.lang.Class<?> wildcardClass48 = mean47.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        mean65.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean87.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean88.copy();
        boolean boolean90 = mean23.equals((java.lang.Object) mean88);
        mean88.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean30.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double[] doubleArray85 = new double[] {};
        mean78.incrementAll(doubleArray85);
        mean43.setData(doubleArray85);
        mean30.setData(doubleArray85);
        mean1.incrementAll(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = mean17.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        mean18.clear();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double[] doubleArray86 = new double[] {};
        mean79.incrementAll(doubleArray86);
        mean44.setData(doubleArray86);
        mean31.setData(doubleArray86);
        mean18.setData(doubleArray86);
        double[] doubleArray91 = mean18.getData();
        double double92 = mean1.evaluate(doubleArray91);
        double double93 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean21.setData(doubleArray84);
        double double96 = mean11.evaluate(doubleArray84, (int) (short) 1, (int) (short) 1);
        double double97 = mean11.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        mean22.increment((double) (byte) 1);
        double[] doubleArray33 = mean22.getData();
        long long34 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double42 = mean22.evaluate(doubleArray40);
        mean21.incrementAll(doubleArray40);
        mean0.incrementAll(doubleArray40);
        double[] doubleArray45 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        mean20.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        mean20.setData(doubleArray62);
        double double67 = mean13.evaluate(doubleArray62, (int) (short) 0, 0);
        double double68 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean13.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean22.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double[] doubleArray64 = new double[] {};
        mean57.incrementAll(doubleArray64);
        mean22.setData(doubleArray64);
        double double69 = mean15.evaluate(doubleArray64, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        double double71 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean15.incrementAll(doubleArray90);
        double double94 = mean1.evaluate(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray77 = mean0.getData();
        long long78 = mean0.getN();
        long long79 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2L + "'", long78 == 2L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean69.copy();
        mean69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        mean80.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean80);
        double double83 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        double[] doubleArray60 = mean44.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        mean61.increment(2.2d);
        double double64 = mean61.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2.2d + "'", double64 == 2.2d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        mean0.increment((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass60 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean12.copy();
        double[] doubleArray41 = mean40.getData();
        mean0.setData(doubleArray41);
        java.lang.Class<?> wildcardClass43 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        double double14 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean24.clear();
        mean24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean24.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        double[] doubleArray53 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        double[] doubleArray55 = mean13.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertNull(doubleArray55);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray77 = mean0.getData();
        long long78 = mean0.getN();
        mean0.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2L + "'", long78 == 2L);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        mean1.increment((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        double[] doubleArray29 = mean9.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        double[] doubleArray27 = mean26.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNull(doubleArray27);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        double double33 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        boolean boolean47 = mean11.equals((java.lang.Object) mean46);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        double[] doubleArray84 = mean1.getData();
        mean1.clear();
        mean1.increment(2.2d);
        java.lang.Object obj88 = null;
        boolean boolean89 = mean1.equals(obj88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        double[] doubleArray24 = mean12.getData();
        java.lang.Class<?> wildcardClass25 = mean12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double12 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 1.0f);
        double[] doubleArray49 = mean23.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray49);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        double double62 = mean35.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        java.lang.Class<?> wildcardClass43 = mean15.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        long long44 = mean21.getN();
        double double45 = mean21.getResult();
        double[] doubleArray46 = mean21.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = null;
        mean58.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean58.setData(doubleArray75);
        mean47.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double[] doubleArray89 = new double[] {};
        mean82.incrementAll(doubleArray89);
        mean47.setData(doubleArray89);
        mean21.setData(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean20.setData(doubleArray89, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        mean15.increment((double) (byte) 1);
        double[] doubleArray26 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        mean37.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean37);
        double[] doubleArray44 = new double[] { 100, 1, (byte) 100 };
        mean37.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = null;
        mean58.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray78 = null;
        mean69.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double90 = mean80.evaluate(doubleArray86, (int) (short) 0, (int) (short) 1);
        mean69.setData(doubleArray86);
        mean58.incrementAll(doubleArray86);
        double double93 = mean47.evaluate(doubleArray86);
        double double96 = mean46.evaluate(doubleArray86, 0, 1);
        double double97 = mean0.evaluate(doubleArray86);
        mean0.increment((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean36.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double43 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        boolean boolean57 = mean42.equals((java.lang.Object) mean45);
        long long58 = mean42.getN();
        double double59 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        boolean boolean70 = mean61.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        mean61.clear();
        mean61.clear();
        boolean boolean74 = mean42.equals((java.lang.Object) mean61);
        boolean boolean75 = mean15.equals((java.lang.Object) mean42);
        double[] doubleArray76 = mean15.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(doubleArray76);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        long long15 = mean14.getN();
        mean14.increment(50.0d);
        double double18 = mean14.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 75.0d + "'", double18 == 75.0d);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean49.evaluate(doubleArray88);
        double[] doubleArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean0.evaluate(doubleArray88, doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean39);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = mean39.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(mean39);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        double[] doubleArray77 = null;
        mean68.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double89 = mean79.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        mean68.setData(doubleArray85);
        mean57.incrementAll(doubleArray85);
        double double92 = mean46.evaluate(doubleArray85);
        mean36.setData(doubleArray85);
        mean27.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray85, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        java.lang.Class<?> wildcardClass69 = mean58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double[] doubleArray26 = mean0.getData();
        double double27 = mean0.getResult();
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray28, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        mean27.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = mean19.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        double double11 = mean1.evaluate(doubleArray7, (int) (short) 0, (int) (short) 1);
        mean1.increment(100.0d);
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        mean22.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray44 = mean31.getData();
        double double45 = mean31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        long long69 = mean46.getN();
        double double70 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean46);
        double[] doubleArray72 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean46.copy();
        boolean boolean74 = mean22.equals((java.lang.Object) mean73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean58.copy();
        java.lang.Class<?> wildcardClass61 = mean58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        double[] doubleArray12 = mean0.getData();
        java.lang.Object obj13 = null;
        boolean boolean14 = mean0.equals(obj13);
        double double15 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long12 = mean11.getN();
        long long13 = mean11.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        double[] doubleArray15 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        mean50.incrementAll(doubleArray69);
        mean29.incrementAll(doubleArray69);
        mean17.incrementAll(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            mean14.setData(doubleArray69, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        long long20 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean44.increment(100.0d);
        double[] doubleArray60 = new double[] { 0L, (-1), (short) 1 };
        mean44.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean44);
        long long63 = mean44.getN();
        double[] doubleArray64 = mean44.getData();
        mean13.setData(doubleArray64);
        mean10.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        long long68 = mean10.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean15.clear();
        mean15.clear();
        double[] doubleArray28 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray35, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        long long50 = mean43.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean74.increment(100.0d);
        double[] doubleArray90 = new double[] { 0L, (-1), (short) 1 };
        mean74.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean74);
        long long93 = mean74.getN();
        double[] doubleArray94 = mean74.getData();
        mean43.setData(doubleArray94);
        mean15.setData(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = mean13.evaluate(doubleArray94, (-1), 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        mean49.increment((double) (byte) 10);
        mean49.increment((double) (byte) 0);
        double[] doubleArray65 = mean49.getData();
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        mean67.incrementAll(doubleArray83);
        double double86 = mean49.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            mean48.incrementAll(doubleArray83, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        boolean boolean82 = mean0.equals((java.lang.Object) mean81);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        long long51 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean53.incrementAll(doubleArray69);
        double double72 = mean0.evaluate(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray12 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        double[] doubleArray52 = new double[] { 0L, (-1), (short) 1 };
        mean36.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean36);
        long long55 = mean36.getN();
        double[] doubleArray56 = mean36.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        mean36.increment((double) 10L);
        double[] doubleArray60 = mean36.getData();
        double[] doubleArray61 = mean36.getData();
        double[] doubleArray62 = mean36.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double65 = mean11.evaluate(doubleArray12, doubleArray62, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        double[] doubleArray39 = mean28.getData();
        long long40 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double48 = mean28.evaluate(doubleArray46);
        double double49 = mean22.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        mean22.increment((double) 2L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        long long40 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        boolean boolean42 = mean12.equals((java.lang.Object) mean15);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = mean12.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        long long75 = mean72.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        mean21.increment((double) 10L);
        boolean boolean68 = mean0.equals((java.lang.Object) mean21);
        double double69 = mean21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        long long93 = mean70.getN();
        mean70.increment((double) 4L);
        boolean boolean97 = mean70.equals((java.lang.Object) (byte) 0);
        double[] doubleArray98 = mean70.getData();
        mean21.incrementAll(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2.2d + "'", double69 == 2.2d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean22.copy();
        double[] doubleArray33 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        boolean boolean44 = mean22.equals((java.lang.Object) mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean68.increment(100.0d);
        double[] doubleArray84 = new double[] { 0L, (-1), (short) 1 };
        mean68.setData(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean68);
        long long87 = mean68.getN();
        double[] doubleArray88 = mean68.getData();
        mean22.setData(doubleArray88);
        mean0.incrementAll(doubleArray88);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        double[] doubleArray34 = mean19.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(doubleArray34);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) (byte) 100);
        double double26 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean61);
        long long64 = mean61.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 4L + "'", long64 == 4L);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean71.incrementAll(doubleArray78);
        mean0.setData(doubleArray78, (int) (byte) 0, 0);
        long long87 = mean0.getN();
        double double88 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        mean70.incrementAll(doubleArray89);
        mean49.setData(doubleArray89);
        mean24.setData(doubleArray89);
        mean23.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray89, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Class<?> wildcardClass10 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        double double47 = mean23.getResult();
        double[] doubleArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean23.setData(doubleArray48, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double29 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        mean31.clear();
        boolean boolean43 = mean28.equals((java.lang.Object) mean31);
        double double44 = mean28.getResult();
        boolean boolean45 = mean9.equals((java.lang.Object) double44);
        double[] doubleArray46 = mean9.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(doubleArray46);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        double double47 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        long long71 = mean48.getN();
        mean48.increment((double) 4L);
        boolean boolean75 = mean48.equals((java.lang.Object) (byte) 0);
        double[] doubleArray76 = mean48.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double79 = mean44.evaluate(doubleArray76, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        double double83 = mean1.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass84 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        long long36 = mean27.getN();
        double[] doubleArray37 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean38);
        double double62 = mean27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean74.increment((double) (byte) 1);
        double[] doubleArray85 = mean74.getData();
        long long86 = mean74.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double94 = mean74.evaluate(doubleArray92);
        mean73.incrementAll(doubleArray92);
        mean27.incrementAll(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = mean0.evaluate(doubleArray92, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        double[] doubleArray15 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        long long28 = mean17.getN();
        double double29 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double double40 = mean30.evaluate(doubleArray36, (int) (short) 0, (int) (short) 1);
        mean30.increment(100.0d);
        double[] doubleArray46 = new double[] { 0L, (-1), (short) 1 };
        mean30.setData(doubleArray46);
        mean17.incrementAll(doubleArray46);
        mean14.setData(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        double double14 = mean10.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = mean69.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mean97);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double[] doubleArray37 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        long long61 = mean38.getN();
        double double62 = mean38.getResult();
        double[] doubleArray63 = mean38.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean11.incrementAll(doubleArray63, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.increment(0.0d);
        long long49 = mean0.getN();
        double[] doubleArray50 = mean0.getData();
        mean0.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNull(doubleArray50);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        long long23 = mean0.getN();
        mean0.increment((double) 2L);
        double[] doubleArray26 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
        org.junit.Assert.assertNull(doubleArray26);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean38.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        double[] doubleArray72 = null;
        mean63.setData(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean63.setData(doubleArray80);
        long long86 = mean63.getN();
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean63);
        mean52.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        long long93 = mean37.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        double[] doubleArray47 = mean23.getData();
        java.lang.Class<?> wildcardClass48 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean14.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        double double54 = mean0.getResult();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean19.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        boolean boolean42 = mean33.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        mean66.increment((double) (byte) 1);
        double[] doubleArray77 = mean66.getData();
        long long78 = mean66.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double86 = mean66.evaluate(doubleArray84);
        mean65.incrementAll(doubleArray84);
        mean44.setData(doubleArray84);
        boolean boolean89 = mean33.equals((java.lang.Object) doubleArray84);
        double double92 = mean19.evaluate(doubleArray84, 0, (int) (byte) 0);
        mean0.setData(doubleArray84);
        java.lang.Class<?> wildcardClass94 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double98 = mean97.getResult();
        double[] doubleArray99 = mean97.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        mean29.increment((double) (byte) 1);
        double[] doubleArray40 = mean29.getData();
        long long41 = mean29.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double49 = mean29.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean29.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean29);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double46 = mean23.getResult();
        long long47 = mean23.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        long long88 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertNotNull(mean89);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        long long24 = mean15.getN();
        double[] doubleArray25 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean26);
        mean26.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean26.copy();
        double[] doubleArray54 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean64.incrementAll(doubleArray71);
        mean53.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            mean14.setData(doubleArray71, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean11.copy();
        mean38.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = mean0.copy();
        long long3 = mean2.getN();
        long long4 = mean2.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(mean2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double double26 = mean0.getResult();
        double double27 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        long long35 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean59);
        long long78 = mean59.getN();
        double[] doubleArray79 = mean59.getData();
        mean28.setData(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray79, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        mean3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double double28 = mean18.evaluate(doubleArray24, (int) (short) 0, (int) (short) 1);
        mean18.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double[] doubleArray39 = new double[] {};
        mean32.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean32.copy();
        mean32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean43.setData(doubleArray60);
        long long66 = mean43.getN();
        mean43.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean43);
        mean32.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean73.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double93 = mean83.evaluate(doubleArray89, (int) (short) 0, (int) (short) 1);
        double double96 = mean82.evaluate(doubleArray89, 1, (int) (byte) 1);
        mean32.setData(doubleArray89);
        mean3.incrementAll(doubleArray89);
        java.lang.Class<?> wildcardClass99 = mean3.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment(10.0d);
        mean23.increment((double) (-1));
        double double47 = mean23.getResult();
        double[] doubleArray48 = mean23.getData();
        java.lang.Class<?> wildcardClass49 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.5d + "'", double47 == 4.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        mean39.increment((double) (byte) 1);
        double[] doubleArray50 = mean39.getData();
        long long51 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double59 = mean39.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean60);
        mean60.clear();
        java.lang.Class<?> wildcardClass73 = mean60.getClass();
        boolean boolean74 = mean36.equals((java.lang.Object) wildcardClass73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean75, mean76);
        mean75.increment((double) (byte) 1);
        double[] doubleArray86 = mean75.getData();
        long long87 = mean75.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray93 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double94 = mean88.evaluate(doubleArray93);
        double double95 = mean75.evaluate(doubleArray93);
        mean75.increment((double) (short) -1);
        double[] doubleArray98 = mean75.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean75);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertNull(doubleArray98);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double[] doubleArray92 = new double[] {};
        mean85.incrementAll(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean85.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = mean85.copy();
        java.lang.Class<?> wildcardClass96 = mean95.getClass();
        boolean boolean97 = mean72.equals((java.lang.Object) wildcardClass96);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertNotNull(mean94);
        org.junit.Assert.assertNotNull(mean95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(mean98);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        double[] doubleArray56 = mean52.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean52.copy();
        java.lang.Class<?> wildcardClass58 = mean52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        double[] doubleArray37 = mean9.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNull(doubleArray37);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        double[] doubleArray27 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        long long55 = mean46.getN();
        double[] doubleArray56 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean57);
        mean57.increment((-1.0d));
        double[] doubleArray83 = mean57.getData();
        double double84 = mean57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean57);
        mean57.increment(3.666666666666667d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        mean0.increment((double) 0);
        double[] doubleArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double87 = mean0.evaluate(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        long long14 = mean12.getN();
        double[] doubleArray15 = mean12.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        double[] doubleArray72 = mean1.getData();
        double double73 = mean1.getResult();
        double double74 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean9.copy();
        double[] doubleArray21 = mean20.getData();
        double[] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean20.incrementAll(doubleArray22, (-1), 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        double[] doubleArray56 = mean1.getData();
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean11.copy();
        double[] doubleArray14 = mean13.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        double double56 = mean1.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        mean22.increment(Double.NaN);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        boolean boolean30 = mean21.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        long long32 = mean21.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        long long56 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double[] doubleArray64 = new double[] {};
        mean57.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        mean68.increment((double) (byte) 1);
        double[] doubleArray79 = mean68.getData();
        long long80 = mean68.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double88 = mean68.evaluate(doubleArray86);
        mean67.incrementAll(doubleArray86);
        double double90 = mean33.evaluate(doubleArray86);
        mean21.setData(doubleArray86);
        double[] doubleArray92 = mean21.getData();
        double[] doubleArray93 = mean21.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean18.setData(doubleArray93, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray10 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double11 = mean5.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean5);
        long long13 = mean4.getN();
        double[] doubleArray14 = mean4.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean15.setData(doubleArray78);
        mean0.incrementAll(doubleArray78, 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean0.copy();
        java.lang.Class<?> wildcardClass91 = mean0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.25d + "'", double11 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        double[] doubleArray28 = mean0.getData();
        java.lang.Class<?> wildcardClass29 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean46.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        double double14 = mean13.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean13.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        double double45 = mean31.evaluate(doubleArray38, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean55.incrementAll(doubleArray62);
        mean31.setData(doubleArray62);
        double double69 = mean20.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        long long80 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        boolean boolean82 = mean20.equals((java.lang.Object) mean70);
        double double83 = mean20.getResult();
        mean20.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        mean0.increment((double) (byte) 1);
        double[] doubleArray63 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long35 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        mean58.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean58);
        double[] doubleArray62 = mean58.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean58);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNull(doubleArray62);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean56.setData(doubleArray73);
        mean45.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double[] doubleArray87 = new double[] {};
        mean80.incrementAll(doubleArray87);
        mean45.setData(doubleArray87);
        mean32.setData(doubleArray87);
        mean0.setData(doubleArray87);
        mean0.clear();
        long long93 = mean0.getN();
        double double94 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        boolean boolean45 = mean36.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean36.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        double double82 = mean81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean81.evaluate(doubleArray88);
        double double91 = mean33.evaluate(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        double[] doubleArray43 = mean41.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean68.increment(100.0d);
        double[] doubleArray84 = new double[] { 0L, (-1), (short) 1 };
        mean68.setData(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean68);
        double[] doubleArray87 = mean68.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean68.copy();
        double[] doubleArray89 = mean88.getData();
        double double90 = mean41.evaluate(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        mean9.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        long long40 = mean29.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean29.copy();
        boolean boolean42 = mean22.equals((java.lang.Object) mean41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        mean59.incrementAll(doubleArray78);
        mean38.setData(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray78, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        double[] doubleArray68 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean38.increment(100.0d);
        double[] doubleArray54 = new double[] { 0L, (-1), (short) 1 };
        mean38.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean38);
        long long57 = mean38.getN();
        double[] doubleArray58 = mean38.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.increment((double) 10L);
        double[] doubleArray62 = mean38.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double65 = mean0.evaluate(doubleArray62, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        double double76 = mean13.getResult();
        java.lang.Class<?> wildcardClass77 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        long long52 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean50.copy();
        double double54 = mean50.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        long long51 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean52.copy();
        double[] doubleArray64 = mean63.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean63.copy();
        boolean boolean66 = mean22.equals((java.lang.Object) mean63);
        double[] doubleArray67 = mean63.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double68 = mean63.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNull(doubleArray64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(doubleArray67);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        double[] doubleArray56 = mean1.getData();
        double[] doubleArray57 = mean1.getData();
        double[] doubleArray58 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNull(doubleArray58);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double59 = mean58.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(mean58);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment(10.0d);
        mean23.increment((double) (-1));
        double double47 = mean23.getResult();
        double[] doubleArray48 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean49.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean72.increment(100.0d);
        double[] doubleArray88 = new double[] { 0L, (-1), (short) 1 };
        mean72.setData(doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean72);
        long long91 = mean72.getN();
        double[] doubleArray92 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        mean72.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = mean72.copy();
        double[] doubleArray97 = mean72.getData();
        mean23.setData(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.5d + "'", double47 == 4.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        double[] doubleArray72 = mean1.getData();
        mean1.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        long long10 = mean0.getN();
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.increment((double) '4');
        mean1.increment((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        boolean boolean27 = mean0.equals((java.lang.Object) (byte) 0);
        double[] doubleArray28 = mean0.getData();
        mean0.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        mean32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        double double55 = mean41.evaluate(doubleArray48, 1, (int) (byte) 1);
        double double56 = mean0.evaluate(doubleArray48);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        mean31.clear();
        double[] doubleArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean31.incrementAll(doubleArray36, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean61.increment(0.0d);
        java.lang.Object obj64 = null;
        boolean boolean65 = mean61.equals(obj64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }
}


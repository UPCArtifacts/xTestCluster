import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        double[] doubleArray58 = mean1.getData();
        double[] doubleArray59 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertNull(doubleArray59);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        java.lang.Class<?> wildcardClass34 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        double[] doubleArray76 = mean51.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double79 = mean36.evaluate(doubleArray76, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double36 = mean35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        mean38.clear();
        boolean boolean50 = mean35.equals((java.lang.Object) mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        double[] doubleArray62 = mean51.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean51);
        boolean boolean65 = mean0.equals((java.lang.Object) mean35);
        long long66 = mean35.getN();
        double double67 = mean35.getResult();
        java.lang.Class<?> wildcardClass68 = mean35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        long long14 = mean12.getN();
        long long15 = mean12.getN();
        double double16 = mean12.getResult();
        long long17 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        double[] doubleArray29 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        boolean boolean40 = mean18.equals((java.lang.Object) mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean43.setData(doubleArray60);
        long long66 = mean43.getN();
        mean43.increment((double) 4L);
        boolean boolean70 = mean43.equals((java.lang.Object) (byte) 0);
        double[] doubleArray71 = mean43.getData();
        mean42.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean12.evaluate(doubleArray71, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean22.copy();
        long long80 = mean79.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean79.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean81);
        double[] doubleArray83 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 4L + "'", long80 == 4L);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNull(doubleArray83);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        long long75 = mean35.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        mean11.increment(10.0d);
        mean11.clear();
        double double40 = mean11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        boolean boolean70 = mean61.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean71);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        double double76 = mean13.getResult();
        long long77 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        mean12.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        double double58 = mean36.evaluate(doubleArray55);
        mean12.incrementAll(doubleArray55);
        mean0.incrementAll(doubleArray55);
        long long61 = mean0.getN();
        double[] doubleArray62 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 5L + "'", long61 == 5L);
        org.junit.Assert.assertNull(doubleArray62);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        mean0.clear();
        double[] doubleArray18 = mean0.getData();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(doubleArray18);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        double[] doubleArray26 = mean25.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        long long37 = mean28.getN();
        double[] doubleArray38 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        double double63 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double[] doubleArray71 = new double[] {};
        mean64.incrementAll(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean64.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean64.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean75, mean76);
        mean75.increment((double) (byte) 1);
        double[] doubleArray86 = mean75.getData();
        long long87 = mean75.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray93 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double94 = mean88.evaluate(doubleArray93);
        double double95 = mean75.evaluate(doubleArray93);
        mean74.incrementAll(doubleArray93);
        mean28.incrementAll(doubleArray93);
        boolean boolean98 = mean25.equals((java.lang.Object) mean28);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        mean29.setData(doubleArray36);
        double double39 = mean29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean42.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        double double65 = mean51.evaluate(doubleArray58, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double[] doubleArray73 = new double[] {};
        mean66.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean66.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean75.incrementAll(doubleArray82);
        mean51.setData(doubleArray82);
        double double89 = mean40.evaluate(doubleArray82);
        mean9.setData(doubleArray82);
        double double91 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(mean75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        double double36 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean61);
        mean50.increment((double) 0L);
        boolean boolean65 = mean0.equals((java.lang.Object) 0L);
        long long66 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        mean76.incrementAll(doubleArray83);
        double double89 = mean0.evaluate(doubleArray83);
        mean0.increment((double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean58.copy();
        double[] doubleArray61 = mean58.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        mean28.clear();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean28.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        mean65.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean87.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean88.copy();
        boolean boolean90 = mean23.equals((java.lang.Object) mean88);
        double[] doubleArray91 = mean23.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean25);
        double[] doubleArray52 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.increment(4.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(doubleArray52);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        long long13 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        long long26 = mean14.getN();
        double[] doubleArray27 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean14.setData(doubleArray67);
        mean11.incrementAll(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        long long69 = mean67.getN();
        double[] doubleArray70 = mean67.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4L + "'", long69 == 4L);
        org.junit.Assert.assertNull(doubleArray70);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        double double22 = mean9.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        long long53 = mean44.getN();
        mean44.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double[] doubleArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean23.evaluate(doubleArray58, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        double double77 = mean1.getResult();
        mean1.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double81 = mean80.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.5d) + "'", double81 == (-0.5d));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        mean11.increment(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        double double34 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean21.setData(doubleArray84);
        mean0.incrementAll(doubleArray84);
        long long95 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 5L + "'", long95 == 5L);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        mean59.incrementAll(doubleArray87);
        double double94 = mean48.evaluate(doubleArray87);
        mean24.setData(doubleArray87);
        mean0.incrementAll(doubleArray87);
        double[] doubleArray97 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertNull(doubleArray97);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        mean65.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean87.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean88.copy();
        boolean boolean90 = mean23.equals((java.lang.Object) mean88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean91.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mean92);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        mean0.increment((double) ' ');
        mean0.increment((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        mean1.setData(doubleArray75);
        mean1.increment((double) (short) 1);
        double[] doubleArray80 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean1.copy();
        mean1.increment((double) 3L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(mean81);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.clear();
        double double12 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        mean24.setData(doubleArray31);
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean24.copy();
        double[] doubleArray36 = mean35.getData();
        boolean boolean37 = mean12.equals((java.lang.Object) mean35);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean25);
        double[] doubleArray52 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(doubleArray52);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double[] doubleArray68 = mean0.getData();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass72 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        long long11 = mean9.getN();
        double double12 = mean9.getResult();
        mean9.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        mean29.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double[] doubleArray71 = new double[] {};
        mean64.incrementAll(doubleArray71);
        mean29.setData(doubleArray71);
        double double76 = mean22.evaluate(doubleArray71, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        boolean boolean78 = mean0.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mean79);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        boolean boolean34 = mean0.equals((java.lang.Object) (byte) 0);
        double[] doubleArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray35, (int) (byte) 1, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        boolean boolean74 = mean72.equals((java.lang.Object) 20.199999999999996d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        mean0.increment((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        double double42 = mean1.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray19 = mean18.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray19);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean40.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        boolean boolean67 = mean39.equals((java.lang.Object) mean64);
        double[] doubleArray68 = null;
        mean39.setData(doubleArray68);
        double double70 = mean39.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double11 = mean10.getResult();
        java.lang.Class<?> wildcardClass12 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        mean12.increment((double) 100);
        double[] doubleArray17 = mean12.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNull(doubleArray17);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        mean0.increment((double) 0);
        double[] doubleArray54 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertNull(doubleArray54);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        double double50 = mean48.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        mean24.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        mean62.clear();
        mean62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean66.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        double double89 = mean75.evaluate(doubleArray82, 1, (int) (byte) 1);
        mean62.setData(doubleArray82);
        mean50.setData(doubleArray82);
        mean0.incrementAll(doubleArray82, (int) (byte) 0, 0);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d));
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        double double49 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean50.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        boolean boolean64 = mean14.equals((java.lang.Object) mean50);
        long long65 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean37.copy();
        mean38.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        long long88 = mean65.getN();
        double double89 = mean65.getResult();
        long long90 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean91);
        long long93 = mean91.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean91.copy();
        double[] doubleArray95 = mean94.getData();
        double double98 = mean38.evaluate(doubleArray95, (int) (short) 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(mean94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        double double22 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        double[] doubleArray34 = mean33.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        double[] doubleArray80 = null;
        mean71.setData(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        mean71.setData(doubleArray88);
        mean60.incrementAll(doubleArray88);
        mean35.setData(doubleArray88);
        mean33.setData(doubleArray88);
        mean0.setData(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        boolean boolean15 = mean13.equals((java.lang.Object) (-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        double[] doubleArray27 = mean16.getData();
        long long28 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double36 = mean16.evaluate(doubleArray34);
        double double37 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean47);
        boolean boolean49 = mean13.equals((java.lang.Object) mean47);
        mean47.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean61.setData(doubleArray68);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean72);
        mean72.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(mean72);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        mean67.increment((double) 5L);
        double[] doubleArray70 = mean67.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNull(doubleArray70);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long14 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        mean40.incrementAll(doubleArray68);
        mean15.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean76.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean76);
        double[] doubleArray90 = mean15.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean13.setData(doubleArray90, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double15 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        mean17.clear();
        boolean boolean29 = mean14.equals((java.lang.Object) mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        mean30.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        mean49.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        mean68.incrementAll(doubleArray84);
        double double89 = mean30.evaluate(doubleArray65, doubleArray84, (int) (byte) 0, (int) (byte) 1);
        mean17.setData(doubleArray84);
        double[] doubleArray91 = mean17.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean17.copy();
        double[] doubleArray93 = mean17.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray93, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        double double56 = mean10.evaluate(doubleArray49);
        mean0.setData(doubleArray49);
        double double58 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        long long61 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean25.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean63.clear();
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        double double90 = mean76.evaluate(doubleArray83, 1, (int) (byte) 1);
        mean63.setData(doubleArray83);
        mean51.setData(doubleArray83);
        double double95 = mean12.evaluate(doubleArray83, 1, (int) (byte) 1);
        double double96 = mean12.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        double[] doubleArray28 = mean0.getData();
        double double29 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        mean36.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        double[] doubleArray71 = null;
        mean62.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean62.setData(doubleArray79);
        mean51.incrementAll(doubleArray79);
        double double86 = mean40.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean40);
        mean14.increment((double) 100L);
        double double90 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean14.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.5d + "'", double90 == 50.5d);
        org.junit.Assert.assertNotNull(mean92);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        mean40.setData(doubleArray80);
        boolean boolean85 = mean29.equals((java.lang.Object) doubleArray80);
        mean27.setData(doubleArray80);
        double[] doubleArray87 = mean27.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        double double42 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean45 = mean43.equals((java.lang.Object) 0L);
        double double46 = mean43.getResult();
        mean43.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean73.increment(100.0d);
        double[] doubleArray89 = new double[] { 0L, (-1), (short) 1 };
        mean73.setData(doubleArray89);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean73);
        double[] doubleArray92 = mean73.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean73.copy();
        double[] doubleArray94 = mean93.getData();
        mean49.setData(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray94, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        long long12 = mean1.getN();
        double[] doubleArray13 = mean1.getData();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean38.increment(100.0d);
        double[] doubleArray54 = new double[] { 0L, (-1), (short) 1 };
        mean38.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean38);
        double[] doubleArray57 = mean38.getData();
        double double58 = mean1.evaluate(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        long long26 = mean24.getN();
        mean24.increment(50.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        long long38 = mean29.getN();
        double[] doubleArray39 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean40);
        mean40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean40.copy();
        double[] doubleArray68 = mean67.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean69.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double89 = mean79.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        mean78.incrementAll(doubleArray85);
        mean67.incrementAll(doubleArray85);
        double double92 = mean67.getResult();
        boolean boolean93 = mean24.equals((java.lang.Object) double92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        double double79 = mean0.getResult();
        mean0.increment(0.25d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        java.lang.Object obj41 = null;
        boolean boolean42 = mean40.equals(obj41);
        double double43 = mean40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean40.copy();
        boolean boolean45 = mean1.equals((java.lang.Object) mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        boolean boolean56 = mean47.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean57);
        mean57.increment((double) '#');
        mean57.increment(10.0d);
        boolean boolean63 = mean1.equals((java.lang.Object) 10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        mean11.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        mean39.increment((double) (byte) 1);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean62.incrementAll(doubleArray69);
        mean52.setData(doubleArray69, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = mean11.evaluate(doubleArray69, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean9.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean15.clear();
        mean15.clear();
        double[] doubleArray28 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray35, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        long long50 = mean43.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean74.increment(100.0d);
        double[] doubleArray90 = new double[] { 0L, (-1), (short) 1 };
        mean74.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean74);
        long long93 = mean74.getN();
        double[] doubleArray94 = mean74.getData();
        mean43.setData(doubleArray94);
        mean15.setData(doubleArray94);
        double double97 = mean0.evaluate(doubleArray94);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean0.copy();
        double double99 = mean98.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
        org.junit.Assert.assertNotNull(mean98);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        mean12.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        double double58 = mean36.evaluate(doubleArray55);
        mean12.incrementAll(doubleArray55);
        mean0.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double[] doubleArray83 = new double[] {};
        mean76.incrementAll(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean76.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean76.copy();
        java.lang.Class<?> wildcardClass87 = mean86.getClass();
        boolean boolean88 = mean63.equals((java.lang.Object) wildcardClass87);
        double[] doubleArray89 = mean63.getData();
        mean63.increment(100.0d);
        boolean boolean92 = mean61.equals((java.lang.Object) mean63);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean31.copy();
        mean31.increment((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean35);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        mean19.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        mean19.setData(doubleArray61);
        double double66 = mean12.evaluate(doubleArray61, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double double68 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        mean12.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray87, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double27 = mean26.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        long long51 = mean28.getN();
        mean28.increment((double) 4L);
        double double54 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        long long56 = mean55.getN();
        double[] doubleArray57 = mean55.getData();
        mean26.incrementAll(doubleArray57, (int) (short) 1, 0);
        double double61 = mean26.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4.0d + "'", double54 == 4.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        mean24.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        boolean boolean63 = mean51.equals((java.lang.Object) mean61);
        boolean boolean64 = mean10.equals((java.lang.Object) mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = mean51.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean43.incrementAll(doubleArray71);
        double double78 = mean32.evaluate(doubleArray71);
        double double81 = mean31.evaluate(doubleArray71, 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean31.copy();
        double double83 = mean31.getResult();
        long long84 = mean31.getN();
        double double85 = mean31.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        mean10.increment((double) 10.0f);
        mean10.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        java.lang.Class<?> wildcardClass28 = mean27.getClass();
        boolean boolean29 = mean10.equals((java.lang.Object) mean27);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        double[] doubleArray30 = mean1.getData();
        mean1.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        long long20 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean44.increment(100.0d);
        double[] doubleArray60 = new double[] { 0L, (-1), (short) 1 };
        mean44.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean44);
        long long63 = mean44.getN();
        double[] doubleArray64 = mean44.getData();
        mean13.setData(doubleArray64);
        mean10.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        mean16.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean39.increment(100.0d);
        double[] doubleArray55 = new double[] { 0L, (-1), (short) 1 };
        mean39.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean39);
        long long58 = mean39.getN();
        double[] doubleArray59 = mean39.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        mean39.increment((double) 10L);
        double[] doubleArray63 = mean39.getData();
        mean0.incrementAll(doubleArray63, (int) (short) 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = mean0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean40.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        boolean boolean67 = mean39.equals((java.lang.Object) mean64);
        double[] doubleArray68 = null;
        mean39.setData(doubleArray68);
        double[] doubleArray70 = mean39.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(doubleArray70);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        mean53.increment((double) '4');
        double double66 = mean53.getResult();
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean68.increment(0.0d);
        boolean boolean71 = mean52.equals((java.lang.Object) 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 52.0d + "'", double66 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        mean0.increment((double) 1.0f);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean49.setData(doubleArray56);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        mean69.clear();
        mean69.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        double[] doubleArray82 = null;
        mean73.setData(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double94 = mean84.evaluate(doubleArray90, (int) (short) 0, (int) (short) 1);
        mean73.setData(doubleArray90);
        mean69.incrementAll(doubleArray90);
        mean49.setData(doubleArray90);
        double double98 = mean0.evaluate(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.25d + "'", double98 == 0.25d);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean41.copy();
        double[] doubleArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean41.incrementAll(doubleArray43, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        double[] doubleArray43 = mean41.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean41);
        long long45 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        double[] doubleArray72 = mean1.getData();
        double[] doubleArray73 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        mean83.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        mean83.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean83);
        double[] doubleArray94 = mean83.getData();
        mean1.setData(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean11.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean33.getData();
        double double58 = mean33.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        long long13 = mean11.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        double[] doubleArray14 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double double37 = mean11.getResult();
        double[] doubleArray38 = mean11.getData();
        double[] doubleArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray39, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertNull(doubleArray38);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        double double25 = mean10.getResult();
        double double26 = mean10.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass72 = mean71.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        long long39 = mean10.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        long long40 = mean17.getN();
        mean17.increment((double) 4L);
        double double43 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        long long45 = mean44.getN();
        double[] doubleArray46 = mean44.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray46, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.0d + "'", double43 == 4.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean22.copy();
        double double80 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray82 = mean22.getData();
        mean22.clear();
        mean22.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        long long50 = mean27.getN();
        double double51 = mean27.getResult();
        long long52 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean64.clear();
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean68.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        double double91 = mean77.evaluate(doubleArray84, 1, (int) (byte) 1);
        mean64.setData(doubleArray84);
        double double93 = mean27.evaluate(doubleArray84);
        mean0.setData(doubleArray84, 0, 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        double double94 = mean0.evaluate(doubleArray84);
        double double95 = mean0.getResult();
        double double96 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        double double55 = mean0.getResult();
        mean0.increment((double) 2L);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        long long11 = mean9.getN();
        double double12 = mean9.getResult();
        mean9.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        mean16.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double27 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        mean29.clear();
        boolean boolean41 = mean26.equals((java.lang.Object) mean29);
        double[] doubleArray42 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        mean44.increment((double) (byte) 1);
        double[] doubleArray55 = mean44.getData();
        long long56 = mean44.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double64 = mean44.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean44.evaluate(doubleArray83);
        mean43.setData(doubleArray83);
        mean16.incrementAll(doubleArray83);
        mean9.setData(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(doubleArray42);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        double[] doubleArray27 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean37.setData(doubleArray44);
        double double47 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        double double73 = mean59.evaluate(doubleArray66, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double94 = mean84.evaluate(doubleArray90, (int) (short) 0, (int) (short) 1);
        mean83.incrementAll(doubleArray90);
        mean59.setData(doubleArray90);
        double double97 = mean48.evaluate(doubleArray90);
        mean26.setData(doubleArray90);
        mean0.setData(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        mean10.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        mean37.incrementAll(doubleArray53);
        double double56 = mean37.getResult();
        mean37.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean37.incrementAll(doubleArray90);
        double double95 = mean10.evaluate(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean0.copy();
        double double21 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 55.0d + "'", double21 == 55.0d);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean25.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean63.clear();
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        double double90 = mean76.evaluate(doubleArray83, 1, (int) (byte) 1);
        mean63.setData(doubleArray83);
        mean51.setData(doubleArray83);
        double double95 = mean12.evaluate(doubleArray83, 1, (int) (byte) 1);
        long long96 = mean12.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray10 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double11 = mean5.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean5);
        long long13 = mean4.getN();
        double[] doubleArray14 = mean4.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean15.setData(doubleArray78);
        mean0.incrementAll(doubleArray78, 1, 0);
        long long90 = mean0.getN();
        double[] doubleArray91 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean0.copy();
        double[] doubleArray93 = mean92.getData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.25d + "'", double11 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNull(doubleArray91);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNull(doubleArray93);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        long long23 = mean0.getN();
        mean0.increment((double) 2L);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean61);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        double double66 = mean65.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        mean14.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        double[] doubleArray68 = mean0.getData();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertNotNull(mean71);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        double[] doubleArray60 = mean59.getData();
        mean59.increment((double) (byte) 0);
        java.lang.Class<?> wildcardClass63 = mean59.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean34);
        double double36 = mean34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean37.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        mean22.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double double25 = mean15.evaluate(doubleArray21, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray21, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        mean29.increment((double) (byte) 1);
        double[] doubleArray40 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean41.copy();
        mean51.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean29.copy();
        mean55.increment((double) (-1.0f));
        boolean boolean58 = mean1.equals((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean1.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mean59);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        double double59 = mean38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean69);
        mean69.increment((double) 1L);
        boolean boolean73 = mean36.equals((java.lang.Object) mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean74.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mean75);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        double double6 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        mean7.increment((double) (byte) 1);
        double[] doubleArray18 = mean7.getData();
        long long19 = mean7.getN();
        double[] doubleArray20 = mean7.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean43.setData(doubleArray60);
        mean32.incrementAll(doubleArray60);
        double double67 = mean21.evaluate(doubleArray60);
        mean7.setData(doubleArray60);
        double[] doubleArray69 = mean7.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray69, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.2d + "'", double6 == 2.2d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.increment(0.0d);
        mean0.increment((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean39.increment(0.0d);
        double[] doubleArray42 = mean39.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(doubleArray42);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        double[] doubleArray23 = mean21.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(doubleArray23);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        double double67 = mean58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean58.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(mean68);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mean18);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean0.copy();
        long long60 = mean0.getN();
        double double61 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        long long25 = mean16.getN();
        double[] doubleArray26 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean27);
        double double51 = mean16.getResult();
        mean16.increment((double) 10);
        boolean boolean54 = mean13.equals((java.lang.Object) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        double double15 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        mean16.setData(doubleArray33);
        long long39 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        mean50.incrementAll(doubleArray69);
        double double73 = mean16.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        mean74.setData(doubleArray80);
        mean74.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean74);
        long long87 = mean74.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.increment((double) '#');
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double16 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        mean18.clear();
        boolean boolean30 = mean15.equals((java.lang.Object) mean18);
        long long31 = mean15.getN();
        mean15.clear();
        boolean boolean33 = mean11.equals((java.lang.Object) mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        double double70 = mean48.evaluate(doubleArray67);
        mean14.incrementAll(doubleArray67, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean14);
        java.lang.Class<?> wildcardClass75 = mean14.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double double94 = mean11.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean53.increment(100.0d);
        double[] doubleArray69 = new double[] { 0L, (-1), (short) 1 };
        mean53.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean53);
        long long72 = mean53.getN();
        double[] doubleArray73 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean53.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean53.copy();
        double[] doubleArray78 = mean53.getData();
        boolean boolean79 = mean0.equals((java.lang.Object) mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        long long50 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean51);
        double[] doubleArray53 = mean51.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double[] doubleArray72 = new double[] {};
        mean65.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean65.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean65.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean76, mean77);
        mean76.increment((double) (byte) 1);
        double[] doubleArray87 = mean76.getData();
        long long88 = mean76.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray94 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double95 = mean89.evaluate(doubleArray94);
        double double96 = mean76.evaluate(doubleArray94);
        mean75.incrementAll(doubleArray94);
        mean54.setData(doubleArray94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(mean75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        double[] doubleArray81 = mean78.getData();
        long long82 = mean78.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean78.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        double[] doubleArray60 = mean59.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        long long70 = mean61.getN();
        double double71 = mean61.getResult();
        mean61.clear();
        double double73 = mean61.getResult();
        double double74 = mean61.getResult();
        boolean boolean75 = mean59.equals((java.lang.Object) mean61);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double33 = mean32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean19);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean19.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        long long11 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(mean12);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        mean13.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        mean13.setData(doubleArray55);
        mean0.setData(doubleArray55);
        double double59 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        long long26 = mean0.getN();
        double double27 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean37.setData(doubleArray44);
        mean0.incrementAll(doubleArray44);
        java.lang.Class<?> wildcardClass48 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4.0d + "'", double27 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        mean0.clear();
        long long49 = mean0.getN();
        long long50 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        long long30 = mean18.getN();
        mean18.increment((double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        long long52 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        mean55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double65 = mean64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        boolean boolean76 = mean67.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean67.copy();
        mean67.clear();
        boolean boolean79 = mean64.equals((java.lang.Object) mean67);
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean82, mean83);
        mean82.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean93);
        mean93.increment(50.0d);
        boolean boolean97 = mean53.equals((java.lang.Object) 50.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        double double59 = mean9.evaluate();
        double double60 = mean9.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean9.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        mean13.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        mean13.setData(doubleArray55);
        mean13.clear();
        double[] doubleArray59 = mean13.getData();
        double double60 = mean0.evaluate(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        mean65.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean87.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean88.copy();
        boolean boolean90 = mean23.equals((java.lang.Object) mean88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean88);
        java.lang.Class<?> wildcardClass92 = mean91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double[] doubleArray68 = mean0.getData();
        long long69 = mean0.getN();
        mean0.increment((double) 0);
        long long72 = mean0.getN();
        double[] doubleArray73 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4L + "'", long69 == 4L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 5L + "'", long72 == 5L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        mean26.increment((double) (byte) 1);
        double[] doubleArray37 = mean26.getData();
        long long38 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double46 = mean26.evaluate(doubleArray44);
        mean25.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        double double69 = mean48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean25.copy();
        long long83 = mean82.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 4L + "'", long83 == 4L);
        org.junit.Assert.assertNotNull(mean84);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        double double42 = mean1.getResult();
        double double43 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        mean66.incrementAll(doubleArray85);
        mean45.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray85, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        double[] doubleArray74 = mean1.getData();
        mean1.increment((double) 10);
        java.lang.Class<?> wildcardClass77 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean27.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mean40);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double[] doubleArray19 = new double[] { 10, 100.0f, 100.0d, 10L, (-1.0d), 100.0f };
        double double20 = mean12.evaluate(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0, 100.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 53.166666666666664d + "'", double20 == 53.166666666666664d);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        double[] doubleArray74 = mean1.getData();
        mean1.increment((double) 10);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        double double80 = mean36.getResult();
        long long81 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean36.copy();
        mean82.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean82, mean84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(mean82);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        long long13 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double21 = mean1.evaluate(doubleArray19);
        double double22 = mean1.getResult();
        double[] doubleArray23 = null;
        mean1.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        mean36.incrementAll(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean0.evaluate(doubleArray55, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        double[] doubleArray19 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        long long29 = mean20.getN();
        double[] doubleArray30 = mean20.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        mean64.setData(doubleArray71);
        mean20.setData(doubleArray71);
        double double75 = mean18.evaluate(doubleArray71);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        mean11.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        mean17.increment((double) (byte) 1);
        double[] doubleArray28 = mean17.getData();
        mean17.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        boolean boolean65 = mean56.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        double double88 = mean66.evaluate(doubleArray85);
        mean32.incrementAll(doubleArray85, (int) (byte) 0, 0);
        mean31.setData(doubleArray85);
        double double93 = mean0.evaluate(doubleArray85);
        long long94 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 3L + "'", long94 == 3L);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        boolean boolean82 = mean0.equals((java.lang.Object) mean81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean0.copy();
        double double84 = mean83.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double36 = mean35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        mean38.clear();
        boolean boolean50 = mean35.equals((java.lang.Object) mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        double[] doubleArray62 = mean51.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean51);
        boolean boolean65 = mean0.equals((java.lang.Object) mean35);
        long long66 = mean35.getN();
        double double67 = mean35.getResult();
        mean35.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        long long27 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean37.setData(doubleArray44);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean37.copy();
        double[] doubleArray49 = mean48.getData();
        mean26.incrementAll(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        long long94 = mean93.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1L + "'", long94 == 1L);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        mean12.clear();
        mean12.increment((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double double66 = mean56.getResult();
        boolean boolean67 = mean0.equals((java.lang.Object) mean56);
        long long68 = mean0.getN();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        double[] doubleArray29 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        long long67 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        double[] doubleArray77 = null;
        mean68.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double89 = mean79.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        mean68.setData(doubleArray85);
        mean68.clear();
        boolean boolean92 = mean58.equals((java.lang.Object) mean68);
        boolean boolean93 = mean0.equals((java.lang.Object) mean58);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) (short) -1);
        double[] doubleArray15 = mean0.getData();
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        long long40 = mean17.getN();
        double double41 = mean17.getResult();
        double[] doubleArray42 = mean17.getData();
        mean0.setData(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean23.incrementAll(doubleArray88);
        mean22.incrementAll(doubleArray88);
        mean0.incrementAll(doubleArray88);
        long long95 = mean0.getN();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 4L + "'", long95 == 4L);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        boolean boolean61 = mean52.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        long long75 = mean63.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double83 = mean63.evaluate(doubleArray81);
        double double84 = mean62.evaluate(doubleArray81);
        mean28.incrementAll(doubleArray81, (int) (byte) 0, 0);
        double double88 = mean26.evaluate(doubleArray81);
        double[] doubleArray89 = mean26.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertNull(doubleArray89);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        mean14.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double[] doubleArray40 = new double[] {};
        mean33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        mean33.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean52.incrementAll(doubleArray68);
        double double73 = mean14.evaluate(doubleArray49, doubleArray68, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean14.setData(doubleArray91);
        mean13.setData(doubleArray91);
        double[] doubleArray99 = mean13.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean25.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = mean23.evaluate(doubleArray84, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean82.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        double double77 = mean1.getResult();
        mean1.increment((double) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        long long30 = mean18.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean18.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        double[] doubleArray77 = mean3.getData();
        long long78 = mean3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean9.increment((double) 4L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        double double15 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        mean16.setData(doubleArray33);
        long long39 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        mean50.incrementAll(doubleArray69);
        double double73 = mean16.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        mean74.setData(doubleArray80);
        mean74.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean74);
        double[] doubleArray87 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNull(doubleArray87);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        mean47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        mean49.increment((double) '#');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        double[] doubleArray23 = mean9.getData();
        mean9.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = null;
        mean58.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean58.setData(doubleArray75);
        mean47.incrementAll(doubleArray75);
        double double82 = mean36.evaluate(doubleArray75);
        mean26.setData(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            mean9.incrementAll(doubleArray75, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean23.incrementAll(doubleArray88);
        mean22.incrementAll(doubleArray88);
        mean0.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean80.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean80.copy();
        double double83 = mean82.getResult();
        long long84 = mean82.getN();
        boolean boolean85 = mean69.equals((java.lang.Object) mean82);
        long long86 = mean82.getN();
        double[] doubleArray87 = mean82.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNull(doubleArray87);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        long long56 = mean37.getN();
        mean37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        boolean boolean71 = mean62.equals((java.lang.Object) (short) 1);
        double[] doubleArray72 = mean62.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean59);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(doubleArray72);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean49.setData(doubleArray66);
        mean38.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double[] doubleArray80 = new double[] {};
        mean73.incrementAll(doubleArray80);
        mean38.setData(doubleArray80);
        double double83 = mean0.evaluate(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean61);
        mean46.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double[] doubleArray73 = new double[] {};
        mean66.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean66.copy();
        mean75.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        mean75.setData(doubleArray82);
        mean75.clear();
        mean75.increment((double) (byte) 100);
        boolean boolean88 = mean46.equals((java.lang.Object) mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean75.copy();
        long long90 = mean89.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(mean75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean0.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        long long37 = mean28.getN();
        double[] doubleArray38 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean39.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        mean76.clear();
        boolean boolean78 = mean66.equals((java.lang.Object) mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean66);
        long long80 = mean66.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean66);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean22.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double[] doubleArray51 = mean0.getData();
        double double52 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        mean36.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        double[] doubleArray72 = null;
        mean61.setData(doubleArray72);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        double[] doubleArray15 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        long long56 = mean37.getN();
        double[] doubleArray57 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        double double59 = mean58.evaluate();
        double double60 = mean58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        boolean boolean71 = mean62.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean75.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean75);
        double double86 = mean85.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean85);
        double[] doubleArray88 = mean58.getData();
        mean0.setData(doubleArray88, (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        double double22 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        mean23.increment((double) (byte) 10);
        mean23.increment((double) (byte) 0);
        double[] doubleArray39 = mean23.getData();
        mean23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        mean41.incrementAll(doubleArray57);
        double double60 = mean23.evaluate(doubleArray57);
        mean9.setData(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        long long18 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        long long29 = mean20.getN();
        double[] doubleArray30 = mean20.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean31);
        double double55 = mean20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean56.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        boolean boolean70 = mean20.equals((java.lang.Object) mean56);
        mean56.clear();
        mean56.increment((double) (short) 10);
        mean56.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double[] doubleArray83 = new double[] {};
        mean76.incrementAll(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean76.copy();
        mean85.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        mean85.setData(doubleArray92);
        double double95 = mean56.evaluate(doubleArray92);
        mean1.incrementAll(doubleArray92, (int) (byte) 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean0.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean0.copy();
        long long85 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 4L + "'", long85 == 4L);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean62.increment(100.0d);
        double[] doubleArray78 = new double[] { 0L, (-1), (short) 1 };
        mean62.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean62);
        long long81 = mean62.getN();
        double[] doubleArray82 = mean62.getData();
        double[] doubleArray83 = null;
        mean62.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean62);
        double[] doubleArray86 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean29);
        mean29.increment((double) (-1.0f));
        mean29.increment(4.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean29.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(mean93);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        long long11 = mean2.getN();
        double[] doubleArray12 = mean2.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean59.setData(doubleArray76);
        mean48.incrementAll(doubleArray76);
        double double83 = mean37.evaluate(doubleArray76);
        mean13.setData(doubleArray76);
        double double85 = mean0.evaluate(doubleArray76);
        mean0.increment((double) 100L);
        mean0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        mean78.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        double double62 = mean48.evaluate(doubleArray55, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        java.lang.Class<?> wildcardClass65 = mean64.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        mean19.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        mean19.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean64.increment((double) (byte) 1);
        double[] doubleArray75 = mean64.getData();
        long long76 = mean64.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double84 = mean64.evaluate(doubleArray82);
        double double85 = mean19.evaluate(doubleArray82);
        double double86 = mean19.getResult();
        double[] doubleArray87 = mean19.getData();
        long long88 = mean19.getN();
        double[] doubleArray89 = mean19.getData();
        mean0.incrementAll(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 4L + "'", long88 == 4L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean45.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean23.copy();
        boolean boolean50 = mean21.equals((java.lang.Object) mean49);
        long long51 = mean49.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        boolean boolean34 = mean25.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.incrementAll(doubleArray65);
        mean13.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray65, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        double double48 = mean0.getResult();
        double double49 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean50.copy();
        long long52 = mean50.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = mean0.copy();
        mean0.increment(0.5d);
        mean0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(mean6);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean1.increment((double) (byte) 1);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean23.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean23);
        double[] doubleArray27 = mean23.getData();
        double[] doubleArray28 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        mean39.setData(doubleArray46);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean50);
        long long52 = mean50.getN();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        long long19 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean20.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean43.increment(100.0d);
        double[] doubleArray59 = new double[] { 0L, (-1), (short) 1 };
        mean43.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean43);
        long long62 = mean43.getN();
        double[] doubleArray63 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean43);
        mean43.increment((double) 10L);
        double[] doubleArray67 = mean43.getData();
        double[] doubleArray68 = mean43.getData();
        double double69 = mean1.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean70.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        mean0.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        mean0.increment((double) 10);
        mean0.clear();
        double double21 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        double double79 = mean33.evaluate(doubleArray72);
        mean23.setData(doubleArray72);
        mean14.incrementAll(doubleArray72);
        mean13.incrementAll(doubleArray72);
        double double83 = mean13.getResult();
        java.lang.Class<?> wildcardClass84 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        mean15.increment((double) (byte) 1);
        double[] doubleArray26 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        mean37.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean37);
        double[] doubleArray41 = mean37.getData();
        double[] doubleArray42 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        boolean boolean44 = mean0.equals((java.lang.Object) mean43);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean20.setData(doubleArray37);
        long long43 = mean20.getN();
        mean20.increment((double) 4L);
        long long46 = mean20.getN();
        double double47 = mean20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        mean57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean57.setData(doubleArray64);
        mean20.incrementAll(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            mean19.setData(doubleArray64, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.0d + "'", double47 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        mean29.increment((double) (byte) 1);
        mean29.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double[] doubleArray50 = new double[] {};
        mean43.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean52.incrementAll(doubleArray59);
        mean42.setData(doubleArray59, 0, 0);
        mean26.setData(doubleArray59);
        mean26.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double12 = mean11.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        long long50 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean51);
        double[] doubleArray53 = mean51.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean51.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNull(doubleArray53);
        org.junit.Assert.assertNotNull(mean54);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        java.lang.Class<?> wildcardClass27 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean14.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        double double54 = mean0.getResult();
        double double55 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        long long51 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean22.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(mean52);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        double[] doubleArray36 = mean35.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNull(doubleArray36);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        boolean boolean35 = mean13.equals((java.lang.Object) mean34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean59);
        long long78 = mean59.getN();
        double[] doubleArray79 = mean59.getData();
        mean13.setData(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean12.evaluate(doubleArray79, 1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        mean22.increment((double) (byte) 1);
        double[] doubleArray33 = mean22.getData();
        long long34 = mean22.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double42 = mean22.evaluate(doubleArray40);
        mean21.incrementAll(doubleArray40);
        mean0.incrementAll(doubleArray40);
        double[] doubleArray45 = mean0.getData();
        long long46 = mean0.getN();
        double double47 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4L + "'", long46 == 4L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        long long29 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        mean35.setData(doubleArray77);
        double double82 = mean28.evaluate(doubleArray77, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean28);
        double[] doubleArray84 = mean26.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        double double59 = mean38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean69);
        mean69.increment((double) 1L);
        boolean boolean73 = mean36.equals((java.lang.Object) mean69);
        double double74 = mean36.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        mean12.setData(doubleArray65);
        mean10.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean10.copy();
        long long75 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        long long33 = mean24.getN();
        double[] doubleArray34 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean35);
        boolean boolean59 = mean11.equals((java.lang.Object) mean24);
        long long60 = mean24.getN();
        java.lang.Class<?> wildcardClass61 = mean24.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean26.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        double[] doubleArray71 = mean69.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNull(doubleArray71);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean55.copy();
        double[] doubleArray57 = mean55.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNull(doubleArray57);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        mean0.increment((-0.5d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean60);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        mean34.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        mean34.setData(doubleArray76);
        double double79 = mean19.evaluate(doubleArray76);
        long long80 = mean19.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean1.setData(doubleArray91);
        mean1.clear();
        double[] doubleArray99 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        double[] doubleArray68 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        mean15.increment((double) (byte) 1);
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        java.lang.Class<?> wildcardClass39 = mean38.getClass();
        boolean boolean40 = mean15.equals((java.lang.Object) wildcardClass39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        double[] doubleArray66 = mean41.getData();
        double double67 = mean15.evaluate(doubleArray66);
        mean14.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean14.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double43 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        boolean boolean57 = mean42.equals((java.lang.Object) mean45);
        mean42.increment((double) (byte) 0);
        boolean boolean60 = mean0.equals((java.lang.Object) mean42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        mean3.increment(1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean1.copy();
        mean46.increment(0.25d);
        mean46.clear();
        mean46.increment(50.125d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(mean46);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        mean0.increment((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double66 = mean25.evaluate(doubleArray64);
        double double67 = mean0.evaluate(doubleArray64);
        double double68 = mean0.evaluate();
        double double69 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        long long50 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean51);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = mean51.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(mean51);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        double double33 = mean10.getResult();
        double double34 = mean10.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean56);
        mean56.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean56.copy();
        boolean boolean62 = mean24.equals((java.lang.Object) mean56);
        long long63 = mean24.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        double[] doubleArray12 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        double[] doubleArray52 = new double[] { 0L, (-1), (short) 1 };
        mean36.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean36);
        double[] doubleArray55 = mean36.getData();
        boolean boolean56 = mean0.equals((java.lang.Object) doubleArray55);
        double double57 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        mean10.increment((double) 10.0f);
        mean10.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        long long36 = mean29.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean60.increment(100.0d);
        double[] doubleArray76 = new double[] { 0L, (-1), (short) 1 };
        mean60.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean60);
        long long79 = mean60.getN();
        double[] doubleArray80 = mean60.getData();
        mean29.setData(doubleArray80);
        mean26.incrementAll(doubleArray80);
        mean10.incrementAll(doubleArray80);
        long long84 = mean10.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 6L + "'", long84 == 6L);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double double66 = mean56.getResult();
        boolean boolean67 = mean0.equals((java.lang.Object) mean56);
        double[] doubleArray68 = mean56.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(doubleArray68);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        mean0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double71 = mean70.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        mean12.setData(doubleArray65);
        mean10.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean10.copy();
        double double75 = mean74.evaluate();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        double double80 = mean36.getResult();
        java.lang.Class<?> wildcardClass81 = mean36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        double[] doubleArray56 = mean52.getData();
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean33.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double68 = mean67.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        double double60 = mean44.evaluate();
        mean44.increment(3.666666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean44.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(mean63);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double[] doubleArray13 = mean12.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        double[] doubleArray50 = mean49.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean49.copy();
        boolean boolean52 = mean0.equals((java.lang.Object) mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        mean53.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean65.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean65.copy();
        double[] doubleArray94 = mean93.getData();
        mean53.setData(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray94, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        double double14 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean24.clear();
        mean24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean24.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        double[] doubleArray53 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean55.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNull(doubleArray53);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        long long38 = mean29.getN();
        double[] doubleArray39 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean40);
        mean40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        mean40.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean68.increment(100.0d);
        double[] doubleArray84 = new double[] { 0L, (-1), (short) 1 };
        mean68.setData(doubleArray84);
        mean40.setData(doubleArray84);
        mean27.incrementAll(doubleArray84);
        double[] doubleArray88 = mean27.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray88);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        long long25 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        long long49 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        mean60.incrementAll(doubleArray79);
        double double83 = mean26.evaluate(doubleArray79);
        mean14.setData(doubleArray79);
        double double85 = mean14.evaluate();
        mean14.clear();
        double[] doubleArray87 = mean14.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray87, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean23.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean44);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        double double36 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean61);
        mean50.increment((double) 0L);
        boolean boolean65 = mean0.equals((java.lang.Object) 0L);
        long long66 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        mean76.incrementAll(doubleArray83);
        double double89 = mean0.evaluate(doubleArray83);
        java.lang.Class<?> wildcardClass90 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        long long11 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(mean12);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        long long11 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        long long24 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        mean35.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        double double79 = mean58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double[] doubleArray87 = new double[] {};
        mean80.incrementAll(doubleArray87);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean80.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean89);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean35.copy();
        long long93 = mean92.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean92.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 4L + "'", long93 == 4L);
        org.junit.Assert.assertNotNull(mean94);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        mean22.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        long long11 = mean0.getN();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        mean36.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean36);
        double[] doubleArray40 = mean36.getData();
        double double41 = mean36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        mean42.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean42);
        mean66.increment((double) (short) 100);
        boolean boolean69 = mean36.equals((java.lang.Object) mean66);
        double[] doubleArray70 = mean66.getData();
        mean0.incrementAll(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(mean77);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        double[] doubleArray24 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        double double49 = mean14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean50.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        boolean boolean64 = mean14.equals((java.lang.Object) mean50);
        long long65 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean66);
        double[] doubleArray68 = mean66.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNull(doubleArray68);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        double[] doubleArray32 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        double double46 = mean45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        mean57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean57.setData(doubleArray64);
        mean45.incrementAll(doubleArray64, (int) (byte) 1, 0);
        mean34.incrementAll(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        double[] doubleArray26 = mean25.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean25.copy();
        java.lang.Class<?> wildcardClass28 = mean27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        double double60 = mean44.evaluate();
        double double61 = mean44.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double[] doubleArray39 = new double[] {};
        mean32.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        mean32.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        mean51.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        mean70.incrementAll(doubleArray86);
        double double91 = mean32.evaluate(doubleArray67, doubleArray86, (int) (byte) 0, (int) (byte) 1);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean0.copy();
        double double94 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        long long30 = mean18.getN();
        long long31 = mean18.getN();
        mean18.increment(28.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        long long37 = mean26.getN();
        double double38 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean39.increment(100.0d);
        double[] doubleArray55 = new double[] { 0L, (-1), (short) 1 };
        mean39.setData(doubleArray55);
        mean26.incrementAll(doubleArray55);
        mean0.setData(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        double[] doubleArray10 = new double[] {};
        mean3.incrementAll(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean3.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        double[] doubleArray14 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        boolean boolean25 = mean3.equals((java.lang.Object) mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean49.increment(100.0d);
        double[] doubleArray65 = new double[] { 0L, (-1), (short) 1 };
        mean49.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean49);
        long long68 = mean49.getN();
        double[] doubleArray69 = mean49.getData();
        mean3.setData(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            mean2.setData(doubleArray69, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(mean2);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        mean1.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean24.copy();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        mean28.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        mean28.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        double double94 = mean28.evaluate(doubleArray91);
        double double95 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        boolean boolean97 = mean24.equals((java.lang.Object) mean96);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean24.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(mean98);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.clear();
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray28 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        double double40 = mean39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean42.copy();
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        mean51.setData(doubleArray58);
        mean39.incrementAll(doubleArray58, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = mean0.evaluate(doubleArray28, doubleArray58, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean50.setData(doubleArray90);
        boolean boolean95 = mean49.equals((java.lang.Object) doubleArray90);
        mean0.setData(doubleArray90);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        long long15 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = mean14.copy();
        long long17 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        long long41 = mean18.getN();
        double double42 = mean18.getResult();
        double[] doubleArray43 = mean18.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean16.setData(doubleArray43, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(mean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray10 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double11 = mean5.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean5);
        long long13 = mean4.getN();
        double[] doubleArray14 = mean4.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean15.setData(doubleArray78);
        mean0.incrementAll(doubleArray78, 1, 0);
        long long90 = mean0.getN();
        double[] doubleArray91 = mean0.getData();
        mean0.increment((double) 100.0f);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.25d + "'", double11 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNull(doubleArray91);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean25);
        mean25.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double77 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(mean78);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean23.copy();
        double double44 = mean43.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        mean18.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        long long8 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        double[] doubleArray48 = new double[] { 0L, (-1), (short) 1 };
        mean32.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean32);
        long long51 = mean32.getN();
        double[] doubleArray52 = mean32.getData();
        mean1.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        boolean boolean64 = mean55.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        long long66 = mean55.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean55);
        double[] doubleArray69 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean71.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        boolean boolean81 = mean1.equals((java.lang.Object) mean71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.clear();
        long long39 = mean1.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double25 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean39.increment(100.0d);
        double[] doubleArray55 = new double[] { 0L, (-1), (short) 1 };
        mean39.setData(doubleArray55);
        mean11.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = null;
        mean58.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean58.setData(doubleArray75);
        mean58.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        mean58.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean58.copy();
        double[] doubleArray87 = mean86.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray87, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        mean0.increment(3.666666666666667d);
        double double90 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2.3333333333333335d + "'", double90 == 2.3333333333333335d);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        double[] doubleArray10 = mean9.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray10);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        mean20.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        mean20.setData(doubleArray62);
        double double67 = mean13.evaluate(doubleArray62, (int) (short) 0, 0);
        double double68 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double double70 = mean12.getResult();
        java.lang.Class<?> wildcardClass71 = mean12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        long long22 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        double double35 = mean34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean34.copy();
        boolean boolean37 = mean12.equals((java.lang.Object) mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean38.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        mean51.setData(doubleArray59);
        mean12.setData(doubleArray59);
        double double65 = mean10.evaluate(doubleArray59, (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        java.lang.Object obj41 = null;
        boolean boolean42 = mean40.equals(obj41);
        double double43 = mean40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean40.copy();
        boolean boolean45 = mean1.equals((java.lang.Object) mean40);
        mean1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        boolean boolean58 = mean49.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        mean49.clear();
        mean49.clear();
        double[] doubleArray62 = mean49.getData();
        double double63 = mean49.getResult();
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean49.copy();
        boolean boolean66 = mean1.equals((java.lang.Object) mean49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double[] doubleArray40 = new double[] {};
        mean33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        double[] doubleArray52 = null;
        mean43.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        mean54.incrementAll(doubleArray82);
        double double89 = mean43.evaluate(doubleArray82);
        mean33.setData(doubleArray82);
        mean24.incrementAll(doubleArray82);
        mean15.setData(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean15.copy();
        double double94 = mean15.evaluate();
        double[] doubleArray95 = mean15.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean13.setData(doubleArray95, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        double double90 = mean69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        mean69.increment((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean69.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment(10.0d);
        mean23.increment((double) (-1));
        double double47 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean23.copy();
        mean23.clear();
        mean23.increment(2.3333333333333335d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.5d + "'", double47 == 4.5d);
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        long long23 = mean9.getN();
        java.lang.Class<?> wildcardClass24 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4L + "'", long23 == 4L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        mean12.increment((double) 100);
        double double17 = mean12.getResult();
        mean12.increment((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean72.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        double[] doubleArray11 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        mean21.clear();
        long long23 = mean21.getN();
        boolean boolean24 = mean1.equals((java.lang.Object) long23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean1.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean25.getResult();
        double[] doubleArray47 = null;
        mean25.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean59);
        double double61 = mean59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean59);
        boolean boolean63 = mean0.equals((java.lang.Object) mean62);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        long long77 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray79 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNull(doubleArray79);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        double double79 = mean0.evaluate();
        double[] doubleArray80 = mean0.getData();
        double double81 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean23.copy();
        double[] doubleArray44 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double[] doubleArray52 = new double[] {};
        mean45.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        double[] doubleArray56 = mean45.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean45);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNull(doubleArray56);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean28.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        mean23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        boolean boolean59 = mean50.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean50.incrementAll(doubleArray90);
        mean23.incrementAll(doubleArray90);
        double[] doubleArray96 = null;
        mean23.setData(doubleArray96);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean23.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        double double93 = mean27.evaluate(doubleArray90);
        mean24.setData(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(mean24);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        boolean boolean46 = mean37.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        long long48 = mean37.getN();
        double double49 = mean37.getResult();
        mean37.increment((double) 10);
        long long52 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean37);
        mean37.clear();
        double[] doubleArray55 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean56.setData(doubleArray73);
        long long79 = mean56.getN();
        mean56.increment((double) 4L);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        long long84 = mean83.getN();
        double[] doubleArray85 = mean83.getData();
        double double88 = mean37.evaluate(doubleArray85, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray85, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4.0d + "'", double82 == 4.0d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean46.copy();
        double double49 = mean48.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        mean31.increment((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mean30);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        mean17.clear();
        double double41 = mean17.getResult();
        boolean boolean42 = mean16.equals((java.lang.Object) double41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean26.copy();
        mean26.clear();
        double[] doubleArray31 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean32.clear();
        long long56 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean32.copy();
        java.lang.Class<?> wildcardClass58 = mean32.getClass();
        boolean boolean59 = mean26.equals((java.lang.Object) mean32);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean69.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean71);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        mean35.setData(doubleArray77);
        double double82 = mean28.evaluate(doubleArray77, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean84, mean85);
        long long93 = mean84.getN();
        double double94 = mean84.getResult();
        boolean boolean95 = mean28.equals((java.lang.Object) mean84);
        long long96 = mean84.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        double double28 = mean26.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        mean15.increment((double) (byte) 1);
        double[] doubleArray26 = mean15.getData();
        mean15.increment((double) (byte) 10);
        long long29 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        long long40 = mean30.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean42.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean42.copy();
        double double53 = mean52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean52.copy();
        boolean boolean55 = mean30.equals((java.lang.Object) mean54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean56.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        mean69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        mean69.setData(doubleArray77);
        mean30.setData(doubleArray77);
        mean15.setData(doubleArray77);
        double double82 = mean14.evaluate(doubleArray77);
        java.lang.Class<?> wildcardClass83 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2L + "'", long29 == 2L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        mean1.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        mean43.increment((double) (byte) 1);
        double[] doubleArray54 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean55.copy();
        mean65.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean65);
        long long69 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean65);
        mean1.increment(25.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        boolean boolean15 = mean13.equals((java.lang.Object) (-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        double[] doubleArray27 = mean16.getData();
        long long28 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double36 = mean16.evaluate(doubleArray34);
        double double37 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean47);
        boolean boolean49 = mean13.equals((java.lang.Object) mean47);
        mean47.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean61.setData(doubleArray68);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean72);
        mean47.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(mean72);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        mean46.increment(0.25000000000000006d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        long long59 = mean50.getN();
        double[] doubleArray60 = mean50.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean61);
        mean61.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        boolean boolean88 = mean46.equals((java.lang.Object) mean87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        double[] doubleArray15 = mean14.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        mean0.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean61);
        mean61.clear();
        double[] doubleArray76 = mean61.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        double[] doubleArray70 = mean67.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNull(doubleArray70);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        double[] doubleArray39 = mean25.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = mean25.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(doubleArray39);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean15.clear();
        mean15.clear();
        double[] doubleArray28 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray35, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        long long50 = mean43.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean74.increment(100.0d);
        double[] doubleArray90 = new double[] { 0L, (-1), (short) 1 };
        mean74.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean74);
        long long93 = mean74.getN();
        double[] doubleArray94 = mean74.getData();
        mean43.setData(doubleArray94);
        mean15.setData(doubleArray94);
        double double97 = mean0.evaluate(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        mean39.setData(doubleArray81);
        mean14.incrementAll(doubleArray81);
        mean1.incrementAll(doubleArray81);
        double[] doubleArray86 = mean1.getData();
        double double87 = mean1.getResult();
        double double88 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNull(doubleArray86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        mean36.increment(4.5d);
        mean36.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        long long56 = mean37.getN();
        mean37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        boolean boolean71 = mean62.equals((java.lang.Object) (short) 1);
        double[] doubleArray72 = mean62.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean62);
        double[] doubleArray74 = mean62.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertNull(doubleArray74);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        double[] doubleArray11 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        mean19.increment((double) (byte) 1);
        double[] doubleArray30 = mean19.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        mean41.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean41);
        double[] doubleArray45 = mean41.getData();
        double double46 = mean41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        double double68 = mean41.evaluate(doubleArray65);
        double double71 = mean1.evaluate(doubleArray17, doubleArray65, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean21.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        mean32.increment((double) (byte) 1);
        double[] doubleArray43 = mean32.getData();
        long long44 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double52 = mean32.evaluate(doubleArray50);
        mean31.incrementAll(doubleArray50);
        mean10.setData(doubleArray50);
        double double55 = mean1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        mean56.increment((double) (byte) 1);
        double[] doubleArray67 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean68.copy();
        mean78.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean78);
        double double82 = mean56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean56);
        double[] doubleArray84 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean1.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(mean86);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean12.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        long long36 = mean27.getN();
        double[] doubleArray37 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean38);
        mean38.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        double[] doubleArray91 = mean90.getData();
        double double92 = mean38.evaluate(doubleArray91);
        double double93 = mean25.evaluate(doubleArray91);
        boolean boolean94 = mean0.equals((java.lang.Object) double93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        double double60 = mean14.evaluate(doubleArray53);
        boolean boolean61 = mean13.equals((java.lang.Object) mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean14.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mean62);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        mean61.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        mean21.increment((double) 10L);
        boolean boolean68 = mean0.equals((java.lang.Object) mean21);
        double[] doubleArray69 = mean0.getData();
        double[] doubleArray70 = null;
        mean0.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(doubleArray69);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean0.getResult();
        double[] doubleArray57 = mean0.getData();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(doubleArray57);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        mean0.clear();
        long long18 = mean0.getN();
        long long19 = mean0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        long long72 = mean60.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double80 = mean60.evaluate(doubleArray78);
        boolean boolean81 = mean57.equals((java.lang.Object) doubleArray78);
        double[] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean57.evaluate(doubleArray82, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        double[] doubleArray77 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean3.copy();
        double[] doubleArray79 = mean3.getData();
        java.lang.Class<?> wildcardClass80 = mean3.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean29.setData(doubleArray78);
        mean28.incrementAll(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long19 = mean18.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double[] doubleArray28 = new double[] {};
        mean21.incrementAll(doubleArray28);
        mean20.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean20.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        double double59 = mean27.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            mean25.setData(doubleArray53, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        double[] doubleArray24 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        double double59 = mean13.evaluate(doubleArray52);
        double double60 = mean12.evaluate(doubleArray52);
        java.lang.Class<?> wildcardClass61 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        mean0.increment(100.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean39.increment(100.0d);
        double[] doubleArray55 = new double[] { 0L, (-1), (short) 1 };
        mean39.setData(doubleArray55);
        mean11.setData(doubleArray55);
        java.lang.Class<?> wildcardClass58 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        long long45 = mean36.getN();
        double[] doubleArray46 = mean36.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean47);
        mean47.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean47.copy();
        double[] doubleArray75 = mean74.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double[] doubleArray83 = new double[] {};
        mean76.incrementAll(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean76.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double96 = mean86.evaluate(doubleArray92, (int) (short) 0, (int) (short) 1);
        mean85.incrementAll(doubleArray92);
        mean74.incrementAll(doubleArray92);
        mean0.setData(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        double[] doubleArray64 = mean63.getData();
        double double65 = mean11.evaluate(doubleArray64);
        mean11.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        long long14 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        long long25 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        double double38 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean37.copy();
        boolean boolean40 = mean15.equals((java.lang.Object) mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean41.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        mean54.setData(doubleArray62);
        mean15.setData(doubleArray62);
        mean0.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        double double45 = mean23.evaluate();
        double double46 = mean23.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        mean22.clear();
        mean22.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        double double79 = mean33.evaluate(doubleArray72);
        mean23.setData(doubleArray72);
        mean14.incrementAll(doubleArray72);
        mean13.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        double double14 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        double[] doubleArray40 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean64.increment(100.0d);
        double[] doubleArray80 = new double[] { 0L, (-1), (short) 1 };
        mean64.setData(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean64);
        double[] doubleArray83 = mean64.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean64.copy();
        double[] doubleArray85 = mean64.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double88 = mean13.evaluate(doubleArray40, doubleArray85, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: element 1 is negative: -1");
        } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        double[] doubleArray72 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray60 = mean59.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        java.lang.Class<?> wildcardClass29 = mean28.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        long long28 = mean26.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        long long27 = mean18.getN();
        double[] doubleArray28 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean29.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean29);
        double double53 = mean18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean54.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        boolean boolean68 = mean18.equals((java.lang.Object) mean54);
        mean54.increment((double) 0);
        java.lang.Class<?> wildcardClass71 = mean54.getClass();
        boolean boolean72 = mean0.equals((java.lang.Object) mean54);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean45);
        long long55 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        boolean boolean66 = mean57.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        mean68.increment((double) (byte) 1);
        double[] doubleArray79 = mean68.getData();
        long long80 = mean68.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double88 = mean68.evaluate(doubleArray86);
        double double89 = mean67.evaluate(doubleArray86);
        mean54.setData(doubleArray86);
        double double91 = mean36.evaluate(doubleArray86);
        double double92 = mean0.evaluate(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        double[] doubleArray85 = null;
        mean74.setData(doubleArray85);
        boolean boolean87 = mean51.equals((java.lang.Object) doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean51);
        double[] doubleArray89 = null;
        mean51.setData(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        boolean boolean27 = mean0.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean11.clear();
        double[] doubleArray13 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double double37 = mean11.getResult();
        double[] doubleArray38 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean11.copy();
        mean11.increment((double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(mean39);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double29 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        boolean boolean40 = mean31.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        mean31.clear();
        boolean boolean43 = mean28.equals((java.lang.Object) mean31);
        double double44 = mean28.getResult();
        boolean boolean45 = mean9.equals((java.lang.Object) double44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean46.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        long long93 = mean70.getN();
        double double94 = mean70.getResult();
        long long95 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean96);
        double[] doubleArray98 = mean46.getData();
        mean9.setData(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        mean21.clear();
        mean21.increment((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean21.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean10.copy();
        double[] doubleArray83 = mean10.getData();
        double[] doubleArray84 = mean10.getData();
        double[] doubleArray85 = null;
        mean10.setData(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean22.copy();
        long long80 = mean79.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean79.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean81);
        double[] doubleArray83 = mean81.getData();
        mean81.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean81.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 4L + "'", long80 == 4L);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertNotNull(mean85);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) ' ');
        mean0.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean0.getResult();
        double[] doubleArray17 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        mean18.incrementAll(doubleArray34);
        double double37 = mean18.getResult();
        mean18.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean42.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean42.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        mean53.increment((double) (byte) 1);
        double[] doubleArray64 = mean53.getData();
        long long65 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double73 = mean53.evaluate(doubleArray71);
        mean52.incrementAll(doubleArray71);
        mean18.incrementAll(doubleArray71);
        mean0.setData(doubleArray71);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean9.incrementAll(doubleArray30);
        double double37 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.4d + "'", double37 == 0.4d);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double27 = mean0.evaluate();
        java.lang.Class<?> wildcardClass28 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean18.copy();
        mean18.increment((-0.5d));
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(mean19);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        double double77 = mean1.getResult();
        mean1.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.increment(50.5d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean36.copy();
        double[] doubleArray82 = mean81.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean81.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNull(doubleArray82);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        double[] doubleArray77 = null;
        mean1.setData(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        double double19 = mean0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        double double28 = mean27.evaluate();
        double double29 = mean27.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        mean24.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        mean34.increment((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        double double48 = mean23.getResult();
        double double49 = mean23.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean0.copy();
        double[] doubleArray69 = mean68.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNull(doubleArray69);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        long long28 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        boolean boolean39 = mean30.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        double[] doubleArray52 = mean41.getData();
        long long53 = mean41.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double61 = mean41.evaluate(doubleArray59);
        double double62 = mean40.evaluate(doubleArray59);
        mean27.setData(doubleArray59);
        mean1.incrementAll(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        mean0.increment((double) 1.0f);
        mean0.clear();
        long long40 = mean0.getN();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        double double62 = mean48.evaluate(doubleArray55, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        java.lang.Class<?> wildcardClass65 = mean37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        double double60 = mean0.evaluate();
        long long61 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        java.lang.Class<?> wildcardClass13 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        double double72 = mean58.evaluate(doubleArray65, 1, (int) (byte) 1);
        double double73 = mean0.evaluate(doubleArray65);
        double double74 = mean0.getResult();
        java.lang.Object obj75 = null;
        boolean boolean76 = mean0.equals(obj75);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.2d + "'", double74 == 0.2d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        double[] doubleArray47 = mean44.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        mean18.incrementAll(doubleArray34);
        double double37 = mean0.evaluate(doubleArray34);
        boolean boolean39 = mean0.equals((java.lang.Object) 50.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long13 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        mean0.setData(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        mean30.increment((double) (byte) 1);
        double[] doubleArray41 = mean30.getData();
        long long42 = mean30.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double50 = mean30.evaluate(doubleArray48);
        double double51 = mean30.getResult();
        double[] doubleArray52 = null;
        mean30.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        boolean boolean55 = mean1.equals((java.lang.Object) mean30);
        long long56 = mean30.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean30.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(mean57);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        mean0.increment((double) 10.0f);
        mean0.increment(75.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean15.copy();
        mean15.increment((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(mean42);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean24.copy();
        mean24.clear();
        long long28 = mean24.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double[] doubleArray39 = new double[] {};
        mean32.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        mean32.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        mean51.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double[] doubleArray77 = new double[] {};
        mean70.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        mean70.incrementAll(doubleArray86);
        double double91 = mean32.evaluate(doubleArray67, doubleArray86, (int) (byte) 0, (int) (byte) 1);
        mean0.incrementAll(doubleArray67);
        double double93 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double46 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        double[] doubleArray60 = mean47.getData();
        boolean boolean61 = mean23.equals((java.lang.Object) mean47);
        mean47.increment((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        mean49.incrementAll(doubleArray68);
        double double72 = mean15.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        mean73.setData(doubleArray79);
        double[] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean0.evaluate(doubleArray79, doubleArray82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        mean24.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        boolean boolean63 = mean51.equals((java.lang.Object) mean61);
        boolean boolean64 = mean10.equals((java.lang.Object) mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        mean51.increment((double) 1);
        java.lang.Class<?> wildcardClass68 = mean51.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        boolean boolean82 = mean0.equals((java.lang.Object) mean81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double84 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        mean17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        mean42.incrementAll(doubleArray70);
        mean17.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean78.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean78);
        mean78.clear();
        double double94 = mean78.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        long long56 = mean37.getN();
        mean37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        mean62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean62);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(mean62);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean77.copy();
        double[] doubleArray89 = mean88.getData();
        mean88.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean88);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNull(doubleArray89);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        long long38 = mean29.getN();
        double[] doubleArray39 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean40);
        mean40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean67.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        double[] doubleArray93 = mean92.getData();
        double double94 = mean40.evaluate(doubleArray93);
        double double95 = mean22.evaluate(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.incrementAll(doubleArray77);
        mean0.setData(doubleArray77);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        long long60 = mean37.getN();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean37.setData(doubleArray69);
        double[] doubleArray72 = mean37.getData();
        double double73 = mean0.evaluate(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        double[] doubleArray41 = mean39.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean39.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(mean43);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        double[] doubleArray74 = null;
        mean1.setData(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        long long14 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean58.copy();
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean58.setData(doubleArray61, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mean60);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        boolean boolean29 = mean20.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean20.copy();
        long long31 = mean20.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        long long55 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        mean66.incrementAll(doubleArray85);
        double double89 = mean32.evaluate(doubleArray85);
        mean20.setData(doubleArray85);
        mean17.setData(doubleArray85);
        java.lang.Class<?> wildcardClass92 = mean17.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        double double11 = mean0.getResult();
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        mean18.clear();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double[] doubleArray86 = new double[] {};
        mean79.incrementAll(doubleArray86);
        mean44.setData(doubleArray86);
        mean31.setData(doubleArray86);
        mean18.setData(doubleArray86);
        double[] doubleArray91 = mean18.getData();
        double double92 = mean1.evaluate(doubleArray91);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = mean95.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(mean94);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        mean0.increment((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean23.copy();
        double double44 = mean43.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean34.copy();
        double[] doubleArray36 = mean35.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray36);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean21.copy();
        double double34 = mean21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean21);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        double double80 = mean36.getResult();
        long long81 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean82);
        long long84 = mean83.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        mean19.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double[] doubleArray72 = new double[] {};
        mean65.incrementAll(doubleArray72);
        mean30.setData(doubleArray72);
        double double77 = mean23.evaluate(doubleArray72, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean78.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean78);
        double double81 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean0.copy();
        mean88.increment(0.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(mean88);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.incrementAll(doubleArray77);
        mean0.setData(doubleArray77);
        long long83 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean76.clear();
        mean76.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean76.copy();
        mean79.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(mean79);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        double[] doubleArray37 = mean11.getData();
        double double38 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        mean48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        mean48.setData(doubleArray55);
        mean48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        mean68.clear();
        mean68.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        double[] doubleArray81 = null;
        mean72.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double93 = mean83.evaluate(doubleArray89, (int) (short) 0, (int) (short) 1);
        mean72.setData(doubleArray89);
        mean68.incrementAll(doubleArray89);
        mean48.setData(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            mean11.incrementAll(doubleArray89, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        java.lang.Class<?> wildcardClass36 = mean35.getClass();
        boolean boolean37 = mean12.equals((java.lang.Object) wildcardClass36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        mean60.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean60);
        double[] doubleArray67 = new double[] { 100, 1, (byte) 100 };
        mean60.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean60);
        double[] doubleArray72 = new double[] { 52.0d, 4.0d };
        double double73 = mean69.evaluate(doubleArray72);
        double[] doubleArray74 = mean69.getData();
        mean12.incrementAll(doubleArray74);
        mean9.incrementAll(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 28.0d + "'", double73 == 28.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        java.lang.Class<?> wildcardClass68 = mean67.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        double[] doubleArray48 = mean46.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        mean0.increment((double) 10.0f);
        double double11 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        mean12.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        mean12.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        mean57.increment((double) (byte) 1);
        double[] doubleArray68 = mean57.getData();
        long long69 = mean57.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double77 = mean57.evaluate(doubleArray75);
        double double78 = mean12.evaluate(doubleArray75);
        mean0.setData(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        mean9.increment((double) 1L);
        mean9.clear();
        mean9.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        java.lang.Object obj23 = null;
        boolean boolean24 = mean22.equals(obj23);
        double double25 = mean22.getResult();
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        double[] doubleArray38 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        mean49.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean49);
        double[] doubleArray56 = new double[] { 100, 1, (byte) 100 };
        mean49.setData(doubleArray56);
        mean22.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean11.evaluate(doubleArray56, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        double[] doubleArray14 = mean13.getData();
        mean13.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean1.copy();
        double[] doubleArray47 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean46.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        long long51 = mean24.getN();
        mean24.increment(Double.NaN);
        double double54 = mean24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean24.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(mean56);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        double double63 = mean61.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double double51 = mean24.getResult();
        mean24.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean20.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double65 = mean55.evaluate(doubleArray61, (int) (short) 0, (int) (short) 1);
        mean44.setData(doubleArray61);
        mean33.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        mean33.setData(doubleArray75);
        mean20.setData(doubleArray75);
        double double79 = mean0.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean80);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(mean80);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = mean49.evaluate(doubleArray56, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean68.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean68.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        long long8 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        double double26 = mean16.evaluate(doubleArray22, (int) (short) 0, (int) (short) 1);
        mean16.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        long long40 = mean31.getN();
        double[] doubleArray41 = mean31.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean42);
        mean42.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        double[] doubleArray78 = null;
        mean69.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray86 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double87 = mean81.evaluate(doubleArray86);
        double double90 = mean80.evaluate(doubleArray86, (int) (short) 0, (int) (short) 1);
        mean69.setData(doubleArray86);
        mean69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        double[] doubleArray95 = mean94.getData();
        double double96 = mean42.evaluate(doubleArray95);
        double double97 = mean29.evaluate(doubleArray95);
        mean1.incrementAll(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.25d + "'", double97 == 0.25d);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        mean24.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        mean44.clear();
        mean44.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean44.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean72.copy();
        double[] doubleArray75 = mean74.getData();
        mean74.increment((double) (byte) 0);
        mean74.clear();
        double[] doubleArray79 = mean74.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean74);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        double[] doubleArray30 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        mean32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double[] doubleArray52 = new double[] {};
        mean45.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        mean45.incrementAll(doubleArray61);
        double double64 = mean44.evaluate(doubleArray61);
        double double65 = mean1.evaluate(doubleArray61);
        long long66 = mean1.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        mean28.clear();
        double double69 = mean28.getResult();
        double double70 = mean28.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        double double38 = mean24.evaluate(doubleArray31, 1, (int) (byte) 1);
        mean9.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        double double41 = mean9.getResult();
        double double42 = mean9.getResult();
        double[] doubleArray43 = mean9.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray43);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        double double34 = mean19.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean23.copy();
        double[] doubleArray44 = mean43.getData();
        double double45 = mean43.evaluate();
        double double46 = mean43.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray13 = null;
        mean12.setData(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        mean58.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        double[] doubleArray51 = new double[] { 0L, (-1), (short) 1 };
        mean35.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean35);
        long long54 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean35.copy();
        mean56.clear();
        mean56.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(mean56);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        double double24 = mean10.evaluate(doubleArray17, 1, (int) (byte) 1);
        double double25 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        long long60 = mean37.getN();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean37);
        long long63 = mean26.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        double double65 = mean64.getResult();
        mean64.increment((double) 10L);
        boolean boolean68 = mean10.equals((java.lang.Object) 10L);
        java.lang.Class<?> wildcardClass69 = mean10.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        mean21.increment((double) 10L);
        boolean boolean68 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean21.copy();
        mean21.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mean69);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        java.lang.Class<?> wildcardClass26 = mean25.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean27.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        mean27.setData(doubleArray69);
        mean14.setData(doubleArray69);
        mean1.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double95 = mean85.evaluate(doubleArray91, (int) (short) 0, (int) (short) 1);
        mean74.setData(doubleArray91);
        mean1.setData(doubleArray91);
        mean1.increment((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        mean48.clear();
        boolean boolean50 = mean38.equals((java.lang.Object) mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.increment((double) (byte) 1);
        mean38.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double43 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        boolean boolean57 = mean42.equals((java.lang.Object) mean45);
        mean42.increment((double) (byte) 0);
        boolean boolean60 = mean0.equals((java.lang.Object) mean42);
        long long61 = mean42.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        mean72.incrementAll(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            mean42.incrementAll(doubleArray91, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        double double14 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double72 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray11, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) (short) -1);
        double[] doubleArray15 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double17 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        boolean boolean31 = mean16.equals((java.lang.Object) mean19);
        long long32 = mean16.getN();
        double double33 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        boolean boolean44 = mean35.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean35.clear();
        mean35.clear();
        boolean boolean48 = mean16.equals((java.lang.Object) mean35);
        long long49 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double[] doubleArray92 = new double[] {};
        mean85.incrementAll(doubleArray92);
        mean50.setData(doubleArray92);
        double double95 = mean35.evaluate(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        mean97.increment(10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        mean50.setData(doubleArray57);
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean50.copy();
        double[] doubleArray62 = mean61.getData();
        mean39.setData(doubleArray62, 1, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        mean0.increment((double) (short) -1);
        double[] doubleArray15 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double17 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        boolean boolean31 = mean16.equals((java.lang.Object) mean19);
        long long32 = mean16.getN();
        double double33 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        boolean boolean44 = mean35.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean35.clear();
        mean35.clear();
        boolean boolean48 = mean16.equals((java.lang.Object) mean35);
        long long49 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double[] doubleArray92 = new double[] {};
        mean85.incrementAll(doubleArray92);
        mean50.setData(doubleArray92);
        double double95 = mean35.evaluate(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        mean97.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        boolean boolean55 = mean41.equals((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean41.copy();
        long long57 = mean41.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean3.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double62 = mean52.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        mean41.setData(doubleArray58);
        mean30.incrementAll(doubleArray58);
        double double65 = mean19.evaluate(doubleArray58);
        mean9.setData(doubleArray58);
        mean0.incrementAll(doubleArray58);
        double[] doubleArray68 = mean0.getData();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        mean93.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean93);
        double double97 = mean71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean71);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
        org.junit.Assert.assertNotNull(mean98);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean9.copy();
        mean9.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(mean20);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) 100L);
        double double76 = mean0.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.5d + "'", double76 == 50.5d);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray25 = mean24.getData();
        mean24.increment((double) '#');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNull(doubleArray25);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean49.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double43 = mean42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        boolean boolean57 = mean42.equals((java.lang.Object) mean45);
        mean42.increment((double) (byte) 0);
        boolean boolean60 = mean0.equals((java.lang.Object) mean42);
        mean42.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long19 = mean18.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean18.copy();
        mean20.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(mean20);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        mean9.increment((double) 1.0f);
        mean9.increment(3.666666666666667d);
        double[] doubleArray15 = mean9.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        java.lang.Object obj21 = null;
        boolean boolean22 = mean9.equals(obj21);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        mean84.clear();
        mean84.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        double double57 = mean46.evaluate(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        double[] doubleArray67 = null;
        mean46.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean46);
        double[] doubleArray70 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        double[] doubleArray80 = null;
        mean71.setData(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        mean71.setData(doubleArray88);
        mean71.clear();
        long long95 = mean71.getN();
        double[] doubleArray96 = mean71.getData();
        mean13.setData(doubleArray96);
        boolean boolean98 = mean0.equals((java.lang.Object) doubleArray96);
        java.lang.Class<?> wildcardClass99 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        long long26 = mean24.getN();
        mean24.increment(50.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        boolean boolean39 = mean30.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean30);
        mean30.increment((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = mean30.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mean40);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        double[] doubleArray14 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        mean15.incrementAll(doubleArray31);
        double double34 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean59.setData(doubleArray76);
        mean48.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        mean48.setData(doubleArray90);
        mean35.setData(doubleArray90);
        double double94 = mean15.evaluate(doubleArray90);
        mean0.setData(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.increment(100.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        mean0.increment((-0.5d));
        double double60 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-0.5d) + "'", double60 == (-0.5d));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        double double45 = mean31.evaluate(doubleArray38, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean55.incrementAll(doubleArray62);
        mean31.setData(doubleArray62);
        double double69 = mean20.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        long long80 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        boolean boolean82 = mean20.equals((java.lang.Object) mean70);
        mean20.increment((double) 2L);
        double double85 = mean20.evaluate();
        java.lang.Class<?> wildcardClass86 = mean20.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray29 = new double[] { 100, 1, (byte) 100 };
        mean22.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        double[] doubleArray34 = new double[] { 52.0d, 4.0d };
        double double35 = mean31.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean31.equals((java.lang.Object) mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        double[] doubleArray72 = null;
        mean63.setData(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean63.setData(doubleArray80);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = mean63.copy();
        double[] doubleArray92 = mean91.getData();
        mean51.setData(doubleArray92);
        mean31.setData(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 28.0d + "'", double35 == 28.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(mean90);
        org.junit.Assert.assertNotNull(mean91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        double double14 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        mean61.increment(50.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean12.copy();
        long long15 = mean12.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray34 = mean33.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        boolean boolean82 = mean73.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean73.copy();
        long long84 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean73.copy();
        mean73.increment(1.0d);
        boolean boolean88 = mean0.equals((java.lang.Object) mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double90 = mean89.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        java.lang.Class<?> wildcardClass81 = mean36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        double[] doubleArray29 = mean28.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
    }
}


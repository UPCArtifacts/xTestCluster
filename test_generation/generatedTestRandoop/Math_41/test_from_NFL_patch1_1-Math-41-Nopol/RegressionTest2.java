import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        mean25.increment((double) (byte) 1);
        double[] doubleArray36 = mean25.getData();
        long long37 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double45 = mean25.evaluate(doubleArray43);
        double double46 = mean24.evaluate(doubleArray43);
        mean0.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long49 = mean0.getN();
        double double50 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5L + "'", long49 == 5L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.2d + "'", double50 == 0.2d);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        mean26.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        mean38.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        boolean boolean61 = mean52.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean52.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean63.increment((double) (byte) 1);
        double[] doubleArray74 = mean63.getData();
        long long75 = mean63.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double83 = mean63.evaluate(doubleArray81);
        double double84 = mean62.evaluate(doubleArray81);
        mean38.incrementAll(doubleArray81);
        mean26.incrementAll(doubleArray81);
        double double87 = mean25.evaluate(doubleArray81);
        boolean boolean88 = mean11.equals((java.lang.Object) mean25);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        boolean boolean45 = mean0.equals((java.lang.Object) mean36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        mean11.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        double[] doubleArray50 = mean39.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        boolean boolean61 = mean39.equals((java.lang.Object) mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        double[] doubleArray73 = null;
        mean64.setData(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        mean64.setData(doubleArray81);
        long long87 = mean64.getN();
        mean64.increment((double) 4L);
        boolean boolean91 = mean64.equals((java.lang.Object) (byte) 0);
        double[] doubleArray92 = mean64.getData();
        mean63.incrementAll(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            mean11.setData(doubleArray92, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        mean34.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean34);
        double[] doubleArray38 = mean34.getData();
        double[] doubleArray39 = mean34.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        mean50.setData(doubleArray57);
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean61);
        mean34.clear();
        double double64 = mean34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        long long74 = mean65.getN();
        mean65.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double[] doubleArray84 = new double[] {};
        mean77.incrementAll(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray93 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double94 = mean88.evaluate(doubleArray93);
        mean77.incrementAll(doubleArray93);
        double double96 = mean65.evaluate(doubleArray93);
        mean34.setData(doubleArray93);
        mean9.setData(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean23.incrementAll(doubleArray88);
        mean22.incrementAll(doubleArray88);
        mean0.incrementAll(doubleArray88);
        long long95 = mean0.getN();
        mean0.increment((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 4L + "'", long95 == 4L);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        mean36.clear();
        mean36.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean23.incrementAll(doubleArray88);
        mean22.incrementAll(doubleArray88);
        boolean boolean94 = mean10.equals((java.lang.Object) doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = mean10.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mean95);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        double[] doubleArray28 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        mean26.increment((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        mean0.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean76.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(mean75);
        org.junit.Assert.assertNotNull(mean77);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        double[] doubleArray28 = mean26.getData();
        mean26.increment((double) '4');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean54.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        double[] doubleArray79 = mean54.getData();
        mean41.setData(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        double[] doubleArray27 = mean16.getData();
        long long28 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double36 = mean16.evaluate(doubleArray34);
        double double37 = mean16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean16.copy();
        long long50 = mean49.getN();
        boolean boolean51 = mean1.equals((java.lang.Object) long50);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        mean25.increment(50.5d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        mean48.clear();
        double double50 = mean48.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean24.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        mean24.setData(doubleArray66);
        mean24.clear();
        double[] doubleArray70 = mean24.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double73 = mean23.evaluate(doubleArray70, (int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        java.lang.Class<?> wildcardClass46 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double[] doubleArray68 = mean0.getData();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = mean23.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        long long27 = mean18.getN();
        double[] doubleArray28 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean29.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean29);
        mean29.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean29.copy();
        double[] doubleArray57 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double[] doubleArray65 = new double[] {};
        mean58.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean67.incrementAll(doubleArray74);
        mean56.incrementAll(doubleArray74);
        double double81 = mean1.evaluate(doubleArray74);
        double[] doubleArray82 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        long long46 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean47.clear();
        boolean boolean71 = mean37.equals((java.lang.Object) mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        double double84 = mean47.evaluate(doubleArray79);
        boolean boolean85 = mean10.equals((java.lang.Object) double84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        java.lang.Class<?> wildcardClass45 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        boolean boolean21 = mean12.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        double double44 = mean22.evaluate(doubleArray41);
        mean9.setData(doubleArray41);
        mean9.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        mean21.increment((double) 10L);
        boolean boolean68 = mean0.equals((java.lang.Object) mean21);
        double[] doubleArray69 = mean0.getData();
        double[] doubleArray70 = null;
        mean0.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(doubleArray69);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        long long54 = mean36.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        mean34.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean53.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean72.incrementAll(doubleArray88);
        double double93 = mean34.evaluate(doubleArray69, doubleArray88, (int) (byte) 0, (int) (byte) 1);
        mean19.incrementAll(doubleArray88, (int) (byte) 0, (int) (short) 0);
        long long97 = mean19.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        mean27.increment(0.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment(10.0d);
        mean23.increment((double) (-1));
        double double47 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean23.copy();
        mean23.clear();
        double double50 = mean23.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.5d + "'", double47 == 4.5d);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = mean25.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean15.incrementAll(doubleArray48, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        java.lang.Class<?> wildcardClass20 = mean19.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray26 = mean25.getData();
        long long27 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        long long37 = mean28.getN();
        double[] doubleArray38 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean39.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        mean66.increment((double) 10);
        boolean boolean69 = mean25.equals((java.lang.Object) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        mean0.increment((double) 10.0f);
        double double11 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        long long21 = mean12.getN();
        double[] doubleArray22 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        mean50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        mean61.clear();
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        double double88 = mean74.evaluate(doubleArray81, 1, (int) (byte) 1);
        mean61.setData(doubleArray81);
        mean49.setData(doubleArray81);
        double double93 = mean0.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-1.0d) + "'", double88 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        double double72 = mean71.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        long long35 = mean26.getN();
        double[] doubleArray36 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean37);
        double double61 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        mean72.incrementAll(doubleArray91);
        mean26.incrementAll(doubleArray91);
        mean25.incrementAll(doubleArray91);
        mean0.incrementAll(doubleArray91);
        double[] doubleArray98 = mean0.getData();
        double[] doubleArray99 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertNull(doubleArray98);
        org.junit.Assert.assertNull(doubleArray99);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean0.setData(doubleArray77);
        java.lang.Class<?> wildcardClass84 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean70.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean71);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        mean69.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double39 = mean0.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        double[] doubleArray81 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean53.copy();
        double[] doubleArray83 = mean53.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNull(doubleArray83);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        mean48.clear();
        mean48.increment(10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = mean27.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean70.copy();
        double[] doubleArray73 = null;
        mean70.setData(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean72);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        boolean boolean27 = mean18.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        mean18.clear();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double[] doubleArray86 = new double[] {};
        mean79.incrementAll(doubleArray86);
        mean44.setData(doubleArray86);
        mean31.setData(doubleArray86);
        mean18.setData(doubleArray86);
        double[] doubleArray91 = mean18.getData();
        double double92 = mean1.evaluate(doubleArray91);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean1.copy();
        double double95 = mean94.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(mean94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        java.lang.Class<?> wildcardClass71 = mean69.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        double[] doubleArray14 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNull(doubleArray14);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        double double35 = mean34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean59);
        long long78 = mean59.getN();
        mean59.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean81.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean83.copy();
        mean84.clear();
        boolean boolean86 = mean34.equals((java.lang.Object) mean84);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        long long51 = mean0.getN();
        long long52 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        mean0.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment(4.5d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        double double61 = mean35.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        double double29 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        long long31 = mean30.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        mean9.setData(doubleArray50);
        java.lang.Class<?> wildcardClass58 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        mean26.increment((double) 4L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean0.copy();
        double[] doubleArray99 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mean98);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        long long35 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        java.lang.Class<?> wildcardClass37 = mean36.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = mean0.copy();
        mean0.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        double[] doubleArray48 = new double[] { 0L, (-1), (short) 1 };
        mean32.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean32);
        long long51 = mean32.getN();
        mean32.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean32);
        mean32.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(mean6);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        double double68 = mean10.getResult();
        double double69 = mean10.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        long long21 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean22.clear();
        boolean boolean46 = mean12.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double48 = mean47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        boolean boolean59 = mean50.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        mean50.clear();
        boolean boolean62 = mean47.equals((java.lang.Object) mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        double[] doubleArray72 = null;
        mean63.setData(doubleArray72);
        double[] doubleArray74 = mean63.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean63);
        boolean boolean77 = mean12.equals((java.lang.Object) mean47);
        boolean boolean78 = mean11.equals((java.lang.Object) mean47);
        double double79 = mean47.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = mean0.copy();
        mean0.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean9.copy();
        mean18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        mean18.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        mean38.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        mean38.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean66.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        boolean boolean90 = mean66.equals((java.lang.Object) doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray87, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(mean6);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(mean18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long28 = mean27.getN();
        double[] doubleArray29 = mean27.getData();
        double double30 = mean27.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        mean42.incrementAll(doubleArray70);
        double double77 = mean31.evaluate(doubleArray70);
        mean27.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean79, mean80);
        boolean boolean89 = mean80.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean80.copy();
        long long91 = mean80.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean80.copy();
        boolean boolean94 = mean92.equals((java.lang.Object) (-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mean90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean0.copy();
        long long34 = mean33.getN();
        mean33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        double[] doubleArray61 = mean36.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean33.setData(doubleArray61, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        double double30 = mean18.getResult();
        double double31 = mean18.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        mean45.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean23.copy();
        boolean boolean50 = mean21.equals((java.lang.Object) mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        boolean boolean84 = mean21.equals((java.lang.Object) mean61);
        java.lang.Class<?> wildcardClass85 = mean61.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        double double33 = mean1.evaluate(doubleArray27);
        double[] doubleArray34 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean1.copy();
        double double36 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        mean36.incrementAll(doubleArray55);
        mean15.incrementAll(doubleArray55);
        double double60 = mean10.evaluate(doubleArray55);
        mean10.increment((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double[] doubleArray21 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        double[] doubleArray29 = mean28.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = mean28.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        double double37 = mean10.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean27.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        double[] doubleArray27 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean16);
        double[] doubleArray30 = mean16.getData();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        long long11 = mean2.getN();
        double[] doubleArray12 = mean2.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        double[] doubleArray68 = null;
        mean59.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean59.setData(doubleArray76);
        mean48.incrementAll(doubleArray76);
        double double83 = mean37.evaluate(doubleArray76);
        mean13.setData(doubleArray76);
        double double85 = mean0.evaluate(doubleArray76);
        mean0.increment((double) 100L);
        java.lang.Class<?> wildcardClass88 = mean0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        double[] doubleArray28 = mean13.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        double[] doubleArray37 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean38.copy();
        mean65.clear();
        boolean boolean67 = mean10.equals((java.lang.Object) mean65);
        double[] doubleArray68 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean69.copy();
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        mean78.setData(doubleArray85);
        mean78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean78.copy();
        double[] doubleArray90 = mean89.getData();
        mean10.setData(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean51.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        mean62.increment((double) (byte) 1);
        double[] doubleArray73 = mean62.getData();
        long long74 = mean62.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double82 = mean62.evaluate(doubleArray80);
        mean61.incrementAll(doubleArray80);
        double double84 = mean36.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean36.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertNotNull(mean85);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean22.copy();
        double double80 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean0.evaluate(doubleArray82, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean57);
        mean57.increment((double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.incrementAll(doubleArray77);
        mean0.setData(doubleArray77);
        double double83 = mean0.getResult();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double46 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        double[] doubleArray60 = mean47.getData();
        boolean boolean61 = mean23.equals((java.lang.Object) mean47);
        double[] doubleArray62 = null;
        mean23.setData(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        double[] doubleArray17 = new double[] {};
        mean10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        mean31.incrementAll(doubleArray59);
        double double66 = mean20.evaluate(doubleArray59);
        mean10.setData(doubleArray59);
        mean0.incrementAll(doubleArray59);
        mean0.increment(2.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(mean19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        long long26 = mean25.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double59 = mean58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = mean61.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        double double93 = mean61.evaluate(doubleArray87);
        mean58.setData(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        long long16 = mean15.getN();
        mean15.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        double[] doubleArray15 = mean14.getData();
        mean14.increment((double) 0.0f);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        mean19.increment((double) (byte) 1);
        mean19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double[] doubleArray40 = new double[] {};
        mean33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean33.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean42.incrementAll(doubleArray49);
        mean32.setData(doubleArray49, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        boolean boolean68 = mean59.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        mean59.clear();
        mean59.clear();
        double[] doubleArray72 = mean59.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean59.setData(doubleArray79, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = mean14.evaluate(doubleArray49, doubleArray79, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        long long35 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        long long37 = mean19.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        boolean boolean11 = mean2.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean2.copy();
        long long13 = mean2.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean2.copy();
        mean2.increment(1.0d);
        mean2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        mean19.clear();
        boolean boolean30 = mean2.equals((java.lang.Object) mean19);
        long long31 = mean19.getN();
        long long32 = mean19.getN();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        long long47 = mean45.getN();
        long long48 = mean45.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean9.copy();
        double double21 = mean20.evaluate();
        java.lang.Class<?> wildcardClass22 = mean20.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        double[] doubleArray28 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        mean29.increment(10.0d);
        mean29.clear();
        double[] doubleArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean29.incrementAll(doubleArray33, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        mean23.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        long long12 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        boolean boolean27 = mean11.equals((java.lang.Object) mean26);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        long long20 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean44.increment(100.0d);
        double[] doubleArray60 = new double[] { 0L, (-1), (short) 1 };
        mean44.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean44);
        long long63 = mean44.getN();
        double[] doubleArray64 = mean44.getData();
        mean13.setData(doubleArray64);
        mean10.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        java.lang.Class<?> wildcardClass68 = mean67.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double[] doubleArray26 = mean25.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray26);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        java.lang.Class<?> wildcardClass61 = mean24.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        boolean boolean27 = mean0.equals((java.lang.Object) (byte) 0);
        double[] doubleArray28 = mean0.getData();
        mean0.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        mean32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        double double55 = mean41.evaluate(doubleArray48, 1, (int) (byte) 1);
        double double56 = mean0.evaluate(doubleArray48);
        double double57 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        long long12 = mean1.getN();
        double[] doubleArray13 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        long long37 = mean14.getN();
        double double38 = mean14.getResult();
        long long39 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        mean40.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        mean51.clear();
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        mean55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        double double78 = mean64.evaluate(doubleArray71, 1, (int) (byte) 1);
        mean51.setData(doubleArray71);
        double double80 = mean14.evaluate(doubleArray71);
        mean1.incrementAll(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass12 = mean11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray9 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double10 = mean4.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean3, mean4);
        mean4.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean4);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        double double27 = mean13.evaluate(doubleArray20, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = mean0.evaluate(doubleArray20, doubleArray45, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.25d + "'", double10 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        boolean boolean39 = mean26.equals((java.lang.Object) mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        mean40.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        java.lang.Class<?> wildcardClass14 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean69.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double71 = mean69.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(mean70);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        mean0.increment((double) 10.0f);
        java.lang.Class<?> wildcardClass29 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean57.copy();
        long long60 = mean57.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double27 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        mean29.clear();
        boolean boolean41 = mean26.equals((java.lang.Object) mean29);
        long long42 = mean26.getN();
        double double43 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        boolean boolean54 = mean45.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean45.copy();
        mean45.clear();
        mean45.clear();
        boolean boolean58 = mean26.equals((java.lang.Object) mean45);
        long long59 = mean45.getN();
        mean45.clear();
        long long61 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean45);
        boolean boolean63 = mean0.equals((java.lang.Object) mean62);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        long long51 = mean24.getN();
        mean24.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mean54);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        mean10.increment((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean27.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean27.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        mean10.increment((double) (byte) 1);
        double[] doubleArray21 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean22.copy();
        boolean boolean34 = mean10.equals((java.lang.Object) mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean10);
        double[] doubleArray37 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean38.copy();
        mean65.clear();
        boolean boolean67 = mean10.equals((java.lang.Object) mean65);
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean10.setData(doubleArray68, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean21.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        mean34.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double[] doubleArray76 = new double[] {};
        mean69.incrementAll(doubleArray76);
        mean34.setData(doubleArray76);
        mean21.setData(doubleArray76);
        mean0.setData(doubleArray76, 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        double[] doubleArray25 = mean0.getData();
        double double26 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        long long26 = mean24.getN();
        mean24.increment(50.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        boolean boolean39 = mean30.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mean40);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        mean13.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        mean13.setData(doubleArray55);
        mean0.setData(doubleArray55);
        double[] doubleArray59 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        mean46.increment((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        long long24 = mean23.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        mean13.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        double double85 = mean16.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        mean0.increment((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        double[] doubleArray51 = mean40.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        double[] doubleArray73 = null;
        mean64.setData(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double double85 = mean75.evaluate(doubleArray81, (int) (short) 0, (int) (short) 1);
        mean64.setData(doubleArray81);
        long long87 = mean64.getN();
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean64);
        long long91 = mean64.getN();
        mean64.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean64);
        java.lang.Class<?> wildcardClass95 = mean25.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double[] doubleArray42 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean23.copy();
        double[] doubleArray44 = mean43.getData();
        double[] doubleArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double48 = mean43.evaluate(doubleArray45, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray77 = mean0.getData();
        long long78 = mean0.getN();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2L + "'", long78 == 2L);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        mean61.setData(doubleArray68);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean61.copy();
        double[] doubleArray73 = mean72.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray73, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        double[] doubleArray47 = mean23.getData();
        double[] doubleArray48 = mean23.getData();
        java.lang.Class<?> wildcardClass49 = mean23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        long long32 = mean23.getN();
        double[] doubleArray33 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean34);
        double double58 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean59);
        boolean boolean73 = mean23.equals((java.lang.Object) mean59);
        mean59.increment((double) 0);
        mean59.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double[] doubleArray84 = new double[] {};
        mean77.incrementAll(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray93 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double94 = mean88.evaluate(doubleArray93);
        mean77.incrementAll(doubleArray93);
        double double96 = mean59.evaluate(doubleArray93);
        mean22.setData(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        mean40.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double[] doubleArray82 = new double[] {};
        mean75.incrementAll(doubleArray82);
        mean40.setData(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            mean39.incrementAll(doubleArray82, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        boolean boolean73 = mean0.equals((java.lang.Object) mean72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double28 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean63.copy();
        mean64.increment(0.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        double[] doubleArray10 = new double[] {};
        mean3.incrementAll(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean3.copy();
        mean12.clear();
        long long14 = mean12.getN();
        double double15 = mean12.getResult();
        mean12.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double double28 = mean18.evaluate(doubleArray24, (int) (short) 0, (int) (short) 1);
        mean18.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        boolean boolean41 = mean32.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        mean64.incrementAll(doubleArray83);
        mean43.setData(doubleArray83);
        boolean boolean88 = mean32.equals((java.lang.Object) doubleArray83);
        double double91 = mean18.evaluate(doubleArray83, 0, (int) (byte) 0);
        mean12.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray83, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(mean2);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass68 = mean67.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        long long11 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double13 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean15.clear();
        boolean boolean27 = mean12.equals((java.lang.Object) mean15);
        double[] doubleArray28 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        mean30.increment((double) (byte) 1);
        double[] doubleArray41 = mean30.getData();
        long long42 = mean30.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double50 = mean30.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean30.evaluate(doubleArray69);
        mean29.setData(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean1.evaluate(doubleArray69, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        long long14 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        double double58 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        double[] doubleArray12 = mean1.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        long long35 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean57);
        mean36.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean36);
        double double72 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        double double94 = mean73.getResult();
        double[] doubleArray95 = null;
        mean73.setData(doubleArray95);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean98 = mean97.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertNotNull(mean98);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        long long24 = mean17.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        double[] doubleArray64 = new double[] { 0L, (-1), (short) 1 };
        mean48.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean48);
        long long67 = mean48.getN();
        double[] doubleArray68 = mean48.getData();
        mean17.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        boolean boolean80 = mean71.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean71.copy();
        long long82 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean71.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean71);
        double[] doubleArray85 = mean71.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean3.setData(doubleArray85, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        double double60 = mean0.evaluate();
        mean0.clear();
        double[] doubleArray62 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        double[] doubleArray32 = mean19.getData();
        boolean boolean33 = mean0.equals((java.lang.Object) mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        boolean boolean44 = mean35.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        double[] doubleArray46 = mean35.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        double[] doubleArray73 = mean72.getData();
        mean35.setData(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray73, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean47);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        mean1.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        mean43.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        double double66 = mean52.evaluate(doubleArray59, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double87 = mean77.evaluate(doubleArray83, (int) (short) 0, (int) (short) 1);
        mean76.incrementAll(doubleArray83);
        mean52.setData(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = mean1.evaluate(doubleArray83, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double55 = mean45.evaluate(doubleArray51, (int) (short) 0, (int) (short) 1);
        mean34.setData(doubleArray51);
        mean23.incrementAll(doubleArray51);
        double double58 = mean12.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean59);
        boolean boolean73 = mean12.equals((java.lang.Object) mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double[] doubleArray81 = new double[] {};
        mean74.incrementAll(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean74.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double94 = mean84.evaluate(doubleArray90, (int) (short) 0, (int) (short) 1);
        mean83.incrementAll(doubleArray90);
        mean12.setData(doubleArray90, (int) (byte) 0, 0);
        double double99 = mean1.evaluate(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.25d + "'", double99 == 0.25d);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        mean1.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        boolean boolean32 = mean23.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        long long34 = mean23.getN();
        double double35 = mean23.getResult();
        mean23.increment((double) 10);
        long long38 = mean23.getN();
        mean23.increment(50.0d);
        long long41 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        double[] doubleArray85 = mean65.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        mean65.increment((double) 10L);
        double[] doubleArray89 = mean65.getData();
        double[] doubleArray90 = mean65.getData();
        double double91 = mean23.evaluate(doubleArray90);
        double[] doubleArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double93 = mean0.evaluate(doubleArray90, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        long long25 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        mean27.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        mean39.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        boolean boolean62 = mean53.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean64.increment((double) (byte) 1);
        double[] doubleArray75 = mean64.getData();
        long long76 = mean64.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double84 = mean64.evaluate(doubleArray82);
        double double85 = mean63.evaluate(doubleArray82);
        mean39.incrementAll(doubleArray82);
        mean27.incrementAll(doubleArray82);
        double double88 = mean26.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean12.evaluate(doubleArray82, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        long long33 = mean24.getN();
        double[] doubleArray34 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean35);
        boolean boolean59 = mean11.equals((java.lang.Object) mean24);
        double double60 = mean11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        mean38.increment((double) (byte) 1);
        double[] doubleArray49 = mean38.getData();
        long long50 = mean38.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double58 = mean38.evaluate(doubleArray56);
        double double59 = mean38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean69);
        mean69.increment((double) 1L);
        boolean boolean73 = mean36.equals((java.lang.Object) mean69);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = mean69.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        mean22.incrementAll(doubleArray41);
        mean1.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double47 = mean46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        mean48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double[] doubleArray66 = new double[] {};
        mean59.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean59.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        double[] doubleArray81 = mean70.getData();
        long long82 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double90 = mean70.evaluate(doubleArray88);
        mean69.incrementAll(doubleArray88);
        mean48.incrementAll(doubleArray88);
        double double93 = mean46.evaluate(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean26.copy();
        mean26.increment((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(mean30);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = mean0.copy();
        double[] doubleArray7 = mean0.getData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(mean6);
        org.junit.Assert.assertNull(doubleArray7);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        double double10 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        double[] doubleArray20 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        boolean boolean31 = mean22.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double[] doubleArray51 = new double[] {};
        mean44.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean44.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        mean55.increment((double) (byte) 1);
        double[] doubleArray66 = mean55.getData();
        long long67 = mean55.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double75 = mean55.evaluate(doubleArray73);
        mean54.incrementAll(doubleArray73);
        mean33.setData(doubleArray73);
        boolean boolean78 = mean22.equals((java.lang.Object) doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = mean9.evaluate(doubleArray20, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(mean54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        boolean boolean21 = mean12.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        mean23.increment((double) (byte) 1);
        double[] doubleArray34 = mean23.getData();
        long long35 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double43 = mean23.evaluate(doubleArray41);
        double double44 = mean22.evaluate(doubleArray41);
        mean9.setData(doubleArray41);
        double[] doubleArray46 = mean9.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        mean9.setData(doubleArray52);
        mean9.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        long long26 = mean15.getN();
        double double27 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean28.increment(100.0d);
        double[] doubleArray44 = new double[] { 0L, (-1), (short) 1 };
        mean28.setData(doubleArray44);
        mean15.incrementAll(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            mean12.incrementAll(doubleArray44, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        long long24 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        mean28.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        mean47.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double[] doubleArray73 = new double[] {};
        mean66.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean66.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean66.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        mean66.incrementAll(doubleArray82);
        double double87 = mean28.evaluate(doubleArray63, doubleArray82, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean13.incrementAll(doubleArray63, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(mean75);
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean63.incrementAll(doubleArray70);
        boolean boolean76 = mean41.equals((java.lang.Object) mean63);
        double double77 = mean41.getResult();
        double double78 = mean41.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        mean0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean38.clear();
        mean38.increment(0.25d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        long long28 = mean13.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = mean15.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(mean16);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        long long65 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean54);
        double double68 = mean0.getResult();
        double double69 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray10 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double11 = mean5.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean5);
        long long13 = mean4.getN();
        double[] doubleArray14 = mean4.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean4, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean15.setData(doubleArray78);
        mean0.incrementAll(doubleArray78, 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean0.copy();
        mean0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.25d + "'", double11 == 0.25d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean90);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean10.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        mean21.clear();
        long long34 = mean21.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        double[] doubleArray61 = mean60.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean21.incrementAll(doubleArray61, (-1), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean24.copy();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = mean24.evaluate(doubleArray27, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean26);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        mean18.increment((double) (byte) 1);
        double[] doubleArray29 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        mean40.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        mean44.increment((double) (byte) 1);
        double[] doubleArray55 = mean44.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        mean66.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean66);
        double[] doubleArray70 = mean66.getData();
        double double71 = mean66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        double double93 = mean66.evaluate(doubleArray90);
        mean18.incrementAll(doubleArray90);
        mean1.setData(doubleArray90, (int) (short) 0, 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        double[] doubleArray73 = mean72.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean72);
        double double75 = mean35.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        mean0.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean61.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean76);
        mean76.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(mean75);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        double[] doubleArray51 = new double[] { 0L, (-1), (short) 1 };
        mean35.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean35);
        long long54 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double[] doubleArray66 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean67);
        double double91 = mean56.getResult();
        mean56.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        boolean boolean95 = mean35.equals((java.lang.Object) mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        mean0.clear();
        double[] doubleArray30 = mean0.getData();
        mean0.increment((double) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(mean73);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        double[] doubleArray56 = mean52.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean52.copy();
        double double58 = mean57.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean55.getResult();
        double double57 = mean55.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        java.lang.Object obj39 = null;
        boolean boolean40 = mean37.equals(obj39);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        mean0.increment((double) 10.0f);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        mean1.setData(doubleArray75);
        java.lang.Class<?> wildcardClass78 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        double[] doubleArray14 = mean13.getData();
        mean13.clear();
        long long16 = mean13.getN();
        double[] doubleArray17 = mean13.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(doubleArray17);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        double double22 = mean9.getResult();
        mean9.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = mean9.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        double double79 = mean33.evaluate(doubleArray72);
        mean23.setData(doubleArray72);
        mean14.incrementAll(doubleArray72);
        mean13.incrementAll(doubleArray72);
        double double83 = mean13.getResult();
        mean13.increment(50.5d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean13.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(mean86);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean63.incrementAll(doubleArray70);
        boolean boolean76 = mean41.equals((java.lang.Object) mean63);
        double double77 = mean63.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        double double30 = mean18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        double[] doubleArray38 = new double[] {};
        mean31.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean31.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean31.copy();
        double double42 = mean41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean41.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        boolean boolean45 = mean18.equals((java.lang.Object) mean44);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray9 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double10 = mean4.evaluate(doubleArray9);
        double double13 = mean3.evaluate(doubleArray9, (int) (short) 0, (int) (short) 1);
        mean3.increment(100.0d);
        double[] doubleArray19 = new double[] { 0L, (-1), (short) 1 };
        mean3.setData(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = mean0.evaluate(doubleArray19, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(mean2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.25d + "'", double10 == 0.25d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        double[] doubleArray51 = mean26.getData();
        double double52 = mean0.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean76.increment(100.0d);
        double[] doubleArray92 = new double[] { 0L, (-1), (short) 1 };
        mean76.setData(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean76);
        long long95 = mean76.getN();
        double[] doubleArray96 = mean76.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray96, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        double[] doubleArray25 = mean14.getData();
        long long26 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double34 = mean14.evaluate(doubleArray32);
        double double35 = mean14.getResult();
        double[] doubleArray36 = null;
        mean14.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        boolean boolean39 = mean9.equals((java.lang.Object) mean38);
        long long40 = mean38.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = mean38.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        mean46.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        boolean boolean69 = mean60.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean60.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean71.increment((double) (byte) 1);
        double[] doubleArray82 = mean71.getData();
        long long83 = mean71.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray89 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double90 = mean84.evaluate(doubleArray89);
        double double91 = mean71.evaluate(doubleArray89);
        double double92 = mean70.evaluate(doubleArray89);
        mean46.incrementAll(doubleArray89);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        long long95 = mean46.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = mean46.copy();
        mean46.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 5L + "'", long95 == 5L);
        org.junit.Assert.assertNotNull(mean97);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        double double42 = mean23.evaluate();
        mean23.increment(10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        double[] doubleArray86 = mean85.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        long long61 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean62.copy();
        java.lang.Class<?> wildcardClass64 = mean63.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        long long22 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        long long34 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        boolean boolean45 = mean36.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        double double68 = mean46.evaluate(doubleArray65);
        mean33.setData(doubleArray65);
        double double72 = mean11.evaluate(doubleArray65, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean0.evaluate(doubleArray65, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long28 = mean27.getN();
        mean27.increment(25.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        double[] doubleArray34 = null;
        mean23.setData(doubleArray34);
        boolean boolean36 = mean0.equals((java.lang.Object) doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.incrementAll(doubleArray77);
        mean0.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass84 = mean83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        double[] doubleArray64 = null;
        mean55.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double double76 = mean66.evaluate(doubleArray72, (int) (short) 0, (int) (short) 1);
        mean55.setData(doubleArray72);
        mean44.incrementAll(doubleArray72);
        double double79 = mean33.evaluate(doubleArray72);
        mean23.setData(doubleArray72);
        mean14.incrementAll(doubleArray72);
        mean13.incrementAll(doubleArray72);
        double double83 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean84.copy();
        long long86 = mean84.getN();
        double double87 = mean84.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(mean84);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 4L + "'", long86 == 4L);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean55.clear();
        double[] doubleArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean55.incrementAll(doubleArray57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double45 = mean44.evaluate();
        double double46 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        boolean boolean57 = mean48.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean58);
        double[] doubleArray60 = mean44.getData();
        java.lang.Class<?> wildcardClass61 = mean44.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean21.copy();
        boolean boolean23 = mean0.equals((java.lang.Object) mean22);
        double double24 = mean22.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        double double53 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean54.copy();
        mean54.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(mean55);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        mean18.incrementAll(doubleArray34);
        double double37 = mean0.evaluate(doubleArray34);
        boolean boolean39 = mean0.equals((java.lang.Object) 50.0d);
        double double40 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        long long51 = mean41.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        double double64 = mean63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean63.copy();
        boolean boolean66 = mean41.equals((java.lang.Object) mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean67.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean80);
        mean80.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean80.setData(doubleArray88);
        mean41.setData(doubleArray88);
        mean0.setData(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean20.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean44, mean45);
        double[] doubleArray53 = null;
        mean44.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double65 = mean55.evaluate(doubleArray61, (int) (short) 0, (int) (short) 1);
        mean44.setData(doubleArray61);
        mean33.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        mean33.setData(doubleArray75);
        mean20.setData(doubleArray75);
        double double79 = mean0.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double81 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(mean80);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double[] doubleArray14 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        long long24 = mean15.getN();
        mean15.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        mean27.incrementAll(doubleArray43);
        double double46 = mean15.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        double[] doubleArray89 = mean70.getData();
        double double92 = mean15.evaluate(doubleArray89, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = mean13.evaluate(doubleArray14, doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        double double83 = mean1.evaluate(doubleArray79);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray84, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        double[] doubleArray72 = null;
        mean61.setData(doubleArray72);
        mean61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean61.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean32.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double double77 = mean67.evaluate(doubleArray73, (int) (short) 0, (int) (short) 1);
        mean56.setData(doubleArray73);
        mean45.incrementAll(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double[] doubleArray87 = new double[] {};
        mean80.incrementAll(doubleArray87);
        mean45.setData(doubleArray87);
        mean32.setData(doubleArray87);
        mean0.setData(doubleArray87);
        mean0.clear();
        long long93 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        double[] doubleArray48 = mean23.getData();
        double[] doubleArray49 = mean23.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        long long61 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean24.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        mean36.clear();
        long long82 = mean36.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        long long51 = mean24.getN();
        mean24.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = mean24.copy();
        mean24.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mean54);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        mean24.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double[] doubleArray59 = new double[] {};
        mean52.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean52.copy();
        mean61.clear();
        boolean boolean63 = mean51.equals((java.lang.Object) mean61);
        boolean boolean64 = mean10.equals((java.lang.Object) mean51);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = mean51.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(mean61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        java.lang.Class<?> wildcardClass96 = mean71.getClass();
        boolean boolean97 = mean60.equals((java.lang.Object) wildcardClass96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        mean10.clear();
        boolean boolean34 = mean0.equals((java.lang.Object) mean10);
        long long35 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        mean36.increment((double) (byte) 1);
        double[] doubleArray47 = mean36.getData();
        long long48 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double56 = mean36.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean57);
        mean36.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean36);
        double double72 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean10.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(mean73);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        double double48 = mean23.getResult();
        mean23.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        long long43 = mean15.getN();
        double[] doubleArray44 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        boolean boolean55 = mean46.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean46.copy();
        mean46.clear();
        mean46.clear();
        double[] doubleArray59 = mean46.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray66, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = mean15.evaluate(doubleArray44, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        double[] doubleArray56 = mean52.getData();
        long long57 = mean52.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean63.incrementAll(doubleArray70);
        boolean boolean76 = mean41.equals((java.lang.Object) mean63);
        mean63.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        double[] doubleArray24 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean12.copy();
        double[] doubleArray26 = mean25.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray26);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        mean21.clear();
        long long34 = mean21.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        long long58 = mean35.getN();
        mean35.increment((double) 4L);
        long long61 = mean35.getN();
        double double62 = mean35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        mean72.setData(doubleArray79);
        mean35.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            mean21.incrementAll(doubleArray79, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4.0d + "'", double62 == 4.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        java.lang.Class<?> wildcardClass63 = mean61.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray12 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double13 = mean7.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean6, mean7);
        long long15 = mean6.getN();
        double[] doubleArray16 = mean6.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean6, mean17);
        double double41 = mean6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean42.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean42.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        mean53.increment((double) (byte) 1);
        double[] doubleArray64 = mean53.getData();
        long long65 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double73 = mean53.evaluate(doubleArray71);
        mean52.incrementAll(doubleArray71);
        mean6.incrementAll(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean6.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean76.copy();
        boolean boolean79 = mean0.equals((java.lang.Object) mean76);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.25d + "'", double13 == 0.25d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(mean52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean34);
        double double36 = mean34.getResult();
        double double37 = mean34.getResult();
        double double38 = mean34.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean26.copy();
        double[] doubleArray30 = mean26.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNull(doubleArray30);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        mean35.incrementAll(doubleArray63);
        double double70 = mean24.evaluate(doubleArray63);
        mean14.setData(doubleArray63);
        mean14.increment(Double.NaN);
        long long74 = mean14.getN();
        double[] doubleArray75 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double double12 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean13.copy();
        double[] doubleArray42 = mean41.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = mean11.evaluate(doubleArray42, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        boolean boolean82 = mean0.equals((java.lang.Object) mean81);
        long long83 = mean81.getN();
        mean81.increment((double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 4L + "'", long83 == 4L);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double[] doubleArray26 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((double) (-1.0f));
        java.lang.Class<?> wildcardClass30 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        double[] doubleArray15 = mean14.getData();
        double double16 = mean14.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        boolean boolean21 = mean12.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        mean44.incrementAll(doubleArray63);
        mean23.setData(doubleArray63);
        boolean boolean68 = mean12.equals((java.lang.Object) doubleArray63);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        mean12.setData(doubleArray86);
        mean10.setData(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        mean35.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double[] doubleArray70 = new double[] {};
        mean63.incrementAll(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = mean73.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = mean73.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(mean74);
        org.junit.Assert.assertNotNull(mean75);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        long long11 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        mean13.increment(100.0d);
        double[] doubleArray29 = new double[] { 0L, (-1), (short) 1 };
        mean13.setData(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            mean12.incrementAll(doubleArray29, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        long long30 = mean23.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        double[] doubleArray40 = null;
        mean31.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double52 = mean42.evaluate(doubleArray48, (int) (short) 0, (int) (short) 1);
        mean31.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        mean54.increment(100.0d);
        double[] doubleArray70 = new double[] { 0L, (-1), (short) 1 };
        mean54.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean54);
        long long73 = mean54.getN();
        double[] doubleArray74 = mean54.getData();
        mean23.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean76, mean77);
        boolean boolean86 = mean77.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean77.copy();
        long long88 = mean77.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean77);
        double[] doubleArray91 = mean77.getData();
        mean0.setData(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        long long79 = mean0.getN();
        java.lang.Class<?> wildcardClass80 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        long long20 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean44.increment(100.0d);
        double[] doubleArray60 = new double[] { 0L, (-1), (short) 1 };
        mean44.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean44);
        long long63 = mean44.getN();
        double[] doubleArray64 = mean44.getData();
        mean13.setData(doubleArray64);
        mean10.incrementAll(doubleArray64);
        mean10.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        mean1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        mean21.setData(doubleArray38);
        mean21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean57, mean58);
        double[] doubleArray66 = null;
        mean57.setData(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        double double78 = mean68.evaluate(doubleArray74, (int) (short) 0, (int) (short) 1);
        mean57.setData(doubleArray74);
        mean46.incrementAll(doubleArray74);
        mean21.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        mean82.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean82);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean82);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double16 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray11, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        double[] doubleArray29 = mean27.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNull(doubleArray29);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        double[] doubleArray27 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean16);
        double double30 = mean0.getResult();
        long long31 = mean0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean21.copy();
        boolean boolean23 = mean0.equals((java.lang.Object) mean22);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        mean36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        boolean boolean64 = mean55.equals((java.lang.Object) (short) 1);
        double[] doubleArray65 = mean55.getData();
        mean55.clear();
        boolean boolean67 = mean36.equals((java.lang.Object) mean55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        long long23 = mean16.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        double[] doubleArray63 = new double[] { 0L, (-1), (short) 1 };
        mean47.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean47);
        long long66 = mean47.getN();
        double[] doubleArray67 = mean47.getData();
        mean16.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        boolean boolean79 = mean70.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean70.copy();
        long long81 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean70.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean70);
        double[] doubleArray84 = mean70.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean15.setData(doubleArray84, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        double[] doubleArray27 = mean26.getData();
        double[] doubleArray28 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        double[] doubleArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean29.incrementAll(doubleArray30, 100, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNull(doubleArray28);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean37);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        long long24 = mean15.getN();
        double[] doubleArray25 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean26);
        mean26.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean64.clear();
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean68.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        double double91 = mean77.evaluate(doubleArray84, 1, (int) (byte) 1);
        mean64.setData(doubleArray84);
        mean52.setData(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            mean1.setData(doubleArray84, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        double[] doubleArray56 = mean37.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean37.copy();
        double[] doubleArray58 = mean37.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = mean9.evaluate(doubleArray58, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        long long75 = mean52.getN();
        double double76 = mean52.getResult();
        double[] doubleArray77 = mean52.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean51.incrementAll(doubleArray77, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        double[] doubleArray53 = new double[] { 0L, (-1), (short) 1 };
        mean37.setData(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean37);
        long long56 = mean37.getN();
        mean37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean59);
        double double61 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        mean0.increment((double) 0L);
        java.lang.Class<?> wildcardClass70 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double double16 = mean0.getResult();
        double[] doubleArray17 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        mean18.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        mean37.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        mean56.incrementAll(doubleArray72);
        double double77 = mean18.evaluate(doubleArray53, doubleArray72, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray53, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(mean65);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        double[] doubleArray24 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        mean26.incrementAll(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        double double72 = mean71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        mean73.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean86);
        java.lang.Class<?> wildcardClass89 = mean86.getClass();
        boolean boolean90 = mean12.equals((java.lang.Object) wildcardClass89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        mean1.increment(50.0d);
        long long19 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean21);
        double[] doubleArray29 = null;
        mean20.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean20.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean43.increment(100.0d);
        double[] doubleArray59 = new double[] { 0L, (-1), (short) 1 };
        mean43.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean20, mean43);
        long long62 = mean43.getN();
        double[] doubleArray63 = mean43.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean43);
        mean43.increment((double) 10L);
        double[] doubleArray67 = mean43.getData();
        double[] doubleArray68 = mean43.getData();
        double double69 = mean1.evaluate(doubleArray68);
        java.lang.Class<?> wildcardClass70 = mean1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean58.setData(doubleArray64);
        mean58.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean58.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        mean70.increment((double) (byte) 1);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double[] doubleArray90 = new double[] {};
        mean83.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean83.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = mean83.copy();
        java.lang.Class<?> wildcardClass94 = mean93.getClass();
        boolean boolean95 = mean70.equals((java.lang.Object) wildcardClass94);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (short) -1);
        double double99 = mean69.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertNotNull(mean93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.25d + "'", double99 == 0.25d);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        boolean boolean70 = mean14.equals((java.lang.Object) doubleArray65);
        double double73 = mean0.evaluate(doubleArray65, 0, (int) (byte) 0);
        double double74 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean27.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean29.setData(doubleArray46);
        long long52 = mean29.getN();
        double double53 = mean29.getResult();
        double[] doubleArray54 = mean29.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean27.incrementAll(doubleArray54, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        double[] doubleArray85 = null;
        mean74.setData(doubleArray85);
        boolean boolean87 = mean51.equals((java.lang.Object) doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean51);
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        double[] doubleArray16 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(mean17);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        long long22 = mean13.getN();
        double[] doubleArray23 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        mean24.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean51.copy();
        mean51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        mean62.clear();
        mean62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean66.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        double double89 = mean75.evaluate(doubleArray82, 1, (int) (byte) 1);
        mean62.setData(doubleArray82);
        mean50.setData(doubleArray82);
        mean0.setData(doubleArray82);
        double double93 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean33.clear();
        long long35 = mean33.getN();
        double[] doubleArray36 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            mean33.setData(doubleArray36, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        long long23 = mean14.getN();
        mean14.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        mean26.incrementAll(doubleArray42);
        double double45 = mean14.evaluate(doubleArray42);
        mean0.setData(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        long long40 = mean39.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        boolean boolean46 = mean0.equals((java.lang.Object) mean35);
        double double47 = mean35.getResult();
        mean35.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        double[] doubleArray29 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean28.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(mean30);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        double[] doubleArray68 = mean28.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNull(doubleArray68);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        double[] doubleArray41 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean15.copy();
        mean42.increment((double) 5L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(mean42);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        long long34 = mean25.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        mean35.clear();
        boolean boolean59 = mean25.equals((java.lang.Object) mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = mean63.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean65);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean15.copy();
        java.lang.Class<?> wildcardClass42 = mean41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(mean41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean40.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        boolean boolean67 = mean39.equals((java.lang.Object) mean64);
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        mean0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        mean0.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean70);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean31.copy();
        long long36 = mean31.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean51.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean77.copy();
        double[] doubleArray80 = mean79.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean79);
        double[] doubleArray82 = mean79.getData();
        long long83 = mean79.getN();
        double[] doubleArray84 = mean79.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNull(doubleArray84);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean0.copy();
        double[] doubleArray89 = mean88.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(mean88);
        org.junit.Assert.assertNull(doubleArray89);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        mean26.incrementAll(doubleArray42);
        double double45 = mean26.getResult();
        mean26.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        mean60.incrementAll(doubleArray79);
        mean26.incrementAll(doubleArray79);
        double double84 = mean0.evaluate(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean35.increment(100.0d);
        double[] doubleArray51 = new double[] { 0L, (-1), (short) 1 };
        mean35.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean35);
        long long54 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double[] doubleArray66 = mean56.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean67);
        double double91 = mean56.getResult();
        mean56.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean56);
        boolean boolean95 = mean35.equals((java.lang.Object) mean56);
        long long96 = mean56.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        double double51 = mean24.getResult();
        mean24.clear();
        mean24.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        double[] doubleArray12 = mean0.getData();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        double[] doubleArray25 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double[] doubleArray34 = new double[] {};
        mean27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean27.copy();
        mean27.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double59 = mean49.evaluate(doubleArray55, (int) (short) 0, (int) (short) 1);
        mean38.setData(doubleArray55);
        long long61 = mean38.getN();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean38.setData(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean0.evaluate(doubleArray70, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        long long14 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        mean15.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        mean15.setData(doubleArray57);
        double double60 = mean0.evaluate(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double[] doubleArray27 = mean22.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        mean38.setData(doubleArray45);
        mean38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean51.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean66, mean67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean77.copy();
        double[] doubleArray80 = mean79.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean79);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertNull(doubleArray80);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean23.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double[] doubleArray67 = new double[] {};
        mean60.incrementAll(doubleArray67);
        mean25.setData(doubleArray67);
        mean0.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean71, mean72);
        mean72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        double double92 = mean82.evaluate(doubleArray88, (int) (short) 0, (int) (short) 1);
        double double95 = mean81.evaluate(doubleArray88, 1, (int) (byte) 1);
        boolean boolean96 = mean0.equals((java.lang.Object) (byte) 1);
        double double97 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        long long11 = mean2.getN();
        mean2.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        mean14.incrementAll(doubleArray30);
        double double33 = mean2.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        mean34.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean53.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean72.incrementAll(doubleArray88);
        double double93 = mean34.evaluate(doubleArray69, doubleArray88, (int) (byte) 0, (int) (byte) 1);
        mean2.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = mean2.copy();
        mean95.increment(0.2d);
        boolean boolean98 = mean0.equals((java.lang.Object) mean95);
        org.apache.commons.math.stat.descriptive.moment.Mean mean99 = mean95.copy();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertNotNull(mean95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(mean99);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        mean44.incrementAll(doubleArray63);
        double double67 = mean10.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        mean68.setData(doubleArray74);
        double double77 = mean68.getResult();
        boolean boolean78 = mean0.equals((java.lang.Object) double77);
        mean0.increment((double) '4');
        long long81 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        mean28.increment((double) (byte) 1);
        double[] doubleArray39 = mean28.getData();
        long long40 = mean28.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double48 = mean28.evaluate(doubleArray46);
        double double49 = mean22.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean50.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = mean50.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(mean52);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.increment((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertNotNull(mean9);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean0.copy();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(mean24);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mean18);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean51.increment(100.0d);
        double[] doubleArray67 = new double[] { 0L, (-1), (short) 1 };
        mean51.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean51);
        long long70 = mean51.getN();
        double[] doubleArray71 = mean51.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        long long81 = mean72.getN();
        mean72.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        double[] doubleArray86 = mean51.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean27.setData(doubleArray86, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean62.increment(100.0d);
        double[] doubleArray78 = new double[] { 0L, (-1), (short) 1 };
        mean62.setData(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean62);
        long long81 = mean62.getN();
        double[] doubleArray82 = mean62.getData();
        double[] doubleArray83 = null;
        mean62.setData(doubleArray83);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean62);
        double[] doubleArray86 = mean29.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean29);
        java.lang.Class<?> wildcardClass89 = mean29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean28);
        mean1.increment((double) (short) 10);
        double double70 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        mean50.clear();
        mean50.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        double[] doubleArray63 = null;
        mean54.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean54.setData(doubleArray71);
        mean50.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = mean15.evaluate(doubleArray71, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = mean15.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(mean14);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        double[] doubleArray57 = mean33.getData();
        double[] doubleArray58 = mean33.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean33);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = mean59.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNull(doubleArray58);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = mean0.copy();
        long long3 = mean0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(mean2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean9);
        double[] doubleArray17 = null;
        mean8.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double double29 = mean19.evaluate(doubleArray25, (int) (short) 0, (int) (short) 1);
        mean8.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean31.increment(100.0d);
        double[] doubleArray47 = new double[] { 0L, (-1), (short) 1 };
        mean31.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean8, mean31);
        long long50 = mean31.getN();
        double[] doubleArray51 = mean31.getData();
        mean0.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        boolean boolean63 = mean54.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        long long65 = mean54.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean54);
        double[] doubleArray68 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean70.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        boolean boolean80 = mean0.equals((java.lang.Object) mean70);
        double double81 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean0.copy();
        mean82.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        double double12 = mean0.getResult();
        double double13 = mean0.getResult();
        long long14 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        mean15.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        mean40.increment((double) (byte) 1);
        double[] doubleArray51 = mean40.getData();
        long long52 = mean40.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double60 = mean40.evaluate(doubleArray58);
        double double61 = mean39.evaluate(doubleArray58);
        mean15.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        double double87 = mean73.evaluate(doubleArray80, 1, (int) (byte) 1);
        double double88 = mean15.evaluate(doubleArray80);
        mean14.setData(doubleArray80);
        double double90 = mean14.evaluate();
        java.lang.Class<?> wildcardClass91 = mean14.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        long long26 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        long long25 = mean14.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        long long37 = mean36.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean36.setData(doubleArray68);
        double double75 = mean14.evaluate(doubleArray68, 0, 0);
        double double78 = mean0.evaluate(doubleArray68, (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean0.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double89 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertNotNull(mean88);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double[] doubleArray57 = new double[] {};
        mean50.incrementAll(doubleArray57);
        mean49.incrementAll(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        mean10.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        boolean boolean37 = mean28.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        mean38.increment((double) '#');
        mean38.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean38);
        mean38.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean39);
        double[] doubleArray41 = mean39.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean43, mean44);
        mean44.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double double64 = mean54.evaluate(doubleArray60, (int) (short) 0, (int) (short) 1);
        double double67 = mean53.evaluate(doubleArray60, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = mean39.evaluate(doubleArray60, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double[] doubleArray14 = mean0.getData();
        mean0.increment((double) (-1.0f));
        long long17 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        long long61 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean24.copy();
        double double63 = mean24.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        double double40 = mean39.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = null;
        mean0.setData(doubleArray11);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double double24 = mean14.evaluate(doubleArray20, (int) (short) 0, (int) (short) 1);
        mean14.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean39.setData(doubleArray56);
        long long62 = mean39.getN();
        mean39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean39);
        mean28.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean28);
        double double68 = mean14.getResult();
        boolean boolean69 = mean0.equals((java.lang.Object) double68);
        mean0.clear();
        long long71 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        long long52 = mean50.getN();
        mean50.increment(Double.NaN);
        double[] doubleArray55 = mean50.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        long long24 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        boolean boolean36 = mean27.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean27.copy();
        mean27.clear();
        mean27.clear();
        double[] doubleArray40 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray47, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        mean55.increment((double) (byte) 1);
        double[] doubleArray66 = mean55.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        double[] doubleArray74 = new double[] {};
        mean67.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = mean67.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean67.copy();
        mean77.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean55.copy();
        mean81.increment((double) (-1.0f));
        boolean boolean84 = mean27.equals((java.lang.Object) (-1.0f));
        boolean boolean85 = mean25.equals((java.lang.Object) mean27);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(mean76);
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean46);
        mean47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double51 = mean50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        boolean boolean62 = mean53.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        mean53.clear();
        boolean boolean65 = mean50.equals((java.lang.Object) mean53);
        long long66 = mean50.getN();
        double double67 = mean50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        boolean boolean78 = mean69.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = mean69.copy();
        mean69.clear();
        mean69.clear();
        boolean boolean82 = mean50.equals((java.lang.Object) mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean50);
        java.lang.Class<?> wildcardClass84 = mean50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mean79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        mean60.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = mean60.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        mean12.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        double double58 = mean36.evaluate(doubleArray55);
        mean12.incrementAll(doubleArray55);
        mean0.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        boolean boolean71 = mean62.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        long long73 = mean62.getN();
        boolean boolean74 = mean0.equals((java.lang.Object) long73);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        double[] doubleArray26 = new double[] {};
        mean19.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        mean19.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        mean38.incrementAll(doubleArray54);
        double double59 = mean0.evaluate(doubleArray35, doubleArray54, (int) (byte) 0, (int) (byte) 1);
        double double60 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(mean61);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        long long26 = mean24.getN();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean24.incrementAll(doubleArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean12.copy();
        boolean boolean24 = mean0.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        double[] doubleArray13 = mean0.getData();
        double[] doubleArray14 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        double[] doubleArray26 = mean15.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        long long28 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean29, mean30);
        double[] doubleArray38 = null;
        mean29.setData(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        double[] doubleArray49 = null;
        mean40.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        double double61 = mean51.evaluate(doubleArray57, (int) (short) 0, (int) (short) 1);
        mean40.setData(doubleArray57);
        mean29.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double[] doubleArray71 = new double[] {};
        mean64.incrementAll(doubleArray71);
        mean29.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean74.increment((double) (byte) 1);
        double[] doubleArray85 = mean74.getData();
        long long86 = mean74.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double94 = mean74.evaluate(doubleArray92);
        double double95 = mean29.evaluate(doubleArray92);
        double double96 = mean29.getResult();
        double[] doubleArray97 = mean29.getData();
        mean15.incrementAll(doubleArray97);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = mean0.evaluate(doubleArray14, doubleArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.25d + "'", double96 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean16.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        mean35.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        mean54.incrementAll(doubleArray70);
        double double75 = mean16.evaluate(doubleArray51, doubleArray70, (int) (byte) 0, (int) (byte) 1);
        mean3.setData(doubleArray70);
        double[] doubleArray77 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean3.copy();
        double[] doubleArray79 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean3.copy();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean80);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        double[] doubleArray44 = null;
        mean35.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean35.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean58.increment(100.0d);
        double[] doubleArray74 = new double[] { 0L, (-1), (short) 1 };
        mean58.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean58);
        long long77 = mean58.getN();
        double[] doubleArray78 = mean58.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        double double80 = mean79.evaluate();
        double double81 = mean79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean82, mean83);
        boolean boolean92 = mean83.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean83);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean79, mean93);
        double[] doubleArray95 = mean79.getData();
        mean10.incrementAll(doubleArray95);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = mean10.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean97);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        mean2.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean23.copy();
        boolean boolean35 = mean11.equals((java.lang.Object) mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        double double94 = mean0.evaluate(doubleArray84);
        mean0.clear();
        double[] doubleArray96 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean97);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean78);
        double double80 = mean79.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean35.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        double[] doubleArray65 = null;
        mean56.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        double[] doubleArray76 = null;
        mean67.setData(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        double double88 = mean78.evaluate(doubleArray84, (int) (short) 0, (int) (short) 1);
        mean67.setData(doubleArray84);
        mean56.incrementAll(doubleArray84);
        double double91 = mean45.evaluate(doubleArray84);
        mean35.setData(doubleArray84);
        mean26.incrementAll(doubleArray84);
        double double94 = mean0.evaluate(doubleArray84);
        double[] doubleArray95 = mean0.getData();
        double[] doubleArray96 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double[] doubleArray26 = mean22.getData();
        double double27 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double double49 = mean39.evaluate(doubleArray45, (int) (short) 0, (int) (short) 1);
        mean28.setData(doubleArray45);
        mean28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        mean52.increment((double) (short) 100);
        boolean boolean55 = mean22.equals((java.lang.Object) mean52);
        mean52.clear();
        long long57 = mean52.getN();
        double[] doubleArray58 = mean52.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        long long11 = mean9.getN();
        double double12 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        double[] doubleArray52 = new double[] { 0L, (-1), (short) 1 };
        mean36.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean36);
        long long55 = mean36.getN();
        double[] doubleArray56 = mean36.getData();
        double[] doubleArray57 = null;
        mean36.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        double double60 = mean59.getResult();
        mean59.increment(0.25000000000000006d);
        boolean boolean63 = mean9.equals((java.lang.Object) 0.25000000000000006d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean1.copy();
        java.lang.Class<?> wildcardClass18 = mean17.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) 100);
        mean0.increment((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray11);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        double[] doubleArray47 = new double[] {};
        mean40.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        mean50.incrementAll(doubleArray69);
        mean29.incrementAll(doubleArray69);
        double double74 = mean24.evaluate(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray18);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean1.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNotNull(mean29);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean9.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean28.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean22);
        mean9.increment((double) 1L);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        double[] doubleArray69 = null;
        mean60.setData(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double81 = mean71.evaluate(doubleArray77, (int) (short) 0, (int) (short) 1);
        mean60.setData(doubleArray77);
        mean49.incrementAll(doubleArray77);
        double double84 = mean38.evaluate(doubleArray77);
        mean28.setData(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            mean9.setData(doubleArray77, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        double double21 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean9.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(mean22);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        mean22.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        double double42 = mean32.evaluate(doubleArray38, (int) (short) 0, (int) (short) 1);
        double double45 = mean31.evaluate(doubleArray38, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double[] doubleArray53 = new double[] {};
        mean46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean46.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean55.incrementAll(doubleArray62);
        mean31.setData(doubleArray62);
        double double69 = mean20.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        long long80 = mean70.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        boolean boolean82 = mean20.equals((java.lang.Object) mean70);
        mean20.increment((double) 2L);
        double double85 = mean20.evaluate();
        double[] doubleArray86 = mean20.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(mean55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        double[] doubleArray39 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double[] doubleArray48 = new double[] {};
        mean41.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean41.copy();
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        long long75 = mean52.getN();
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        mean52.setData(doubleArray84);
        mean27.setData(doubleArray84, 0, (int) (short) 0);
        long long90 = mean27.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = mean27.copy();
        java.lang.Class<?> wildcardClass92 = mean27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(mean91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        long long20 = mean11.getN();
        double[] doubleArray21 = mean11.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean22);
        double double46 = mean11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double[] doubleArray54 = new double[] {};
        mean47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean47.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        mean58.increment((double) (byte) 1);
        double[] doubleArray69 = mean58.getData();
        long long70 = mean58.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double78 = mean58.evaluate(doubleArray76);
        mean57.incrementAll(doubleArray76);
        mean11.incrementAll(doubleArray76);
        mean10.incrementAll(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean82.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(mean56);
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        mean15.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        boolean boolean38 = mean29.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean40, mean41);
        mean40.increment((double) (byte) 1);
        double[] doubleArray51 = mean40.getData();
        long long52 = mean40.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double double60 = mean40.evaluate(doubleArray58);
        double double61 = mean39.evaluate(doubleArray58);
        mean15.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        mean64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        double double87 = mean73.evaluate(doubleArray80, 1, (int) (byte) 1);
        double double88 = mean15.evaluate(doubleArray80);
        mean14.setData(doubleArray80);
        double double90 = mean14.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean91);
        mean91.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.25d + "'", double90 == 0.25d);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double[] doubleArray35 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(doubleArray35);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.clear();
        double[] doubleArray59 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(doubleArray59);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        double[] doubleArray25 = null;
        mean16.setData(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        mean16.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double[] doubleArray58 = new double[] {};
        mean51.incrementAll(doubleArray58);
        mean16.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        mean61.increment((double) (byte) 1);
        double[] doubleArray72 = mean61.getData();
        long long73 = mean61.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double81 = mean61.evaluate(doubleArray79);
        double double82 = mean16.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass83 = mean16.getClass();
        boolean boolean84 = mean1.equals((java.lang.Object) mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double[] doubleArray92 = new double[] {};
        mean85.incrementAll(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean85.copy();
        mean85.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean97);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertNotNull(mean94);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        mean26.increment((double) (byte) 1);
        double[] doubleArray37 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double[] doubleArray45 = new double[] {};
        mean38.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        mean48.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean48);
        double[] doubleArray55 = new double[] { 100, 1, (byte) 100 };
        mean48.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        double[] doubleArray60 = new double[] { 52.0d, 4.0d };
        double double61 = mean57.evaluate(doubleArray60);
        mean10.setData(doubleArray60, (int) (short) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 28.0d + "'", double61 == 28.0d);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.clear();
        double[] doubleArray12 = mean0.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        double[] doubleArray87 = mean84.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double88 = mean84.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNull(doubleArray87);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean22);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        java.lang.Object obj10 = null;
        boolean boolean11 = mean9.equals(obj10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        long long46 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        mean47.clear();
        boolean boolean71 = mean37.equals((java.lang.Object) mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        double double83 = mean73.evaluate(doubleArray79, (int) (short) 0, (int) (short) 1);
        double double84 = mean47.evaluate(doubleArray79);
        double double85 = mean9.evaluate(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        double double11 = mean9.getResult();
        mean9.increment(4.5d);
        double double14 = mean9.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.5d + "'", double14 == 4.5d);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean47.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        boolean boolean61 = mean0.equals((java.lang.Object) mean60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean71.incrementAll(doubleArray78);
        mean0.setData(doubleArray78, (int) (byte) 0, 0);
        long long87 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(mean88);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        mean24.increment((double) 10.0f);
        long long61 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean63, mean64);
        double[] doubleArray72 = null;
        mean63.setData(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        double double84 = mean74.evaluate(doubleArray80, (int) (short) 0, (int) (short) 1);
        mean63.setData(doubleArray80);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean90 = mean63.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(mean90);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        mean17.increment((double) (byte) 1);
        double[] doubleArray28 = mean17.getData();
        mean17.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean17.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean56);
        boolean boolean65 = mean56.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean56.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean68);
        mean67.increment((double) (byte) 1);
        double[] doubleArray78 = mean67.getData();
        long long79 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double87 = mean67.evaluate(doubleArray85);
        double double88 = mean66.evaluate(doubleArray85);
        mean32.incrementAll(doubleArray85, (int) (byte) 0, 0);
        mean31.setData(doubleArray85);
        double double93 = mean0.evaluate(doubleArray85);
        mean0.clear();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.25d + "'", double87 == 0.25d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double27 = mean0.evaluate();
        long long28 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean10);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double[] doubleArray36 = new double[] {};
        mean29.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean29.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean50.incrementAll(doubleArray78);
        double double85 = mean39.evaluate(doubleArray78);
        mean29.setData(doubleArray78);
        mean19.incrementAll(doubleArray78);
        double double90 = mean0.evaluate(doubleArray78, (int) (byte) 0, 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean80);
        double[] doubleArray82 = mean80.getData();
        long long83 = mean80.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(mean80);
        org.junit.Assert.assertNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        double double11 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        long long21 = mean12.getN();
        double[] doubleArray22 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean23);
        double double47 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean48);
        boolean boolean62 = mean12.equals((java.lang.Object) mean48);
        mean48.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        double[] doubleArray74 = null;
        mean65.setData(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        mean65.setData(doubleArray82);
        long long88 = mean65.getN();
        double double89 = mean65.getResult();
        long long90 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean94 = mean9.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(mean94);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        double[] doubleArray12 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean25);
        double[] doubleArray52 = mean1.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        mean55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean64, mean65);
        mean64.increment((double) (byte) 1);
        double[] doubleArray75 = mean64.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double double86 = mean76.evaluate(doubleArray82, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean76.copy();
        boolean boolean88 = mean64.equals((java.lang.Object) mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean64.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean55, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = mean64.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean64);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertNotNull(mean91);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean0.copy();
        double[] doubleArray15 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        double[] doubleArray27 = mean16.getData();
        long long28 = mean16.getN();
        double[] doubleArray29 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean41.incrementAll(doubleArray69);
        double double76 = mean30.evaluate(doubleArray69);
        mean16.setData(doubleArray69);
        double[] doubleArray78 = mean16.getData();
        mean14.incrementAll(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        long long33 = mean10.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean34);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = mean35.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(mean34);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        mean76.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean76);
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean80.copy();
        java.lang.Class<?> wildcardClass82 = mean81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        double double36 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean37.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean61);
        mean50.increment((double) 0L);
        boolean boolean65 = mean0.equals((java.lang.Object) 0L);
        long long66 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray72 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double73 = mean67.evaluate(doubleArray72);
        mean0.setData(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        long long25 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        double[] doubleArray47 = null;
        mean38.setData(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        double[] doubleArray58 = null;
        mean49.setData(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double70 = mean60.evaluate(doubleArray66, (int) (short) 0, (int) (short) 1);
        mean49.setData(doubleArray66);
        mean38.incrementAll(doubleArray66);
        double double73 = mean27.evaluate(doubleArray66);
        boolean boolean74 = mean26.equals((java.lang.Object) mean27);
        java.lang.Class<?> wildcardClass75 = mean27.getClass();
        boolean boolean76 = mean0.equals((java.lang.Object) mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.25d + "'", double73 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean45.copy();
        long long47 = mean45.getN();
        double[] doubleArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean45.evaluate(doubleArray48, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        long long27 = mean26.getN();
        double[] doubleArray28 = mean26.getData();
        double double29 = mean26.getResult();
        java.lang.Class<?> wildcardClass30 = mean26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        double double12 = mean0.getResult();
        double double13 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean15.clear();
        mean15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean28.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        double[] doubleArray50 = null;
        mean41.setData(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean52, mean53);
        double[] doubleArray61 = null;
        mean52.setData(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double73 = mean63.evaluate(doubleArray69, (int) (short) 0, (int) (short) 1);
        mean52.setData(doubleArray69);
        mean41.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray81 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double82 = mean76.evaluate(doubleArray81);
        double[] doubleArray83 = new double[] {};
        mean76.incrementAll(doubleArray83);
        mean41.setData(doubleArray83);
        mean28.setData(doubleArray83);
        mean15.setData(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray83, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.25d + "'", double82 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        mean3.clear();
        mean3.clear();
        java.lang.Class<?> wildcardClass18 = mean3.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        mean30.increment((double) (byte) 1);
        double[] doubleArray41 = mean30.getData();
        long long42 = mean30.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        double double50 = mean30.evaluate(doubleArray48);
        double double51 = mean30.getResult();
        double[] doubleArray52 = null;
        mean30.setData(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean30);
        boolean boolean55 = mean1.equals((java.lang.Object) mean30);
        double[] doubleArray56 = mean1.getData();
        mean1.increment((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(doubleArray56);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean0.copy();
        mean0.increment((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4L + "'", long71 == 4L);
        org.junit.Assert.assertNotNull(mean72);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        long long46 = mean39.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        double[] doubleArray56 = null;
        mean47.setData(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        double double68 = mean58.evaluate(doubleArray64, (int) (short) 0, (int) (short) 1);
        mean47.setData(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        double[] doubleArray86 = new double[] { 0L, (-1), (short) 1 };
        mean70.setData(doubleArray86);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean70);
        long long89 = mean70.getN();
        double[] doubleArray90 = mean70.getData();
        mean39.setData(doubleArray90);
        mean11.setData(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        double double94 = mean93.getResult();
        double double95 = mean93.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 10.0d + "'", double94 == 10.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.25d + "'", double95 == 0.25d);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        mean24.setData(doubleArray56);
        double[] doubleArray59 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double61 = mean60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean62, mean63);
        boolean boolean72 = mean63.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean63.copy();
        mean63.clear();
        boolean boolean75 = mean60.equals((java.lang.Object) mean63);
        long long76 = mean60.getN();
        double double77 = mean60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean78, mean79);
        boolean boolean88 = mean79.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = mean79.copy();
        mean79.clear();
        mean79.clear();
        boolean boolean92 = mean60.equals((java.lang.Object) mean79);
        long long93 = mean79.getN();
        mean79.clear();
        long long95 = mean79.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mean89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean71);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean72.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
        org.junit.Assert.assertNotNull(mean73);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        double[] doubleArray15 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        double[] doubleArray23 = new double[] {};
        mean16.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean16.copy();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        mean25.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        long long45 = mean36.getN();
        mean36.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        mean48.incrementAll(doubleArray64);
        double double67 = mean36.evaluate(doubleArray64);
        mean25.setData(doubleArray64, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = mean0.evaluate(doubleArray64, 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean37);
        double[] doubleArray45 = null;
        mean36.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double57 = mean47.evaluate(doubleArray53, (int) (short) 0, (int) (short) 1);
        mean36.setData(doubleArray53);
        mean25.incrementAll(doubleArray53);
        double double60 = mean14.evaluate(doubleArray53);
        boolean boolean61 = mean13.equals((java.lang.Object) mean14);
        mean13.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean0.copy();
        double[] doubleArray30 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        boolean boolean41 = mean32.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        mean32.clear();
        mean32.clear();
        double[] doubleArray45 = mean32.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray52, (int) (short) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean61);
        mean60.increment((double) (byte) 1);
        double[] doubleArray71 = mean60.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean72.copy();
        mean82.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean60, mean82);
        double[] doubleArray89 = new double[] { 100, 1, (byte) 100 };
        mean82.setData(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = mean0.evaluate(doubleArray52, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray14 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double15 = mean9.evaluate(doubleArray14);
        double[] doubleArray16 = new double[] {};
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean28, mean29);
        double[] doubleArray37 = null;
        mean28.setData(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        double[] doubleArray48 = null;
        mean39.setData(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        double[] doubleArray59 = null;
        mean50.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double71 = mean61.evaluate(doubleArray67, (int) (short) 0, (int) (short) 1);
        mean50.setData(doubleArray67);
        mean39.incrementAll(doubleArray67);
        double double74 = mean28.evaluate(doubleArray67);
        mean18.setData(doubleArray67);
        mean9.incrementAll(doubleArray67);
        mean0.setData(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean0.copy();
        long long79 = mean0.getN();
        double[] doubleArray80 = mean0.getData();
        double[] doubleArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray81, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.25d + "'", double15 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        double[] doubleArray27 = new double[] {};
        mean20.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean20.copy();
        mean29.clear();
        mean29.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        double double54 = mean44.evaluate(doubleArray50, (int) (short) 0, (int) (short) 1);
        mean33.setData(doubleArray50);
        mean29.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean57);
        long long59 = mean9.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        long long14 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        mean37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        mean1.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        double[] doubleArray19 = null;
        mean10.setData(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double double31 = mean21.evaluate(doubleArray27, (int) (short) 0, (int) (short) 1);
        mean10.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean33.increment(100.0d);
        double[] doubleArray49 = new double[] { 0L, (-1), (short) 1 };
        mean33.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        long long52 = mean33.getN();
        double[] doubleArray53 = mean33.getData();
        double[] doubleArray54 = null;
        mean33.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double[] doubleArray64 = new double[] {};
        mean57.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = mean57.copy();
        mean66.clear();
        mean66.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean70, mean71);
        double[] doubleArray79 = null;
        mean70.setData(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double91 = mean81.evaluate(doubleArray87, (int) (short) 0, (int) (short) 1);
        mean70.setData(doubleArray87);
        mean66.incrementAll(doubleArray87);
        double double96 = mean0.evaluate(doubleArray87, (int) (byte) 0, (int) (byte) 1);
        double double97 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(mean66);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean24.clear();
        double[] doubleArray26 = mean24.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean0.copy();
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean28.setData(doubleArray29, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean28);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean1.copy();
        mean1.increment(1.0d);
        mean1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        double[] doubleArray25 = new double[] {};
        mean18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean18.copy();
        mean18.clear();
        boolean boolean29 = mean1.equals((java.lang.Object) mean18);
        long long30 = mean18.getN();
        long long31 = mean18.getN();
        long long32 = mean18.getN();
        long long33 = mean18.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        double[] doubleArray13 = mean1.getData();
        mean1.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        mean0.increment((double) (byte) 10);
        mean0.increment((double) (byte) 0);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = null;
        mean17.setData(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray34);
        long long40 = mean17.getN();
        mean17.increment((double) 4L);
        double double43 = mean17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean17);
        long long45 = mean44.getN();
        double[] doubleArray46 = mean44.getData();
        mean0.setData(doubleArray46);
        long long48 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.0d + "'", double43 == 4.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        mean23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean23.copy();
        mean23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        boolean boolean59 = mean50.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean50.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double[] doubleArray68 = new double[] {};
        mean61.incrementAll(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean61.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        mean72.increment((double) (byte) 1);
        double[] doubleArray83 = mean72.getData();
        long long84 = mean72.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        double double92 = mean72.evaluate(doubleArray90);
        mean71.incrementAll(doubleArray90);
        mean50.incrementAll(doubleArray90);
        mean23.incrementAll(doubleArray90);
        double[] doubleArray96 = null;
        mean23.setData(doubleArray96);
        mean23.increment((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mean60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double23 = mean22.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = mean22.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray59 = mean58.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double60 = mean58.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(doubleArray59);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = mean31.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        long long7 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        double[] doubleArray18 = null;
        mean9.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray26 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double27 = mean21.evaluate(doubleArray26);
        double double30 = mean20.evaluate(doubleArray26, (int) (short) 0, (int) (short) 1);
        mean9.setData(doubleArray26);
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        double[] doubleArray43 = null;
        mean34.setData(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        double[] doubleArray54 = null;
        mean45.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        double double66 = mean56.evaluate(doubleArray62, (int) (short) 0, (int) (short) 1);
        mean45.setData(doubleArray62);
        mean34.incrementAll(doubleArray62);
        mean9.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray76 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double77 = mean71.evaluate(doubleArray76);
        double double80 = mean70.evaluate(doubleArray76, (int) (short) 0, (int) (short) 1);
        mean70.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean70);
        double[] doubleArray84 = mean9.getData();
        mean8.incrementAll(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mean8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.25d + "'", double77 == 0.25d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        double[] doubleArray13 = mean12.getData();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean12.setData(doubleArray14, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNull(doubleArray13);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double[] doubleArray30 = new double[] {};
        mean23.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean23.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean35);
        mean34.increment((double) (byte) 1);
        double[] doubleArray45 = mean34.getData();
        long long46 = mean34.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double54 = mean34.evaluate(doubleArray52);
        mean33.incrementAll(doubleArray52);
        mean12.setData(doubleArray52);
        boolean boolean57 = mean1.equals((java.lang.Object) doubleArray52);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean59.increment(100.0d);
        double[] doubleArray75 = new double[] { 0L, (-1), (short) 1 };
        mean59.setData(doubleArray75);
        mean1.setData(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = mean1.copy();
        double double79 = mean1.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(mean32);
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(mean78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double[] doubleArray41 = new double[] {};
        mean34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean34.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray50 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double51 = mean45.evaluate(doubleArray50);
        mean34.incrementAll(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray58 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double59 = mean53.evaluate(doubleArray58);
        double[] doubleArray60 = new double[] {};
        mean53.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        mean53.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double[] doubleArray79 = new double[] {};
        mean72.incrementAll(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean72.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray88 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double89 = mean83.evaluate(doubleArray88);
        mean72.incrementAll(doubleArray88);
        double double93 = mean34.evaluate(doubleArray69, doubleArray88, (int) (byte) 0, (int) (byte) 1);
        mean19.incrementAll(doubleArray88, (int) (byte) 0, (int) (short) 0);
        mean19.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(mean43);
        org.junit.Assert.assertNotNull(mean44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.25d + "'", double51 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.25d + "'", double59 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double14 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        boolean boolean25 = mean16.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean16.copy();
        mean16.clear();
        boolean boolean28 = mean13.equals((java.lang.Object) mean16);
        long long29 = mean13.getN();
        double double30 = mean13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean31, mean32);
        boolean boolean41 = mean32.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = mean32.copy();
        mean32.clear();
        mean32.clear();
        boolean boolean45 = mean13.equals((java.lang.Object) mean32);
        long long46 = mean32.getN();
        mean32.clear();
        long long48 = mean32.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean32);
        mean32.clear();
        boolean boolean51 = mean10.equals((java.lang.Object) mean32);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mean42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        double double12 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        mean14.clear();
        mean14.clear();
        double[] doubleArray27 = mean14.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray34, (int) (short) 0, (int) (short) 0);
        mean0.setData(doubleArray34, (int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double[] doubleArray21 = new double[] {};
        mean14.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean14.copy();
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean25.setData(doubleArray42);
        long long48 = mean25.getN();
        mean25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean25);
        mean14.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean14);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean54, mean55);
        mean55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        double double78 = mean64.evaluate(doubleArray71, 1, (int) (byte) 1);
        mean14.setData(doubleArray71);
        mean14.clear();
        long long81 = mean14.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray9 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double10 = mean4.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean3, mean4);
        mean3.increment((double) (byte) 1);
        double[] doubleArray14 = mean3.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        mean25.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean3, mean25);
        double[] doubleArray32 = new double[] { 100, 1, (byte) 100 };
        mean25.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean25);
        double[] doubleArray37 = new double[] { 52.0d, 4.0d };
        double double38 = mean34.evaluate(doubleArray37);
        double[] doubleArray39 = mean34.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean0.incrementAll(doubleArray39, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.25d + "'", double10 == 0.25d);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 28.0d + "'", double38 == 28.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 1.0, 100.0]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        long long24 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double32 = mean12.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        double[] doubleArray42 = null;
        mean33.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean12.evaluate(doubleArray51);
        mean11.incrementAll(doubleArray51, (int) (byte) 1, 0);
        mean11.increment((double) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        double[] doubleArray23 = null;
        mean14.setData(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        mean14.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        boolean boolean47 = mean38.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean38.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        double[] doubleArray60 = mean49.getData();
        long long61 = mean49.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double double69 = mean49.evaluate(doubleArray67);
        double double70 = mean48.evaluate(doubleArray67);
        mean14.incrementAll(doubleArray67, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean14);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = mean14.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        double[] doubleArray16 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = mean0.copy();
        java.lang.Class<?> wildcardClass18 = mean17.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(doubleArray16);
        org.junit.Assert.assertNotNull(mean17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        double[] doubleArray22 = new double[] {};
        mean15.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        long long35 = mean26.getN();
        double[] doubleArray36 = mean26.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double double58 = mean48.evaluate(doubleArray54, (int) (short) 0, (int) (short) 1);
        mean37.setData(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean37);
        double double61 = mean26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        double[] doubleArray69 = new double[] {};
        mean62.incrementAll(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean62.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean73, mean74);
        mean73.increment((double) (byte) 1);
        double[] doubleArray84 = mean73.getData();
        long long85 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray91 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double92 = mean86.evaluate(doubleArray91);
        double double93 = mean73.evaluate(doubleArray91);
        mean72.incrementAll(doubleArray91);
        mean26.incrementAll(doubleArray91);
        mean25.incrementAll(doubleArray91);
        mean0.incrementAll(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(mean71);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
        org.junit.Assert.assertNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.25d + "'", double92 == 0.25d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean0.getResult();
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray64 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double65 = mean59.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean58, mean59);
        double[] doubleArray67 = mean59.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray74 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double75 = mean69.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean68, mean69);
        double[] doubleArray77 = null;
        mean68.setData(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray85 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double86 = mean80.evaluate(doubleArray85);
        double double89 = mean79.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        mean68.setData(doubleArray85);
        double double91 = mean59.evaluate(doubleArray85);
        mean0.incrementAll(doubleArray85);
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double94 = mean0.evaluate(doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.25d + "'", double86 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        double[] doubleArray43 = mean23.getData();
        double[] doubleArray44 = null;
        mean23.setData(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double47 = mean46.getResult();
        mean46.increment(0.25000000000000006d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        double double60 = mean50.evaluate(doubleArray56, (int) (short) 0, (int) (short) 1);
        mean50.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean63);
        mean63.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        mean63.setData(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            mean46.incrementAll(doubleArray71, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(mean56);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        double[] doubleArray34 = null;
        mean25.setData(doubleArray34);
        mean25.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean38, mean39);
        boolean boolean48 = mean39.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        double double71 = mean49.evaluate(doubleArray68);
        mean25.incrementAll(doubleArray68);
        mean13.incrementAll(doubleArray68);
        mean1.incrementAll(doubleArray68, (int) (byte) 1, (int) (byte) 1);
        double double77 = mean1.getResult();
        mean1.increment((double) 0);
        double[] doubleArray80 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNull(doubleArray80);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        long long14 = mean12.getN();
        long long15 = mean12.getN();
        double double16 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray23 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double24 = mean18.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean17, mean18);
        double[] doubleArray26 = mean18.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean27, mean28);
        double[] doubleArray36 = null;
        mean27.setData(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double double48 = mean38.evaluate(doubleArray44, (int) (short) 0, (int) (short) 1);
        mean27.setData(doubleArray44);
        double double50 = mean18.evaluate(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            mean12.incrementAll(doubleArray44, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: start position (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        mean11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        long long39 = mean11.getN();
        mean11.increment(4.5d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        double double54 = mean41.getResult();
        double double55 = mean41.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        boolean boolean23 = mean14.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        boolean boolean70 = mean14.equals((java.lang.Object) doubleArray65);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean72.increment(100.0d);
        double[] doubleArray88 = new double[] { 0L, (-1), (short) 1 };
        mean72.setData(doubleArray88);
        mean14.setData(doubleArray88);
        mean14.increment((double) (short) 1);
        double[] doubleArray93 = mean14.getData();
        // The following exception was thrown during execution in test generation
        try {
            mean12.setData(doubleArray93, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, -1.0, 1.0]");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(mean30);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        mean24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        double[] doubleArray60 = null;
        mean51.setData(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double72 = mean62.evaluate(doubleArray68, (int) (short) 0, (int) (short) 1);
        mean51.setData(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        double[] doubleArray83 = null;
        mean74.setData(doubleArray83);
        double[] doubleArray85 = null;
        mean74.setData(doubleArray85);
        boolean boolean87 = mean51.equals((java.lang.Object) doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean89 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean51);
        mean51.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        double double12 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(mean13);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean67);
        mean67.increment(0.2d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        double[] doubleArray12 = mean11.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        double[] doubleArray12 = mean0.getData();
        mean0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        mean49.incrementAll(doubleArray68);
        double double72 = mean15.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray79 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double80 = mean74.evaluate(doubleArray79);
        mean73.setData(doubleArray79);
        mean0.setData(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNotNull(mean73);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.25d + "'", double80 == 0.25d);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean10.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        boolean boolean24 = mean15.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean15.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double[] doubleArray33 = new double[] {};
        mean26.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        mean36.incrementAll(doubleArray55);
        mean15.incrementAll(doubleArray55);
        double double60 = mean10.evaluate(doubleArray55);
        mean10.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(mean12);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        double[] doubleArray12 = mean11.getData();
        mean11.increment(100.0d);
        mean11.increment(0.25000000000000006d);
        double double17 = mean11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.125d + "'", double17 == 50.125d);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        mean0.clear();
        java.lang.Class<?> wildcardClass12 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double double46 = mean36.evaluate(doubleArray42, (int) (short) 0, (int) (short) 1);
        mean36.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean36);
        boolean boolean50 = mean0.equals((java.lang.Object) mean36);
        mean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean53, mean54);
        double[] doubleArray62 = null;
        mean53.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray70 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double71 = mean65.evaluate(doubleArray70);
        double double74 = mean64.evaluate(doubleArray70, (int) (short) 0, (int) (short) 1);
        mean53.setData(doubleArray70);
        long long76 = mean53.getN();
        double double77 = mean53.getResult();
        long long78 = mean53.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean36, mean53);
        double[] doubleArray81 = mean53.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean82.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(doubleArray81);
        org.junit.Assert.assertNotNull(mean82);
        org.junit.Assert.assertNotNull(mean83);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long14 = mean13.getN();
        mean13.increment(10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.25d + "'", double24 == 0.25d);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean23.increment(100.0d);
        double[] doubleArray39 = new double[] { 0L, (-1), (short) 1 };
        mean23.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean23);
        long long42 = mean23.getN();
        mean23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        double double46 = mean23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean23);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean49, mean50);
        mean49.increment((double) (byte) 1);
        mean49.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        double[] doubleArray63 = mean62.getData();
        mean62.clear();
        boolean boolean65 = mean48.equals((java.lang.Object) mean62);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        java.lang.Class<?> wildcardClass14 = mean0.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        mean0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        double double71 = mean70.evaluate();
        java.lang.Class<?> wildcardClass72 = mean70.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean0.copy();
        long long36 = mean35.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double37 = mean35.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4L + "'", long36 == 4L);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        double double72 = mean26.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean26);
        mean0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean76 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean76.clear();
        mean76.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double79 = mean76.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        double double35 = mean34.getResult();
        long long36 = mean34.getN();
        java.lang.Class<?> wildcardClass37 = mean34.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4L + "'", long36 == 4L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean0.increment((double) '4');
        double double13 = mean0.getResult();
        long long14 = mean0.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double[] doubleArray32 = new double[] {};
        mean25.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean25.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean25.copy();
        mean35.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean35);
        double[] doubleArray42 = new double[] { 100, 1, (byte) 100 };
        mean35.setData(doubleArray42);
        mean35.clear();
        java.lang.Class<?> wildcardClass45 = mean35.getClass();
        boolean boolean46 = mean0.equals((java.lang.Object) wildcardClass45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(mean35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray13 = mean0.getData();
        double double14 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        double[] doubleArray24 = null;
        mean15.setData(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean15.setData(doubleArray32);
        long long38 = mean15.getN();
        double double39 = mean15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean41, mean42);
        mean41.increment((double) (byte) 1);
        mean41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean41);
        java.lang.Object obj54 = null;
        boolean boolean55 = mean41.equals(obj54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray20 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double21 = mean15.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean14, mean15);
        mean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean14.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        mean26.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray45 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double46 = mean40.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean39, mean40);
        boolean boolean49 = mean40.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = mean40.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        mean51.increment((double) (byte) 1);
        double[] doubleArray62 = mean51.getData();
        long long63 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray69 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double70 = mean64.evaluate(doubleArray69);
        double double71 = mean51.evaluate(doubleArray69);
        double double72 = mean50.evaluate(doubleArray69);
        mean26.incrementAll(doubleArray69);
        mean14.incrementAll(doubleArray69);
        double double75 = mean13.evaluate(doubleArray69);
        double double76 = mean13.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean13.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.25d + "'", double21 == 0.25d);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mean50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.25d + "'", double71 == 0.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.25d + "'", double75 == 0.25d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double[] doubleArray18 = new double[] {};
        mean11.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        mean11.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double[] doubleArray37 = new double[] {};
        mean30.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean30.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        mean30.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        double[] doubleArray56 = new double[] {};
        mean49.incrementAll(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = mean49.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        mean49.incrementAll(doubleArray65);
        double double70 = mean11.evaluate(doubleArray46, doubleArray65, (int) (byte) 0, (int) (byte) 1);
        mean0.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        org.apache.commons.math.stat.descriptive.moment.Mean mean81 = mean72.copy();
        boolean boolean82 = mean0.equals((java.lang.Object) mean72);
        double[] doubleArray83 = mean72.getData();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean59);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertNotNull(mean81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(doubleArray83);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean22, mean23);
        double[] doubleArray31 = null;
        mean22.setData(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        double double43 = mean33.evaluate(doubleArray39, (int) (short) 0, (int) (short) 1);
        mean22.setData(doubleArray39);
        mean11.incrementAll(doubleArray39);
        double double46 = mean0.evaluate(doubleArray39);
        mean0.clear();
        double double48 = mean0.getResult();
        double double49 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = mean50.copy();
        java.lang.Class<?> wildcardClass52 = mean51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.25d + "'", double46 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(mean51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        mean13.increment((double) (byte) 1);
        double[] doubleArray24 = mean13.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean25.copy();
        boolean boolean37 = mean13.equals((java.lang.Object) mean25);
        boolean boolean38 = mean10.equals((java.lang.Object) mean25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray46 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double47 = mean41.evaluate(doubleArray46);
        double double50 = mean40.evaluate(doubleArray46, (int) (short) 0, (int) (short) 1);
        mean40.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean53);
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        mean53.setData(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = mean10.evaluate(doubleArray61, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.25d + "'", double47 == 0.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double double68 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean12.copy();
        double[] doubleArray41 = mean40.getData();
        mean0.setData(doubleArray41);
        double double43 = mean0.evaluate();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(mean44);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        double double23 = mean22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean27);
        double[] doubleArray35 = null;
        mean26.setData(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        mean26.setData(doubleArray43);
        mean26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray57 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double58 = mean52.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean51, mean52);
        long long60 = mean51.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray67 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double68 = mean62.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean61, mean62);
        double[] doubleArray70 = null;
        mean61.setData(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        double double82 = mean72.evaluate(doubleArray78, (int) (short) 0, (int) (short) 1);
        mean61.setData(doubleArray78);
        mean61.clear();
        boolean boolean85 = mean51.equals((java.lang.Object) mean61);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean26, mean61);
        boolean boolean87 = mean22.equals((java.lang.Object) mean26);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(mean24);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        long long35 = mean12.getN();
        double double36 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        double double47 = mean37.evaluate(doubleArray43, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double[] doubleArray55 = new double[] {};
        mean48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean48.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean59, mean60);
        mean59.increment((double) (byte) 1);
        double[] doubleArray70 = mean59.getData();
        long long71 = mean59.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray77 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double78 = mean72.evaluate(doubleArray77);
        double double79 = mean59.evaluate(doubleArray77);
        mean58.incrementAll(doubleArray77);
        mean37.setData(doubleArray77);
        mean12.setData(doubleArray77);
        double double83 = mean0.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double85 = mean84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean84);
        mean84.clear();
        mean84.clear();
        java.lang.Class<?> wildcardClass89 = mean84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(mean57);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.25d + "'", double78 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        double[] doubleArray29 = new double[] {};
        mean22.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean22.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean31);
        mean31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = mean31.copy();
        mean35.increment(28.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(mean31);
        org.junit.Assert.assertNotNull(mean35);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        mean10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        double double23 = mean13.evaluate(doubleArray19, (int) (short) 0, (int) (short) 1);
        mean13.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray34 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double35 = mean29.evaluate(doubleArray34);
        double double38 = mean28.evaluate(doubleArray34, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray44 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double45 = mean39.evaluate(doubleArray44);
        double[] doubleArray46 = new double[] {};
        mean39.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = mean39.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray56 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double57 = mean51.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean50, mean51);
        mean50.increment((double) (byte) 1);
        double[] doubleArray61 = mean50.getData();
        long long62 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray68 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double69 = mean63.evaluate(doubleArray68);
        double double70 = mean50.evaluate(doubleArray68);
        mean49.incrementAll(doubleArray68);
        mean28.setData(doubleArray68);
        boolean boolean73 = mean27.equals((java.lang.Object) doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            mean10.incrementAll(doubleArray68, 10, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.25d + "'", double35 == 0.25d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.25d + "'", double45 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(mean48);
        org.junit.Assert.assertNotNull(mean49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.25d + "'", double69 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean9.setData(doubleArray16);
        double double19 = mean9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        long long21 = mean9.getN();
        java.lang.Class<?> wildcardClass22 = mean9.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        long long28 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean0.copy();
        long long30 = mean29.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        mean1.clear();
        mean1.clear();
        double[] doubleArray14 = mean1.getData();
        double double15 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        double[] doubleArray17 = mean16.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNull(doubleArray17);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        double double67 = mean0.getResult();
        double[] doubleArray68 = mean0.getData();
        mean0.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        boolean boolean73 = mean0.equals((java.lang.Object) 0.5d);
        double double74 = mean0.evaluate();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.increment((double) 100.0f);
        mean0.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean10.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = mean11.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double double10 = mean0.getResult();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray25 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double26 = mean20.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean19, mean20);
        double[] doubleArray28 = null;
        mean19.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray36 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double37 = mean31.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean30, mean31);
        double[] doubleArray39 = null;
        mean30.setData(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double double51 = mean41.evaluate(doubleArray47, (int) (short) 0, (int) (short) 1);
        mean30.setData(doubleArray47);
        mean19.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        mean19.setData(doubleArray61);
        double double66 = mean12.evaluate(doubleArray61, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double double68 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean69, mean70);
        mean69.increment((double) (byte) 1);
        double[] doubleArray80 = mean69.getData();
        long long81 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray87 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double88 = mean82.evaluate(doubleArray87);
        double double89 = mean69.evaluate(doubleArray87);
        mean12.incrementAll(doubleArray87);
        mean0.setData(doubleArray87, (int) (short) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.25d + "'", double26 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.25d + "'", double88 == 0.25d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.25d + "'", double89 == 0.25d);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean25);
        double[] doubleArray33 = null;
        mean24.setData(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double double45 = mean35.evaluate(doubleArray41, (int) (short) 0, (int) (short) 1);
        mean24.setData(doubleArray41);
        long long47 = mean24.getN();
        double double48 = mean24.getResult();
        long long49 = mean24.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean50);
        long long52 = mean50.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean50.copy();
        mean53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = mean53.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(mean55);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray62 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double63 = mean57.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean56, mean57);
        long long65 = mean56.getN();
        double double66 = mean56.getResult();
        boolean boolean67 = mean0.equals((java.lang.Object) mean56);
        long long68 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray75 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double76 = mean70.evaluate(doubleArray75);
        double double79 = mean69.evaluate(doubleArray75, (int) (short) 0, (int) (short) 1);
        mean69.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean82 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean82);
        org.apache.commons.math.stat.descriptive.moment.Mean mean84 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray90 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double91 = mean85.evaluate(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean84, mean85);
        org.apache.commons.math.stat.descriptive.moment.Mean mean93 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean84);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean82, mean93);
        org.apache.commons.math.stat.descriptive.moment.Mean mean95 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean93);
        org.apache.commons.math.stat.descriptive.moment.Mean mean96 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean95);
        org.apache.commons.math.stat.descriptive.moment.Mean mean97 = mean95.copy();
        boolean boolean98 = mean0.equals((java.lang.Object) mean95);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.25d + "'", double63 == 0.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.25d + "'", double76 == 0.25d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.25d + "'", double91 == 0.25d);
        org.junit.Assert.assertNotNull(mean97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double11 = mean10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        boolean boolean22 = mean13.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        mean13.clear();
        boolean boolean25 = mean10.equals((java.lang.Object) mean13);
        mean13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        java.lang.Object obj38 = null;
        boolean boolean39 = mean37.equals(obj38);
        double double40 = mean37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean37);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        boolean boolean52 = mean43.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = mean43.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double[] doubleArray61 = new double[] {};
        mean54.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean54.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        long long77 = mean65.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray83 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double84 = mean78.evaluate(doubleArray83);
        double double85 = mean65.evaluate(doubleArray83);
        mean64.incrementAll(doubleArray83);
        mean43.incrementAll(doubleArray83);
        double double90 = mean1.evaluate(doubleArray83, 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean91 = mean1.copy();
        double double92 = mean91.getResult();
        long long93 = mean91.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mean53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(mean63);
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.25d + "'", double84 == 0.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(mean91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        double[] doubleArray10 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        double double35 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean0.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean70);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = mean70.copy();
        java.lang.Class<?> wildcardClass73 = mean70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertNotNull(mean70);
        org.junit.Assert.assertNotNull(mean72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean11);
        boolean boolean20 = mean11.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean11.copy();
        long long22 = mean11.getN();
        double double23 = mean11.getResult();
        mean11.increment((double) 10);
        long long26 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean11);
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        long long30 = mean11.getN();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.clear();
        long long25 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean26.copy();
        mean26.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray32 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double33 = mean27.evaluate(doubleArray32);
        double double36 = mean26.evaluate(doubleArray32, (int) (short) 0, (int) (short) 1);
        mean26.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean39.copy();
        long long41 = mean40.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean40);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.25d + "'", double33 == 0.25d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(mean40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        mean22.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean0.increment((double) (-1L));
        double double30 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean26);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray21 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double22 = mean16.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean15, mean16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean26);
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = mean26.copy();
        double[] doubleArray29 = mean28.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean28);
        double[] doubleArray31 = mean28.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
        org.junit.Assert.assertNotNull(mean28);
        org.junit.Assert.assertNull(doubleArray29);
        org.junit.Assert.assertNull(doubleArray31);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean13.increment((double) ' ');
        java.lang.Class<?> wildcardClass16 = mean13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean0.copy();
        mean0.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(mean27);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        long long34 = mean11.getN();
        mean11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean11);
        long long37 = mean0.getN();
        long long38 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = mean0.copy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertNotNull(mean40);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        long long9 = mean0.getN();
        mean0.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        mean12.incrementAll(doubleArray28);
        double double31 = mean0.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double double65 = mean55.evaluate(doubleArray61, (int) (short) 0, (int) (short) 1);
        mean55.increment(100.0d);
        double[] doubleArray71 = new double[] { 0L, (-1), (short) 1 };
        mean55.setData(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean55);
        double[] doubleArray74 = mean55.getData();
        double double77 = mean0.evaluate(doubleArray74, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = mean0.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = mean58.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertNotNull(mean60);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray8 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double9 = mean3.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean2, mean3);
        boolean boolean12 = mean3.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = mean3.copy();
        mean3.clear();
        boolean boolean15 = mean0.equals((java.lang.Object) mean3);
        long long16 = mean0.getN();
        double double17 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        boolean boolean28 = mean19.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = mean19.copy();
        mean19.clear();
        mean19.clear();
        boolean boolean32 = mean0.equals((java.lang.Object) mean19);
        long long33 = mean19.getN();
        mean19.clear();
        long long35 = mean19.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean19);
        mean19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean19.copy();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.25d + "'", double9 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mean13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mean29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(mean38);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double[] doubleArray19 = new double[] {};
        mean12.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = mean12.copy();
        boolean boolean22 = mean0.equals((java.lang.Object) mean21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        double[] doubleArray32 = null;
        mean23.setData(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double double44 = mean34.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        mean23.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        double double56 = mean46.evaluate(doubleArray52, (int) (short) 0, (int) (short) 1);
        mean46.increment(100.0d);
        double[] doubleArray62 = new double[] { 0L, (-1), (short) 1 };
        mean46.setData(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean46);
        long long65 = mean46.getN();
        double[] doubleArray66 = mean46.getData();
        mean0.setData(doubleArray66);
        double double68 = mean0.getResult();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(mean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray38 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double39 = mean33.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean32, mean33);
        double[] doubleArray41 = null;
        mean32.setData(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray49 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double50 = mean44.evaluate(doubleArray49);
        double double53 = mean43.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        mean32.setData(doubleArray49);
        mean21.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray61 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double62 = mean56.evaluate(doubleArray61);
        double[] doubleArray63 = new double[] {};
        mean56.incrementAll(doubleArray63);
        mean21.setData(doubleArray63);
        mean21.increment((double) 10L);
        boolean boolean68 = mean0.equals((java.lang.Object) mean21);
        double[] doubleArray69 = mean0.getData();
        double[] doubleArray70 = null;
        mean0.setData(doubleArray70);
        mean0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.25d + "'", double39 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.25d + "'", double50 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.25d + "'", double62 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(doubleArray69);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        double[] doubleArray16 = new double[] { 0L, (-1), (short) 1 };
        mean0.setData(doubleArray16);
        mean0.increment((double) 10);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray27 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double28 = mean22.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean21, mean22);
        double[] doubleArray30 = null;
        mean21.setData(doubleArray30);
        double[] doubleArray32 = null;
        mean21.setData(doubleArray32);
        mean21.clear();
        boolean boolean35 = mean0.equals((java.lang.Object) mean21);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.25d + "'", double28 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        mean0.incrementAll(doubleArray16);
        double double19 = mean0.getResult();
        mean0.increment(0.0d);
        double[] doubleArray26 = new double[] { (byte) 1, 100.0d, 3.666666666666667d, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            mean0.setData(doubleArray26, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0, 3.666666666666667, 100.0]");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        mean0.increment((double) 4L);
        double double26 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long28 = mean27.getN();
        double[] doubleArray29 = mean27.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = mean30.copy();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(mean31);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        double double24 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        double double35 = mean25.evaluate(doubleArray31, (int) (short) 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        double[] doubleArray43 = new double[] {};
        mean36.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean36.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean47, mean48);
        mean47.increment((double) (byte) 1);
        double[] doubleArray58 = mean47.getData();
        long long59 = mean47.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double67 = mean47.evaluate(doubleArray65);
        mean46.incrementAll(doubleArray65);
        mean25.setData(doubleArray65);
        mean0.setData(doubleArray65);
        long long71 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray78 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double79 = mean73.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean72, mean73);
        boolean boolean82 = mean73.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean83 = mean73.copy();
        long long84 = mean73.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = mean73.copy();
        mean73.increment(1.0d);
        boolean boolean88 = mean0.equals((java.lang.Object) mean73);
        long long89 = mean73.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(mean45);
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.25d + "'", double79 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mean83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(mean85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray16 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double17 = mean11.evaluate(doubleArray16);
        double double20 = mean10.evaluate(doubleArray16, (int) (short) 0, (int) (short) 1);
        mean9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean9);
        mean22.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.25d + "'", double17 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        mean12.increment((double) (byte) 1);
        double[] doubleArray23 = mean12.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        mean34.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean34);
        double double38 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = mean12.copy();
        long long40 = mean12.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = mean12.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean12);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = mean12.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(mean39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(mean41);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        long long23 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double[] doubleArray31 = new double[] {};
        mean24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        mean34.incrementAll(doubleArray53);
        double double57 = mean0.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = mean0.copy();
        double double59 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(mean33);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertNotNull(mean58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        double[] doubleArray20 = null;
        mean11.setData(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray28 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double29 = mean23.evaluate(doubleArray28);
        double double32 = mean22.evaluate(doubleArray28, (int) (short) 0, (int) (short) 1);
        mean11.setData(doubleArray28);
        mean0.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray40 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double41 = mean35.evaluate(doubleArray40);
        double[] doubleArray42 = new double[] {};
        mean35.incrementAll(doubleArray42);
        mean0.setData(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        mean45.increment((double) (byte) 1);
        double[] doubleArray56 = mean45.getData();
        long long57 = mean45.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double65 = mean45.evaluate(doubleArray63);
        double double66 = mean0.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray73 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double74 = mean68.evaluate(doubleArray73);
        double[] doubleArray75 = new double[] {};
        mean68.incrementAll(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = mean68.copy();
        mean77.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean79 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray84 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double85 = mean79.evaluate(doubleArray84);
        mean77.setData(doubleArray84);
        mean77.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean88 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean67, mean88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.25d + "'", double29 == 0.25d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.25d + "'", double41 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.25d + "'", double65 == 0.25d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.25d + "'", double74 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(mean77);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.25d + "'", double85 == 0.25d);
        org.junit.Assert.assertNotNull(mean88);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        boolean boolean2 = mean0.equals((java.lang.Object) 0L);
        double double3 = mean0.getResult();
        mean0.increment(2.2d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double8 = mean7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray15 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double16 = mean10.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean9, mean10);
        boolean boolean19 = mean10.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = mean10.copy();
        mean10.clear();
        boolean boolean22 = mean7.equals((java.lang.Object) mean10);
        mean7.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = mean7.copy();
        double[] doubleArray26 = mean25.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double double37 = mean27.evaluate(doubleArray33, (int) (short) 0, (int) (short) 1);
        mean27.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray48 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double49 = mean43.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean43);
        double[] doubleArray51 = null;
        mean42.setData(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray59 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double60 = mean54.evaluate(doubleArray59);
        double double63 = mean53.evaluate(doubleArray59, (int) (short) 0, (int) (short) 1);
        mean42.setData(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        double double75 = mean65.evaluate(doubleArray71, (int) (short) 0, (int) (short) 1);
        mean65.increment(100.0d);
        double[] doubleArray81 = new double[] { 0L, (-1), (short) 1 };
        mean65.setData(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean42, mean65);
        long long84 = mean65.getN();
        double[] doubleArray85 = mean65.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean65);
        mean65.increment((double) 10L);
        double[] doubleArray89 = mean65.getData();
        double[] doubleArray90 = mean65.getData();
        mean41.setData(doubleArray90);
        boolean boolean92 = mean25.equals((java.lang.Object) doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = mean0.evaluate(doubleArray90, 10, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: length (-1)");
        } catch (org.apache.commons.math.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(mean6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.25d + "'", double16 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mean20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mean25);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.25d + "'", double49 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.25d + "'", double60 == 0.25d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        double[] doubleArray11 = mean10.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double33 = mean23.evaluate(doubleArray29, (int) (short) 0, (int) (short) 1);
        mean12.setData(doubleArray29);
        mean12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        double[] doubleArray46 = null;
        mean37.setData(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        double[] doubleArray57 = null;
        mean48.setData(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray65 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double66 = mean60.evaluate(doubleArray65);
        double double69 = mean59.evaluate(doubleArray65, (int) (short) 0, (int) (short) 1);
        mean48.setData(doubleArray65);
        mean37.incrementAll(doubleArray65);
        mean12.setData(doubleArray65);
        mean10.setData(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray80 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double81 = mean75.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean74, mean75);
        mean74.increment((double) (byte) 1);
        double[] doubleArray85 = mean74.getData();
        long long86 = mean74.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray92 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double93 = mean87.evaluate(doubleArray92);
        double double94 = mean74.evaluate(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = mean10.evaluate(doubleArray92, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.25d + "'", double66 == 0.25d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.25d + "'", double81 == 0.25d);
        org.junit.Assert.assertNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.25d + "'", double93 == 0.25d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.25d + "'", double94 == 0.25d);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        double[] doubleArray9 = null;
        mean0.setData(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        double double21 = mean11.evaluate(doubleArray17, (int) (short) 0, (int) (short) 1);
        mean0.setData(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean23, mean24);
        boolean boolean33 = mean24.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = mean24.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        mean35.increment((double) (byte) 1);
        double[] doubleArray46 = mean35.getData();
        long long47 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray53 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double54 = mean48.evaluate(doubleArray53);
        double double55 = mean35.evaluate(doubleArray53);
        double double56 = mean34.evaluate(doubleArray53);
        mean0.incrementAll(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = mean61.copy();
        long long63 = mean62.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mean34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.25d + "'", double54 == 0.25d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertNotNull(mean62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray19 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double20 = mean14.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean13, mean14);
        double[] doubleArray22 = null;
        mean13.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean13.setData(doubleArray30);
        long long36 = mean13.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray42 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double43 = mean37.evaluate(doubleArray42);
        double[] doubleArray44 = new double[] {};
        mean37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = mean37.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray54 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double55 = mean49.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean48, mean49);
        mean48.increment((double) (byte) 1);
        double[] doubleArray59 = mean48.getData();
        long long60 = mean48.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray66 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double67 = mean61.evaluate(doubleArray66);
        double double68 = mean48.evaluate(doubleArray66);
        mean47.incrementAll(doubleArray66);
        double double70 = mean13.evaluate(doubleArray66);
        mean1.setData(doubleArray66);
        mean1.increment((double) (byte) 100);
        double[] doubleArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.25d + "'", double43 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(mean46);
        org.junit.Assert.assertNotNull(mean47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.25d + "'", double55 == 0.25d);
        org.junit.Assert.assertNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.25d + "'", double67 == 0.25d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.25d + "'", double68 == 0.25d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.25d + "'", double70 == 0.25d);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        double[] doubleArray11 = mean0.getData();
        long long12 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double20 = mean0.evaluate(doubleArray18);
        double double21 = mean0.getResult();
        double[] doubleArray22 = null;
        mean0.setData(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double25 = mean24.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.25d + "'", double20 == 0.25d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean12, mean13);
        double[] doubleArray21 = null;
        mean12.setData(doubleArray21);
        mean12.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray31 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double32 = mean26.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean25, mean26);
        boolean boolean35 = mean26.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = mean26.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray43 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double44 = mean38.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean37, mean38);
        mean37.increment((double) (byte) 1);
        double[] doubleArray48 = mean37.getData();
        long long49 = mean37.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray55 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double56 = mean50.evaluate(doubleArray55);
        double double57 = mean37.evaluate(doubleArray55);
        double double58 = mean36.evaluate(doubleArray55);
        mean12.incrementAll(doubleArray55);
        mean0.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean61 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean61.clear();
        mean61.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray71 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double72 = mean66.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean66);
        mean65.increment((double) (byte) 1);
        double[] doubleArray76 = mean65.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray82 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double83 = mean77.evaluate(doubleArray82);
        double[] doubleArray84 = new double[] {};
        mean77.incrementAll(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Mean mean86 = mean77.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean87 = mean77.copy();
        mean87.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean65, mean87);
        double double91 = mean65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean92 = mean65.copy();
        boolean boolean93 = mean61.equals((java.lang.Object) mean92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.25d + "'", double32 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mean36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.25d + "'", double44 == 0.25d);
        org.junit.Assert.assertNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.25d + "'", double56 == 0.25d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.25d + "'", double57 == 0.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.25d + "'", double58 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.25d + "'", double72 == 0.25d);
        org.junit.Assert.assertNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.25d + "'", double83 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(mean86);
        org.junit.Assert.assertNotNull(mean87);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertNotNull(mean92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray41 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double42 = mean36.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean36);
        long long44 = mean35.getN();
        double[] doubleArray45 = mean35.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray52 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double53 = mean47.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean46, mean47);
        double[] doubleArray55 = null;
        mean46.setData(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray63 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double64 = mean58.evaluate(doubleArray63);
        double double67 = mean57.evaluate(doubleArray63, (int) (short) 0, (int) (short) 1);
        mean46.setData(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean35, mean46);
        double double70 = mean35.getResult();
        mean35.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean35);
        mean73.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean34, mean73);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.25d + "'", double42 == 0.25d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.25d + "'", double64 == 0.25d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        boolean boolean23 = mean11.equals((java.lang.Object) mean12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean13);
        long long16 = mean15.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(mean14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        mean1.increment((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double13 = mean1.evaluate();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: input array");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        long long10 = mean9.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean9.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean11);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mean11);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = null;
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray7 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double8 = mean2.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean2);
        double[] doubleArray10 = null;
        mean1.setData(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double double22 = mean12.evaluate(doubleArray18, (int) (short) 0, (int) (short) 1);
        mean1.setData(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray30 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double31 = mean25.evaluate(doubleArray30);
        double double34 = mean24.evaluate(doubleArray30, (int) (short) 0, (int) (short) 1);
        mean24.increment(100.0d);
        double[] doubleArray40 = new double[] { 0L, (-1), (short) 1 };
        mean24.setData(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean1, mean24);
        long long43 = mean24.getN();
        double[] doubleArray44 = mean24.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean45, mean46);
        long long54 = mean45.getN();
        mean45.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean24, mean45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.25d + "'", double8 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = mean0.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray17 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double18 = mean12.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean11, mean12);
        mean11.increment((double) (byte) 1);
        double[] doubleArray22 = mean11.getData();
        long long23 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray29 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double30 = mean24.evaluate(doubleArray29);
        double double31 = mean11.evaluate(doubleArray29);
        mean10.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray39 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double40 = mean34.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean34);
        mean33.increment((double) (byte) 1);
        double[] doubleArray44 = mean33.getData();
        long long45 = mean33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray51 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double52 = mean46.evaluate(doubleArray51);
        double double53 = mean33.evaluate(doubleArray51);
        double double54 = mean33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray60 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double61 = mean55.evaluate(doubleArray60);
        double[] doubleArray62 = new double[] {};
        mean55.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = mean55.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean33, mean64);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean10, mean33);
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = mean10.copy();
        long long68 = mean67.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = mean67.copy();
        long long70 = mean69.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean69);
        mean71.clear();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNotNull(mean10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.25d + "'", double18 == 0.25d);
        org.junit.Assert.assertNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.25d + "'", double30 == 0.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.25d + "'", double31 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.25d + "'", double40 == 0.25d);
        org.junit.Assert.assertNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.25d + "'", double52 == 0.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.25d + "'", double53 == 0.25d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.25d + "'", double61 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(mean64);
        org.junit.Assert.assertNotNull(mean67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4L + "'", long68 == 4L);
        org.junit.Assert.assertNotNull(mean69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        double double10 = mean0.evaluate(doubleArray6, (int) (short) 0, (int) (short) 1);
        mean0.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        mean13.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        boolean boolean26 = mean17.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = mean17.copy();
        mean17.clear();
        mean17.clear();
        double[] doubleArray30 = mean17.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray37 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double38 = mean32.evaluate(doubleArray37);
        double double41 = mean31.evaluate(doubleArray37, (int) (short) 0, (int) (short) 1);
        mean17.setData(doubleArray37, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mean13.incrementAll(doubleArray37, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: subarray ends after array end");
        } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mean27);
        org.junit.Assert.assertNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.25d + "'", double38 == 0.25d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        boolean boolean10 = mean1.equals((java.lang.Object) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = mean1.copy();
        long long12 = mean1.getN();
        double double13 = mean1.getResult();
        mean1.increment((double) 10);
        long long16 = mean1.getN();
        long long17 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean1);
        mean1.increment((double) 1L);
        double[] doubleArray21 = mean1.getData();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mean11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNull(doubleArray21);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        double[] doubleArray7 = new double[] {};
        mean0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = mean0.copy();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean12);
        double[] doubleArray14 = mean12.getData();
        double double15 = mean12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray22 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double23 = mean17.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean17);
        mean16.increment((double) (byte) 1);
        double[] doubleArray27 = mean16.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray33 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double34 = mean28.evaluate(doubleArray33);
        double[] doubleArray35 = new double[] {};
        mean28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = mean28.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = mean28.copy();
        mean38.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean16, mean38);
        double[] doubleArray45 = new double[] { 100, 1, (byte) 100 };
        mean38.setData(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean38);
        double[] doubleArray50 = new double[] { 52.0d, 4.0d };
        double double51 = mean47.evaluate(doubleArray50);
        double double52 = mean12.evaluate(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(mean9);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.25d + "'", double23 == 0.25d);
        org.junit.Assert.assertNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(mean37);
        org.junit.Assert.assertNotNull(mean38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[52.0, 4.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 28.0d + "'", double51 == 28.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 28.0d + "'", double52 == 28.0d);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray6 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double7 = mean1.evaluate(doubleArray6);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean0, mean1);
        mean0.increment((double) (byte) 1);
        mean0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray18 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double19 = mean13.evaluate(doubleArray18);
        double[] doubleArray20 = new double[] {};
        mean13.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = mean13.copy();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = mean13.copy();
        java.lang.Class<?> wildcardClass24 = mean23.getClass();
        boolean boolean25 = mean0.equals((java.lang.Object) wildcardClass24);
        double[] doubleArray26 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double28 = mean27.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.25d + "'", double7 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.25d + "'", double19 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(mean22);
        org.junit.Assert.assertNotNull(mean23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(doubleArray26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray5 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double6 = mean0.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray13 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double14 = mean8.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean7, mean8);
        double[] doubleArray16 = null;
        mean7.setData(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray24 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double25 = mean19.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Mean.copy(mean18, mean19);
        double[] doubleArray27 = null;
        mean18.setData(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray35 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double36 = mean30.evaluate(doubleArray35);
        double double39 = mean29.evaluate(doubleArray35, (int) (short) 0, (int) (short) 1);
        mean18.setData(doubleArray35);
        mean7.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double[] doubleArray47 = new double[] { (byte) 1, (-1), 0.0f, 1L };
        double double48 = mean42.evaluate(doubleArray47);
        double[] doubleArray49 = new double[] {};
        mean42.incrementAll(doubleArray49);
        mean7.setData(doubleArray49);
        double double54 = mean0.evaluate(doubleArray49, (int) (short) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        double double56 = mean0.getResult();
        double[] doubleArray57 = mean0.getData();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean(mean0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.25d + "'", double6 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.25d + "'", double36 == 0.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, -1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.25d + "'", double48 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(doubleArray57);
    }
}

